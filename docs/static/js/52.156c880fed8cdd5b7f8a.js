/*{
    "version": "1.0.0",
    "platform": "darwin",
    "buildTime": "2021-10-18 18:02:05"
}*/
(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{"/Ykg":function(t,e,n){"use strict";var d=n("K6wJ");Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Zviewer=void 0;var o=d(n("q8s6")),r=d(n("MAG/")),s=d(n("6iOh")),a=d(n("1rR9")),l=d(n("IPZl")),c=d(n("v6s4")),i=d(n("kRUu")),p=d(n("XcRB")),u=d(n("ryJs"));n("hfS7"),n("axcb");var m=d(n("vApo")),f=n("V0j1"),b=n("7JPH"),h=d(n("nyVi"));function g(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,d=(0,l.default)(t);if(e){var o=(0,l.default)(this).constructor;n=Reflect.construct(d,arguments,o)}else n=d.apply(this,arguments);return(0,a.default)(this,n)}}var v=function(t){(0,s.default)(n,t);var e=g(n);function n(){var t;(0,o.default)(this,n);for(var d=arguments.length,r=new Array(d),s=0;s<d;s++)r[s]=arguments[s];return(t=e.call.apply(e,[this].concat(r))).initViewer=(0,h.default)((function(){t.viewer?t.viewer.update():t.props.urls.length&&(t.viewer=new u.default(t.imgsEl,{transition:!1,url:function(t){return t.dataset.url},hide:t.props.onViewerHide,ready:function(){var e=t.viewer.viewer?t.viewer.viewer:null;if(e&&null===e.querySelector(".z-next")){var n=document.createElement("div"),d=document.createElement("div");n.className="z-next",d.className="z-prev",n.innerHTML='<i  class="zero-icon zerod-next"/>',d.innerHTML='<i  class="zero-icon zerod-prev"/>',e.appendChild(n),e.appendChild(d),n.addEventListener("click",(function(){t.viewer.next(!0)}),!1),d.addEventListener("click",(function(){t.viewer.prev(!0)}),!1)}}})),t.props.viewerUpdated&&t.props.viewerUpdated()}),60),t}return(0,r.default)(n,[{key:"componentDidMount",value:function(){this.initViewer()}},{key:"componentDidUpdate",value:function(t){t.urls===this.props.urls&&t.urls.length===this.props.urls.length||this.initViewer()}},{key:"componentWillUnmount",value:function(){this.viewer&&this.viewer.destroy()}},{key:"render",value:function(){var t=this,e=this.props.showThumbAlt;return c.default.createElement("ul",{ref:function(e){t.imgsEl=e},className:"z-viewer-ul ".concat(this.props.className)},c.default.createElement(b.TransitionGroup,{component:null,enter:!0,exit:!1,appear:!0},this.props.urls.map((function(n,d){var o="string"==typeof n?n:n.thumb?n.thumb:n.url,r="string"==typeof n?n:n.url,s="string"!=typeof n&&n.alt?n.alt:d+1;return c.default.createElement(b.CSSTransition,{key:d,timeout:f.animateTimout.flipInTime,classNames:"flipY",onEntered:t.initViewer,onExited:t.initViewer},c.default.createElement("li",{key:d},e?c.default.createElement("div",{className:"z-viewer-thumb"},c.default.createElement(m.default,{url:o,style:{height:"100%"}})):c.default.createElement(m.default,{url:o,style:{height:"100%"}}),e?c.default.createElement("div",{className:"z-viewer-alt"},s):null,c.default.createElement("img",{"data-url":r,alt:s})))}))))}}]),n}(i.default);e.Zviewer=v,v.propTypes={urls:p.default.oneOfType([p.default.arrayOf(p.default.string),p.default.arrayOf(p.default.object)]),className:p.default.string,showThumbAlt:p.default.bool},v.defaultProps={urls:[],className:"",showThumbAlt:!0};var y=v;e.default=y},FoDv:function(t,e,n){"use strict";var d=n("K6wJ");Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;d(n("v6s4"));var o=d(n("QP0v")),r=d(n("oHWW")),s=r.default.AmdDocHOC,a=(r.default.AshowDemoHOC,s(o.default,{EmptyRender:function(){return null}}));e.default=a},QP0v:function(t,e){t.exports='\x3c!-- @routePath:/zerod-cli --\x3e\n\n<h1 id="zerod-cli">Zerod-cli</h1>\n<p><code>zerod-cli</code>是快速初始化一个基于<code>react</code>、<code>scss</code>或<code>less</code>的脚手架工具，可选多种创建模板。</p>\n<h2 id="安装">安装</h2>\n<pre><code class="language-shell"># 更改registry(已改过可以跳过)\nnpm config set registry http://172.16.8.10:8081/repository/npm-all\n# 安装\nnpm install zerod-cli -g</code></pre>\n<h2 id="初始化项目">初始化项目</h2>\n<pre><code class="language-shell">zerod init projectName\n\n? 项目描述: (zerod-webpack project)\n? 创建者: (默认git用户+邮箱)\n? 模板: (Use arrow keys)\n&gt; zerod-admin-webpack\n  zerod-simple-webpack\n  zerod-mobile-webpack\n  zerod-markdown-webpack\n? gitlab连接方式: (Use arrow keys)\n&gt; http\n  ssh\n? 默认启用ESlint: (Y/n)</code></pre>\n<h2 id="模板的通用命令">模板的通用命令</h2>\n<blockquote>\n<p><code>npm run dll</code> 默认将 react、react-dom、react-router-dom 预打包生成 dllStatic/reactDll, 并且将&quot;dependencies&quot;的依赖包预打包生成 dllStatic/vendorDll。</p>\n</blockquote>\n<blockquote>\n<p><code>npm run dll-lib</code> 当 npm run dev 一次之后会生成当前依赖 antd 的模块清单 dllLibrarysManifes/antd-modules-manifes.json，npm run dll-lib 会根据此 json 预打包 antd 生成 dllStatic/librarysDll；cnpm install 与 npm install 安装的依赖包的模块路径有所不同，建议弃用 cnpm。</p>\n</blockquote>\n<blockquote>\n<p><code>npm run dev</code> 本地启用开发服务。</p>\n</blockquote>\n<blockquote>\n<p><code>npm run build</code> 生产时构建打包，后接<code>--report</code>参数，打包完成后会启动模块依赖报告。</p>\n</blockquote>\n<blockquote>\n<p><code>npm run eslint</code> 用 eslint 检查<code>src</code>下的 js、jsx 代码规范，前提先要全局安装 <code>npm install eslint eslint-plugin-react eslint-plugin-react-hooks -g</code>一次。</p>\n</blockquote>\n<blockquote>\n<p>当需要删除<code>node_modules</code>时，推荐使用<code>rimraf</code>，<code>npm install rimraf -g</code>后<code>rimraf node_modules</code>。</p>\n</blockquote>\n<p><code>npm run dev</code>和<code>npm run build</code> 后台接的 <code>--</code> 参数都会打入到环境变量。</p>\n<pre><code class="language-js">npm run build --basepath=/myPath/</code></pre>\n<p>在浏览器端通过<code>process.env</code>取得。</p>\n<pre><code class="language-js">const basepath = process.env.basepath; // &quot;/myPath/&quot;</code></pre>\n<h2 id="配置文件">配置文件</h2>\n<p>每个模板都需要配置文件<code>zerod.config.js</code>，主要的配置属性：</p>\n\x3c!-- prettier-ignore-start --\x3e\n\x3c!-- SOMETHING AUTO-GENERATED BY TOOLS - START --\x3e\n\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>webpackMerger</td>\n<td>追加合并 webpack 的配置，如添加入口配置等等。<a href="https://webpack.js.org/">webpack 文档</a></td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>loaders</td>\n<td>追加加载器(同 webpackMerger.module.rules)</td>\n<td>array</td>\n<td>--</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>&quot;pc&quot;对应 zerod-admin-webpack 模板,&quot;mobile&quot;对应 zerod-mobile-webpack 模板,&quot;simple&quot;对应 zerod-simple-webpack 模板</td>\n<td>&quot;pc&quot;|&quot;mobile&quot;|&quot;simple&quot;</td>\n<td>--</td>\n</tr>\n<tr>\n<td>pace</td>\n<td>是否启用页面顶部进度条</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ant-icons</td>\n<td>是否 antd v3 的图标按需引入,当 platform===&quot;pc&quot;有效,必需 src/ant-icons.js</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>copyFolderName</td>\n<td>共享代码包的目录名称 (允许在当前项目维护一个发布到私服的公共代码包)</td>\n<td>string</td>\n<td>&quot;share-code&quot;</td>\n</tr>\n<tr>\n<td>babel-includes</td>\n<td>追加 babel 编译包含的目录，默认包含了 src、share 或 zerod 开头的目录</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>favicon</td>\n<td>浏览器标签页小图标</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>scssVars</td>\n<td>scss 变量覆盖 less 变量,目前主要用于 scss 变量覆盖 antd 的 less 的主题变量 (v1.5.0 后不再有 scss 变量提升的效果)</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>scssRule</td>\n<td>追加 sass-loader 的规则配置,false 则不使用 sass-loader。<a href="https://webpack.js.org/loaders/sass-loader/">sass-loader rules</a></td>\n<td>object |function(opt){return opt}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>lessRule</td>\n<td>追加 less-loader 的规则配置,false 则不使用 less-loader 。<a href="https://webpack.js.org/loaders/less-loader/">less-loader rules</a></td>\n<td>object |function(opt){return opt}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>reactCssModulesOptions</td>\n<td><a href="https://github.com/gajus/babel-plugin-react-css-modules#options">babel-plugin-react-css-modules 插件的属性配置</a> 。</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>urlLoaderOptions</td>\n<td><a href="https://webpack.js.org/loaders/url-loader/#options">url-loader 的属性配置</a>。</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll</td>\n<td>预打包的配置，npm run dll | | dll-lib 触发</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.disabled</td>\n<td>是否禁用 dll</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>dll.include</td>\n<td>除了 package.json 的 dependencies 记录的包，还需包含</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>dll.exclude</td>\n<td>从 package.json 的 dependencies 记录的包中不包含</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>dll.distEnv</td>\n<td>是否分模式打包(会分别以&#39;production&#39;和&#39;development&#39;模式，false 只以&#39;production&#39;模式打包)</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>dll.usefulEnvName</td>\n<td>引入 dll 资源时使用的模式，默认取自 process.env.NODE_ENV</td>\n<td>&#39;production&#39; | &#39;development&#39;</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.dllModules</td>\n<td>需要预打包的模块(每组模块是按顺序依赖的，例如&#39;react&#39;组生成 reactDll 后，&#39;vendor&#39;组依赖&#39;react&#39;组生成 vendorDll)，默认：[{name:&#39;react&#39;,modules: [&#39;react&#39;, &#39;react-dom&#39;, &#39;react-router-dom&#39;]},{name:&#39;vendor&#39;,modules: package.dependencies}]</td>\n<td>array[object]</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.dllLibrarys</td>\n<td>按需预打包的组件库(即生成 dllLibrarysManifes 清单文件的配置) ，默认：[{libraryName: &#39;antd&#39;,styleDirectory: &#39;style&#39;,moduleFilter: null,}]</td>\n<td>array[object]</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.dllLibrarys[].libraryName</td>\n<td>组件库包名称</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.dllLibrarys[].styleDirectory</td>\n<td>组件库按需样式模块的目录名称，组件库的模块目录结构应该与 antd 的目录结构相似才能按需打包样式</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dll.dllLibrarys[].moduleFilter</td>\n<td>过滤模块的方法</td>\n<td>function(moduleString){return boolean}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>CopyWebpackOptions</td>\n<td>追加 <a href="https://github.com/webpack-contrib/copy-webpack-plugin/tree/v5.1.1">copy-webpack-plugin 插件的配置</a>。</td>\n<td>array[object] |(config,NODE_ENV)=&gt;([{}])</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>HtmlIncludeAssets</td>\n<td>追加 <a href="https://github.com/jharris4/html-webpack-tags-plugin#options">html-webpack-tags-plugin 插件的配置</a>。</td>\n<td>array[object]|(config,NODE_ENV)=&gt;([{}])</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>dev</td>\n<td>开发模式的独立配置</td>\n<td>{}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>dev.assetsSubDirectory</td>\n<td>不进行编译的静态文件目录</td>\n<td>string</td>\n<td>&quot;static&quot;</td>\n</tr>\n<tr>\n<td>dev.assetsPublicPath</td>\n<td>绝对路径前缀， 也可以来自 npm run dev --baserouter=/mypath/ || --basepath=/mypath/， 优先级：baserouter&gt;basepath&gt;assetsPublicPath</td>\n<td>string</td>\n<td>&quot;/&quot;</td>\n</tr>\n<tr>\n<td>dev.proxyTable</td>\n<td>webpack-dev-server 的反代理配置</td>\n<td>object|array</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>dev.autoOpenBrowser</td>\n<td>启动服务后是否自动打开浏览器,可以是浏览器文件如 &#39;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&#39;</td>\n<td>boolean|string</td>\n<td>false</td>\n</tr>\n<tr>\n<td>dev.errorOverlay</td>\n<td>出现编译器错误或警告时，在浏览器中显示全屏覆盖</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>dev.notifyOnErrors</td>\n<td>译出错在系统右下角弹出提醒</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>dev.useEslint</td>\n<td>是否编译时启用 eslint-loader</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>dev.eslintRule</td>\n<td>追 eslint-loader 的规则配置</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>dev.cssSourceMap</td>\n<td>是否编译后的 css 生成 sourceMap</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>build</td>\n<td>生产模式独立配置</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>build.index</td>\n<td>根目录的 index.html 模板打包后的位置</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>build.assetsRoot</td>\n<td>打包后所有文件的位置</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>build.assetsSubDirectory</td>\n<td>不进行编译的静态文件目录</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>build.assetsPublicPath</td>\n<td>绝对路径前缀, 也可以来自 npm run build --baserouter=/mypath/ || --basepath=/mypath/， 优先级： baserouter&gt;basepath&gt;assetsPublicPath</td>\n<td>string</td>\n<td>&quot;/&quot;</td>\n</tr>\n<tr>\n<td>build.productionSourceMap</td>\n<td>是否编译后的 css、js 生成 sourceMap</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>build.productionGzip</td>\n<td>是否编译后压缩 zip</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>build.productionGzipExtensions</td>\n<td>压缩 zip 的包含文件类型</td>\n<td>array</td>\n<td>[&quot;js&quot;,&quot;css&quot;]</td>\n</tr>\n<tr>\n<td>webpackReplacement</td>\n<td>覆盖 webpack 的配置</td>\n<td>{}</td>\n<td>--</td>\n</tr>\n</tbody></table>\n\x3c!-- SOMETHING AUTO-GENERATED BY TOOLS - END --\x3e\n\x3c!-- prettier-ignore-end --\x3e\n\n<div class="z-demo-box" data-render="EmptyRender" data-title="" data-description="一些属性使用示例，请展开查看" data-defaultexpanded="false"></div>\n\n<pre><code class="language-js">/**\n * @renderMode:inline\n * @componentName:EmptyRender\n * @description:一些属性使用示例，请展开查看\n */\nconst path = require(&#39;path&#39;);\nfunction resolve(dir) {\n    return path.join(__dirname, &#39;./&#39;, dir);\n}\nconst config = {\n    //追加合并webpack配置\n    webpackMerger: {\n        //入口\n        entry: { app: [resolve(&#39;src/main.js&#39;)] },\n        //追加加载器\n        module: { rules: [] },\n    },\n    //增加加载器\n    loaders: [\n        { test: /\\.xml$/, loader: &#39;xml-loader&#39; },\n        {\n            test: /\\.bpmn$/,\n            use: &#39;raw-loader&#39;,\n        },\n    ],\n    platform: &#39;pc&#39;, //&quot;pc&quot; 对应 zerod-admin-webpack 模板,&quot;mobile&quot; 对应 zerod-mobile-webpack 模板\n    //是否添加 pace.js(页面顶部进度条)\n    pace: true,\n    //是否antd的图标按需引入,在src/ant-icons.js\n    &#39;ant-icons&#39;: true,\n    //根目录的哪个目录copy到node_modules,copy到node_modules的包名称是 copyFolderName/package.json的name，由npm run copy触发\n    copyFolderName: &#39;share-code&#39;,\n    //babel-loader 要包含的文件夹是哪些默认包含src,false则不使用babel-loader\n    &#39;babel-includes&#39;: [],\n    //浏览器标签页小图标\n    favicon: resolve(&#39;src/assets/images/logo.png&#39;),\n    //scss变量覆盖less变量,目前主要用于scss变量覆盖antd的less的主题变量\n    scssVars: [resolve(&#39;node_modules/zerod/ant-theme-vars.scss&#39;)],\n    //追加sass-loader的rule,false则不使用sass-loader\n    scssRule: {},\n    //追加less-loader的rule,false则不使用less-loader\n    lessRule: {},\n    //babel-plugin-react-css-modules的配置\n    reactCssModulesOptions: {},\n    //url-loader的参数配置\n    urlLoaderOptions: {},\n    //将package.json的dependencies的依赖包预打包,npm run dll||dll-dev||dll-prod 触发\n    dll: {\n        //是否禁用dll\n        disabled: false,\n        //除了package.json的dependencies，还需包含\n        include: [],\n        //打包dll时从package.json的dependencies中不包含\n        exclude: [&#39;react-redux&#39;, &#39;redux&#39;],\n    },\n    //copy-webpack-plugin插件的追加配置 [] || (config,NODE_ENV)=&gt;([])\n    CopyWebpackOptions: function(conf, env) {\n        //将node_modules/bpmn-js的静态资源分模式拷贝\n        return [\n            {\n                from: path.resolve(__dirname, &#39;../node_modules/bpmn-js/dist/assets&#39;),\n                to: (env === &#39;production&#39; ? conf.build.assetsSubDirectory : conf.dev.assetsSubDirectory) + &#39;/bpmn&#39;,\n                test: /\\.css$/,\n            },\n            {\n                from: path.resolve(__dirname, &#39;../node_modules/bpmn-js/dist/assets/bpmn-font/css&#39;),\n                to: (env === &#39;production&#39; ? conf.build.assetsSubDirectory : conf.dev.assetsSubDirectory) + &#39;/bpmn&#39;,\n                test: /\\.css$/,\n            },\n        ];\n    },\n    //html-webpack-tags-plugin插件的追加配置 [] || (config,NODE_ENV)=&gt;([])\n    HtmlIncludeAssets: [\n        {\n            //在index.html中添加 node_modules/bpmn-js的css静态资源\n            tags: [\n                {\n                    path: &#39;static/bpmn&#39;,\n                    glob: &#39;*.css&#39;,\n                    globPath: &#39;node_modules/bpmn-js/dist/assets&#39;,\n                },\n                {\n                    path: &#39;static/bpmn&#39;,\n                    glob: &#39;*.css&#39;,\n                    globPath: &#39;node_modules/bpmn-js/dist/assets/bpmn-font/css&#39;,\n                },\n            ], // 添加的资源相对html的路径\n            append: false, // false 在其他资源的之前添加 true 在其他资源之后添加\n        },\n        //在index.html添加script标签\n        {\n            tags: [\n                {\n                    path: &#39;doc-service/jquery.min.js&#39;,\n                },\n                {\n                    path: &#39;doc-service/pageoffice.js&#39;,\n                    attributes: { id: &#39;po_js_main&#39; },\n                },\n            ], // 添加的资源相对html的路径\n            append: true, // false 在其他资源的之前添加 true 在其他资源之后添加\n        },\n    ],\n    //开发模式配置\n    dev: {\n        // 不进行编译的静态文件目录\n        assetsSubDirectory: &#39;static&#39;,\n        // 前缀路径, npm run dev --basepath=/mypath/的basepath优先级大于此\n        assetsPublicPath: &#39;/&#39;,\n        // devServer的反代理配置\n        proxyTable: {},\n        host: &#39;0.0.0.0&#39;,\n        port: 33000,\n        //启动服务后是否自动打开浏览器,可以是浏览器文件如 &#39;C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe&#39;\n        autoOpenBrowser: false,\n        //出现编译器错误或警告时，在浏览器中显示全屏覆盖\n        errorOverlay: true,\n        //编译出错在右下角弹出提醒\n        notifyOnErrors: true,\n        poll: false,\n        //是否编译时启用eslint\n        useEslint: true,\n        //追eslint-loader的rule\n        eslintRule: {},\n        devtool: &#39;cheap-module-eval-source-map&#39;,\n        //css生成 SourceMap\n        cssSourceMap: true,\n    },\n    //生产模式配置\n    build: {\n        // 根目录的index.html模板打包后的位置\n        index: resolve(&#39;dist/index.html&#39;),\n        // 打包后所有文件的位置\n        assetsRoot: resolve(&#39;dist&#39;),\n        // 不进行编译的静态文件目录\n        assetsSubDirectory: &#39;static&#39;,\n        // 前缀路径, npm run build --basepath=/mypath/的basepath优先级大于此\n        assetsPublicPath: &#39;/&#39;,\n        // 是否生成 SourceMap\n        productionSourceMap: false,\n        // https://webpack.js.org/configuration/devtool/#production\n        devtool: &#39;source-map&#39;,\n        // 是否打包压缩zip\n        productionGzip: false,\n        productionGzipExtensions: [&#39;js&#39;, &#39;css&#39;],\n        // 打包完成后打开报告, npm run build --report 触发\n        bundleAnalyzerReport: process.env.npm_config_report,\n    },\n    //覆盖webpack配置\n    webpackReplacement: {},\n};\nmodule.exports = config;</code></pre>\n<h2 id="dll-的使用在项目的中后期提高构建效率">dll 的使用(在项目的中后期提高构建效率)</h2>\n<p>对应 <code>zerod.config.js</code> 的 dll 配置</p>\n<ul>\n<li><code>npm run dll</code>会把 dll.dllModules 模块按顺序依赖预打包生成 dllStatic， </li>\n<li>再<code>npm run dev</code>启动完成后会生成 dll.dllLibrarys 相关的 dllLibrarysManifes/*-modules-manifes.json， </li>\n<li>再<code>npm run dll-lib</code>会把 dllLibrarysManifes/*-modules-manifes.json 记录的模块生成 dllStatic/librarysDll。</li>\n</ul>\n<h2 id="模板-zerod-simple-webpack">模板 zerod-simple-webpack</h2>\n<p>主要依赖<code>react v16.8+</code>+<code>react-router v5</code>+<code>scss</code>+<code>axios</code>的简单模板，目录结构如下：</p>\n<pre><code class="language-js">├── /dist/ # 项目打包输出目录\n├── /share-code/ # 此目录的作用，当前项目需要独立出一些模块共享给其他项目时发布到私服，此目录名称可以随意修改，但需在zerod.config.js中配置copyFolderName\n│ └── package.json# 发布包的package.json\n├── /src/  # 项目开发源码目录\n│ ├── App.jsx # 根组件\n│ ├── app.scss# 根样式文件\n│ └── main.js # 项目入口文件\n├── /static/  # 不会被压缩打包的静态文件放这里\n├── .eslintrc.js # Eslin配置\n├── .gitgnore # git忽略检测的配置\n├── .postcssrc.js# postcss配置\n├── .prettierrc.js# 统一格式化代码 prettier 的配置， vscode 编辑器需安装 prettier 插件\n├── index.html# 单页面唯一的html\n├── babel.config.js  # babel配置\n├── package.json #\n└── zerod.config.js  # 配置文件，可以配置反代理路径和打包公共路径等等</code></pre>\n<h2 id="模板-zerod-admin-webpack">模板 zerod-admin-webpack</h2>\n<p>主要依赖<code>react v16.8+</code>+<code>react-router v5</code>+<code>antd v3.x</code>+<code>zerod v0.x</code>+<code>scss</code>+<code>axios</code>等的 PC 端单页面模板，目录结构如下：</p>\n<pre><code class="language-js">├── /dist/ # 项目打包输出目录\n├── /share-code/ # 此目录的作用，当前项目需要独立出一些模块共享给其他项目时发布到私服，此目录名称可以随意修改，但需在zerod.config.js中配置copyFolderName\n│ └── package.json# 发布包的package.json\n├── /src/  # 项目开发源码目录\n│ ├── /Api/# 后台接口文件夹,\n│ ├── /assets/# 公共文件:图片，iconfont,\n│ │ ├── /iconfont/# 来自 http://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a\n│ │ └── /images/ # 图片\n│ ├── /components/# 自生产的通用组件\n│ │ └── load-components.js# 自动加载/components/下`index.jsx`文件(可选用)\n│ │ ├── /AbgImage/# 组件文件夹，对应组件名称\n│ │ │ ├── index.jsx  # 组件主要文件（必需的）\n│ │ │ └── style.scss # 组件样式文件（如果需要）\n│ ├── /context/  # react “动态上下文” 文件\n│ ├── /lazyLoad/\n│ │ └── lazyLoad.js  # 这样使用const componet=lazyLoad(()=&gt;import(&#39;./componet.jsx&#39;))实现异步组件\n│ ├── /scss/  # 通用样式文件夹\n│ │ └── index.scss#\n│ ├── /store/ # 状态管理仓库，使用redux + react-redux，使用react hooks 后台可以选择不用react-redux\n│ ├── /views/ # 路由组件目录，应当按照路由结构创建\n│ ├── /zTool/ # 通用工具目录\n│ │ └── httpAjax.js  # ajax库：默认zerod-ztool/axiosInterceptor/httpAjax 对 axios 的封装\n│ ├── ant-icons.js# 按需引入ant-design的icon文件\n│ ├── App.api.js # 自动加载/Api/下`.api.js`后缀的文件(可选用)\n│ ├── App.context.js # 自动加载/context/下的&#39;Context.js&#39;(可选用)\n│ ├── App.jsx # 根组件\n│ ├── app.scss# 根样式文件\n│ └── main.js # 项目入口文件\n├── /static/  # 不会被压缩打包的静态文件放这里\n├── .eslintrc.js # Eslin配置\n├── .gitgnore # git忽略检测的配置\n├── .postcssrc.js# postcss配置\n├── .prettierrc.js# 统一格式化代码 prettier 的配置， vscode 编辑器需安装 prettier 插件\n├── index.html# 单页面唯一的html\n├── babel.config.js  # babel配置\n├── package.json #\n└── zerod.config.js  # 配置文件，可以配置反代理路径和打包公共路径等等</code></pre>\n<blockquote>\n<p><code>babel.config.js</code>中已经用<code>babel-plugin-import</code>配置了对<code>antd</code>和<code>zerod</code>的按需打包模块，当存在 dllStatic/librarysDll/style/antd.*.css 时，会自动对<code>antd</code>按需的 style:true 改为 style:false。</p>\n</blockquote>\n<h2 id="模板-zerod-mobile-webpack">模板 zerod-mobile-webpack</h2>\n<p>主要依赖<code>react v16.8+</code>+<code>react-router v5</code>+<code>antd-mobile v2.x</code>+<code>scss</code>+<code>axios</code>等的移动端单页面模板，目录结构如下：</p>\n<pre><code class="language-js">├── /dist/ # 项目打包输出目录\n├── /share-code/ # 此目录的作用，当前项目需要独立出一些模块共享给其他项目时发布到私服，此目录名称可以随意修改，但需在zerod.config.js中配置copyFolderName\n│ └── package.json# 发布包的package.json\n├── /src/  # 项目开发源码目录\n│ ├── /Api/# 后台接口文件夹,\n│ ├── /assets/# 公共文件:图片，iconfont,\n│ │ ├── /iconfont/# 来自 http://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a\n│ │ └── /images/ # 图片\n│ ├── /components/# 自生产的通用组件\n│ │ └── load-components.js# 自动加载/components/下`index.jsx`文件(可选用)\n│ │ ├── /AbgImage/# 组件文件夹，对应组件名称\n│ │ │ ├── index.jsx  # 组件主要文件（必需的）\n│ │ │ └── style.scss # 组件样式文件（如果需要）\n│ ├── /context/  # react “动态上下文” 文件\n│ ├── /lazyLoad/\n│ │ └── lazyLoad.js  # 这样使用const componet=lazyLoad(()=&gt;import(&#39;./componet.jsx&#39;))实现异步组件\n│ ├── /scss/  # 通用样式文件夹\n│ │ └── index.scss#\n│ ├── /store/ # 状态管理仓库，使用redux + react-redux，使用react hooks 后台可以选择不用react-redux\n│ ├── /views/ # 路由组件目录，应当按照路由结构创建\n│ ├── /zTool/ # 通用工具目录\n│ │ └── httpAjax.js  # ajax库：默认zerod-ztool/axiosInterceptor/httpAjax 对 axios 的封装\n│ ├── App.api.js # 自动加载/Api/下`.api.js`后缀的文件(可选用)\n│ ├── App.context.js # 自动加载/context/下的&#39;Context.js&#39;(可选用)\n│ ├── App.jsx # 根组件\n│ ├── app.scss# 根样式文件\n│ ├── theme-vars.scss # scss主题变量，用于覆盖antd-mobile的less主题变量\n│ └── main.js # 项目入口文件\n├── /static/  # 不会被压缩打包的静态文件放这里\n├── .eslintrc.js # Eslin配置\n├── .gitgnore # git忽略检测的配置\n├── .postcssrc.js# postcss配置\n├── .prettierrc.js# 统一格式化代码 prettier 的配置， vscode 编辑器需安装 prettier 插件\n├── index.html# 单页面唯一的html\n├── babel.config.js  # babel配置\n├── package.json #\n└── zerod.config.js  # 配置文件，可以配置反代理路径和打包公共路径等等</code></pre>\n<blockquote>\n<p>自适应原则：自动流布局为主，vw、vh 为辅，能不写固定宽度就不写。\n<code>.postcssrc.js</code>配置了<a href="https://github.com/evrone/postcss-px-to-viewport#usage">postcss-px-to-viewport(可以按实际需要修改参数)</a>用于将 px 单位转 vh、vw，转换设计稿分辨率默认是 750x1334，所以可以尽情的按照设计稿的 px 单位。</p>\n</blockquote>\n<h2 id="share-code">share-code</h2>\n<p>此目录的作用，当前项目需要独立出一些模块共享给其他项目时发布到私服(相当于发布npm包)，此目录名称可以随意修改，但需在zerod.config.js中配置copyFolderName</p>\n<p>share-code/package.json中的name就是发布到私服的包名，为了更加直观，尽量将share-code这个目录名称与包名一致</p>\n<h2 id="模板-zerod-markdown-webpack">模板 zerod-markdown-webpack</h2>\n<p>用 markdonw 写前端组件文档与 Demo 的编译模板</p>\n<p><code>.md</code>文件进入编译成文档的使用方式请查看<span class="z-history-href" data-path="/main/zerod-markdown">编写组件文档</span></p>\n<pre><code class="language-js">├── /dist/ # 项目打包输出目录\n├── /src/  # 组件开发源码与.md文件的目录\n│ ├── ant-icons.js# 按需引入ant-design的icon文件\n│ ├── docs.config.js # 可配置文档侧栏导航\n│ └── package.json# 发布包的package.json\n├── /static/  # 不会被压缩打包的静态文件放这里\n├── .eslintrc.js # Eslin配置\n├── .gitgnore # git忽略检测的配置\n├── .postcssrc.js# postcss配置\n├── .prettierrc.js# 统一格式化代码 prettier 的配置， vscode 编辑器需安装 prettier 插件\n├── babel.config.js  # babel配置\n├── package.json #\n└── zerod.config.js  # 配置文件，可以配置反代理路径和打包公共路径等等</code></pre>\n'},duPH:function(t,e,n){"use strict";var d=n("K6wJ");Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.ZcodeHighlight=void 0;var o=d(n("q8s6")),r=d(n("MAG/")),s=d(n("6iOh")),a=d(n("1rR9")),l=d(n("IPZl")),c=d(n("v6s4")),i=d(n("kRUu")),p=d(n("XcRB")),u=d(n("XYcM"));function m(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,d=(0,l.default)(t);if(e){var o=(0,l.default)(this).constructor;n=Reflect.construct(d,arguments,o)}else n=d.apply(this,arguments);return(0,a.default)(this,n)}}n("lYVS"),n("dDAE"),n("roMe"),n("YO7D"),n("77Mx"),n("vV76"),n("QgYW"),n("X7dv"),n("d8H9"),n("Vqov");var f=function(t){(0,s.default)(n,t);var e=m(n);function n(){return(0,o.default)(this,n),e.apply(this,arguments)}return(0,r.default)(n,[{key:"componentDidMount",value:function(){var t=this.props,e=t.children,n=t.mode;if(e){if(e&&"html"===n){var d=e.replace(/\<pre/g,'<pre class="line-numbers"');this.boxEl.innerHTML=d}u.default.highlightAllUnder(this.boxEl)}}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,d=e.mode,o=null;if(n&&"html"!==d){var r=c.default.createElement("code",{className:"language-".concat(this.props.lang)},this.props.children);o="block"===this.props.mode?c.default.createElement("pre",{className:"line-numbers"},r):r}return c.default.createElement("div",{ref:function(e){return t.boxEl=e}},o)}}]),n}(i.default);e.ZcodeHighlight=f,f.propTypes={mode:p.default.string,lang:p.default.string,children:p.default.string},f.defaultProps={lang:"html",mode:"block"};var b=f;e.default=b},oZFy:function(t,e,n){var d={"./AmdDocHOC/index.jsx":"xRbD","./AshowDemoHOC/index.jsx":"+GLa"};function o(t){var e=r(t);return n(e)}function r(t){if(!n.o(d,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return d[t]}o.keys=function(){return Object.keys(d)},o.resolve=r,t.exports=o,o.id="oZFy"},v5v4:function(t,e,n){"use strict";var d=n("K6wJ");Object.defineProperty(e,"__esModule",{value:!0}),e.ZpageWraperHOC=r,e.default=void 0;var o=d(n("6sYb"));function r(){return o.default}var s=r;e.default=s},vApo:function(t,e,n){"use strict";var d=n("K6wJ");Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.ZbgImage=void 0;var o=d(n("q8s6")),r=d(n("MAG/")),s=d(n("6iOh")),a=d(n("1rR9")),l=d(n("IPZl")),c=d(n("v6s4")),i=d(n("kRUu")),p=d(n("XcRB"));function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,d=(0,l.default)(t);if(e){var o=(0,l.default)(this).constructor;n=Reflect.construct(d,arguments,o)}else n=d.apply(this,arguments);return(0,a.default)(this,n)}}n("dLwK");var m=function(t){(0,s.default)(n,t);var e=u(n);function n(){return(0,o.default)(this,n),e.apply(this,arguments)}return(0,r.default)(n,[{key:"render",value:function(){var t=this,e="z-bg-image-box z-flex-items-center ".concat(this.props.className?this.props.className:""," ").concat(this.props.url?"":"no-url");return c.default.createElement("div",{className:e,onClick:function(e){t.props.onClick&&t.props.onClick(e)},style:this.props.style},this.props.url?null:c.default.createElement("span",null,"无图片"),c.default.createElement("div",{className:"z-bg-image is-bg-".concat(this.props.position),style:{backgroundImage:"url(".concat(this.props.url,")")}}),this.props.children)}}]),n}(i.default);e.ZbgImage=m,m.propTypes={url:p.default.string,position:p.default.string,className:p.default.string,style:p.default.object,onClick:p.default.func},m.defaultProps={position:"center"};var f=m;e.default=f}}]);