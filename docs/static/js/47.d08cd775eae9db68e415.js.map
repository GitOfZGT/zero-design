{"version":3,"sources":["webpack:///delegated ./node_modules/react-transition-group/index.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///./src/views/Main/zTool-doc/index.jsx","webpack:///./node_modules/zerod/components/zTool/doc.md","webpack:///./src/HOC sync index.jsx$","webpack:///delegated ./node_modules/viewerjs/dist/viewer.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368"],"names":["AmdDocHOC","HOC","doc"],"mappings":"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","file":"static/js/47.d08cd775eae9db68e415.js","sourcesContent":["module.exports = (__webpack_require__(\"9w1k\"))(489);","import React from \"react\";\r\nimport HOC from \"@/HOC/load-HOC.js\";\r\nconst { AmdDocHOC } = HOC;\r\nimport doc from \"zerod/components/zTool/doc.md\";\r\nexport default AmdDocHOC(doc);\r\n","module.exports = \"<!--\\n * @Author: zgt\\n * @Date: 2018-08-21 10:59:31\\n * @LastEditors: zgt\\n * @LastEditTime: 2019-08-16 15:31:51\\n * @Description: file content\\n -->\\n\\n<h1 id=\\\"-ztool\\\">工具库 zTool</h1>\\n<p><code>zTool</code>积累了一些通用的工具方法，包括对需要对 DOM 元素操作的一些方法</p>\\n<blockquote>\\n<p>除了 httpAjax,BuildScroll,IScrollInstance,scrollDisableWheel,IntroInstance,listenDivSizeChange,mergeConfig , 其他的都引自于 <code>zerod-ztool</code> (2019-06-24 zTool 分离出一个 zerod-ztool 包发布到私服)</p>\\n</blockquote>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-httpajax\\\">zTool.httpAjax</h2>\\n<p>对<code>axios</code>(优秀的 ajax 库)的二次封装，并统一了<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>、<code>patch</code>请求方式的传参方式</p>\\n<p>zTool.httpAjax()返回一个 Promise 对象,当<code>noCallback === false</code>时,默认对响应结果的处理：</p>\\n<p>只有 <code>result.data.code === 0</code> 时才会进入<code>then((re)=&gt;{})</code>回调，其他情况都会进入<code>catch((re)=&gt;{})</code>回调,并且<code>then((re)=&gt;{})</code>和<code>catch((re)=&gt;{})</code>回调中的参数<code>re</code>其实是<code>result.data</code></p>\\n<p>当 <code>result.data.code === -1</code> || <code>result.data.code === 500</code> 会 使用 <code>window.globalMsgError</code> 弹出 <code>result.data.msg</code> || <code>result.data.data</code> 提示</p>\\n<p>在<code>ZmainHOC</code>中已配置一个 window.globalMsgError = message.error 或者 notification.error</p>\\n<p>当 <code>result.data.code === 403403</code> 会提示<code>用户未登录或身份已过期</code></p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {string} method //get || post || put    .....\\n * @param {string} url //接口url\\n * @param {object} query //接口参数，key，value 对应\\n * @param {object} config //axios的config参数，更多请看https://github.com/axios/axios\\n * @param {boolean} noCallback //默认false，因为httpAjax方法默认会有对特殊请求结果的统一处理，noCallback=true时，就是不需要默认的统一处理\\n */\\n//例：\\nzTool\\n    .httpAjax(&quot;get&quot;, &quot;/webapi/v1.0/config/center/deleteServiceInfo&quot;, { id: &quot;41&quot; })\\n    .then(re =&gt; {})\\n    .then(re =&gt; {})\\n    .catch(re =&gt; {})\\n    .finally(() =&gt; {});\\nzTool.httpAjax(&quot;post&quot;, &quot;/webapi/v1.0/config/center/updateConfigProperty&quot;, { id: &quot;41&quot;, name: &quot;我们的故事&quot; });</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-isurl\\\">zTool.isUrl</h2>\\n<p>判断是否 url</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {string} url //\\n */\\nzTool.isUrl(&quot;https://github.com/axios/axios&quot;); // true</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-parsequerystring\\\">zTool.parseQueryString</h2>\\n<p>获取 url 问号后面的参数，并转成对象</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {string} url //\\n */\\nzTool.parseQueryString(&quot;http://my.com/select?id=100&amp;selected=1&quot;); //{id:100,selected:1}\\nzTool.parseQueryString(&quot;?id=100&amp;selected=1&quot;); //{id:100,selected:1}</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-filterquery\\\">zTool.filterQuery</h2>\\n<p>只取一个对象中的某些属性</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {array}  //\\n * @param {object}  //\\n */\\nzTool.filterQuery([&quot;name&quot;, &quot;selected&quot;], { name: &quot;萧雨&quot;, selected: false, id: &quot;85&quot;, woch: &quot;犹豫&quot; }); //得到新对象： {name:&quot;萧雨&quot;,selected:false}</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-buildscroll\\\">zTool.BuildScroll</h2>\\n<p><code>zTool.BuildScroll</code> 是一个构造方法，是对<a href=\\\"http://iscrolljs.com/#intro\\\" target=\\\"_blank\\\">漂亮滚动条插件 ISroll</a>的 <code>new IScroll(el,opt)</code> 的二次封装,并且解决嵌套滚动条的问题，且对 options 有一些默认值</p>\\n<p>注:zerod v0.0.124 之后<code>zTool.BuildScroll</code>在 Chrome 浏览器下是不起作用的，如 options.useCustomScroll=true 则会强制启用。</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //需要生成滚动条的盒子\\n * @param {object} options //IScroll的配置，更多请看http://iscrolljs.com/#intro\\n */\\n//scroollInstance有三个属性:\\n//scroollInstance.scroll：其实是new IScroll(el,opt)的实例，\\n//scroollInstance.refresh:更新滚动条的方法，\\n//scroollInstance.nextScrollToTop：布尔值,默认false，下次调用refresh()时是否滚动条回到顶部\\nconst scroollInstance = new zTool.BuildScroll(el, opt);\\n\\n// 结合zTool.listenDivSizeChange达到自动更新滚动条的效果\\nclass My extends ZpureComponent {\\n    componentDidMount() {\\n        this.scroollInstance = new zTool.BuildScroll(this.bodyEl, { scrollbars: &quot;custom&quot; });\\n        zTool.listenDivSizeChange(this.bodyEl, this.scroollInstance.refresh);\\n        zTool.listenDivSizeChange(this._contentEl, this.scroollInstance.refresh);\\n    }\\n    render() {\\n        return (\\n            &lt;section ref={el =&gt; (this.bodyEl = el)}&gt;\\n                &lt;div ref={el =&gt; (this._contentEl = el)} style={{ position: &quot;relative&quot; }}&gt;\\n                    &lt;div&gt;{this.props.children}&lt;/div&gt;\\n                &lt;/div&gt;\\n            &lt;/section&gt;\\n        );\\n    }\\n}</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-listendivsizechange\\\">zTool.listenDivSizeChange</h2>\\n<p>监听盒子（div）尺寸变化 ,只对 section，div 等块状元素有效，对 textarea 无效</p>\\n<p>注:zerod v0.0.124 之后<code>zTool.listenDivSizeChange</code>在 Chrome 浏览器下是不起作用的，如 options.useCustomScroll=true 则会强制启用。</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //需要生成滚动条的盒子\\n * @param {function} callback //回调函数\\n * @param {object} options //options.useCustomScroll\\n */\\nzTool.listenDivSizeChange(document.querySelector(&quot;#id&quot;), ()=&gt;{\\n    //盒子高度/宽度变化了\\n}));</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-scrolldisablewheel\\\">zTool.scrollDisableWheel</h2>\\n<p>用于解决外层使用了<code>zTool.BuildScroll</code>创建了滚动条，内部存在如：<code>textarea</code>出现滚动条时滚轮对<code>textarea</code>无效问题</p>\\n<p>注:zerod v0.0.124 之后<code>zTool.scrollDisableWheel</code>在 Chrome 浏览器下是不起作用的，如 options.useCustomScroll=true 则会强制启用。</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //textarea等\\n * @param {object} options //options.useCustomScroll\\n */\\nzTool.scrollDisableWheel(document.querySelector(&quot;#textarea&quot;));</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-gennonduplicateid\\\">zTool.GenNonDuplicateID</h2>\\n<p>用于随机产生不重复 id</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {number} randomLength //时间戳之前的随机个数，默认8\\n */\\nzTool.GenNonDuplicateID(8);</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-eetostring\\\">zTool.EetoString</h2>\\n<p>科学计数法转字符串,(数字位数过大，浏览器会以科学计数法方式显示，我们想要显示完整的数字就转成字符串来显示)</p>\\n<pre><code class=\\\"language-jsx\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {number} num //数字\\n */\\nzTool.EetoString(6.5e8); //&quot;650000000&quot;\\nzTool.EetoString(6.5e-7); //&quot;0.65000000&quot;</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-loadfilelist\\\">zTool.loadFileList</h2>\\n<p>动态加载 .js、.css 的方法，支持多个文件同时加载，支持多个文件按顺序加载</p>\\n<p>如果是&quot;http&quot; | &quot;https&quot; 开头,但没有.js|.css 后缀的路径只支持加载 js</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {array} files //js、css路径的数组，\\n * @param {boolean} isSequence //是否按files数组的顺序加载，默认false\\n */\\n//例：\\nzTool\\n    .loadFileList([\\n        &quot;./static/introJs/introjs.min.css&quot;,\\n        &quot;./static/introJs/themes/introjs-flattener.css&quot;,\\n        &quot;./static/introJs/intro.min.js&quot;,\\n    ])\\n    .then(() =&gt; {\\n        //所有文件加载完的回调\\n    });</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-datatypetest\\\">zTool.dataTypeTest</h2>\\n<p>检测数据类型，返回对应数据类型的名称</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n\\nzTool.dataTypeTest(54); // number\\nzTool.dataTypeTest(&quot;you&quot;); // string\\nzTool.dataTypeTest({ name: &quot;bun&quot; }); // object\\nzTool.dataTypeTest([54, &quot;47&quot;]); // array\\nzTool.dataTypeTest(true); // boolean\\nzTool.dataTypeTest(new Date(&quot;2018-08-07&quot;)); // date\\nzTool.dataTypeTest(null); // null\\nzTool.dataTypeTest(undefined); // undefined\\nzTool.dataTypeTest(function() {}); // function\\nzTool.dataTypeTest(new Symbol()); // symbol\\nzTool.dataTypeTest(new Set()); // set\\nzTool.dataTypeTest(new Map()); // map</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-deepcopy\\\">zTool.deepCopy</h2>\\n<p>深度复制对象或数组</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n\\nconst newArray = zTool.deepCopy([{ name: &quot;1&quot;, children: [{ name: &quot;1-1&quot; }] }]);\\nconst newObj = zTool.deepCopy({ name: &quot;1&quot;, children: [{ name: &quot;1-1&quot; }] });</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-arrayfilterby\\\">zTool.arrayFilterBy</h2>\\n<p>根据条件过滤数组，只能过滤两种情况：一、数组里面全是对象，二、数组里面全是字符串或者其他类型的</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {array} array //原数组\\n * @param {} property //过滤条件\\n */\\n//用法一如：\\nvar arr = [{ name: &quot;水果&quot;, value: 1 }, { name: &quot;蔬菜&quot;, value: 2 }];\\nzTool.arrayFilterBy(arr, { value: 2 }); //得到[{name:&quot;蔬菜&quot;,value:2}]\\n//用法二如：\\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\\nzTool.arrayFilterBy(arr, 3); //得到 [3,3,3]\\n//用法三如：\\nvar arr = [{ name: &quot;水果&quot;, value: 1 }, { name: &quot;蔬菜&quot;, value: 2 }, { name: &quot;草莓&quot;, value: 4 }];\\nzTool.arrayFilterBy(arr, [{ value: 2 }, { value: 4 }]); //得到[{name:&quot;蔬菜&quot;,value:2},{name:&quot;草莓&quot;,value:4}]\\n//用法四如：\\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\\narrayFilterBy(arr, [3, 2]); //得到 [3,3,3,2,2]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-on\\\">zTool.on</h2>\\n<p>事件绑定，同 <code>element.addEventListener(event,handle,false)</code>;</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} event //事件名，如&quot;click&quot;\\n * @param {function} handler //事件回调\\n */\\n//例：\\nzTool.on(document.querySelector(&quot;#id&quot;), &quot;click&quot;, e =&gt; {\\n    //回调\\n});</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-off\\\">zTool.off</h2>\\n<p>移除事件，同 <code>element.removeEventListener(event,handle,false)</code>，参数同<code>zTool.on</code></p>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-once\\\">zTool.once</h2>\\n<p>绑定一次性事件，参数同<code>zTool.on</code></p>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-hasclass\\\">zTool.hasClass</h2>\\n<p>检测某个 DOM 元素是否存在某个样式类名,返回<code>boolean</code>值</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} clasName //样式类名\\n */\\n//例：\\nconst hasFLoat = zTool.hasClass(document.querySelector(&quot;#id&quot;), &quot;z-float&quot;);\\nconsole.log(hasFLoat);</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-addclass\\\">zTool.addClass</h2>\\n<p>给某个 DOM 元素添加样式类名</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} clasName //样式类名\\n */\\n//例：\\nzTool.addClass(document.querySelector(&quot;#id&quot;), &quot;z-float z-font-size-20&quot;);</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-removeclass\\\">zTool.removeClass</h2>\\n<p>给某个 DOM 元素移除样式类名</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} clasName //样式类名\\n */\\n//例：\\nzTool.removeClass(document.querySelector(&quot;#id&quot;), &quot;z-font-size-20&quot;);</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-getstyle\\\">zTool.getStyle</h2>\\n<p>获取某个元素的某个样式</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} styleName //样式名\\n */\\n//例：\\nconst height = zTool.getStyle(document.querySelector(&quot;#id&quot;), &quot;height&quot;); // 100px</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-setstyle\\\">zTool.setStyle</h2>\\n<p>给某个元素设置 style</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {HTMLElement} el //绑定事件的DOM\\n * @param {string} styleName //样式名\\n */\\n//例：\\nzTool.setStyle(document.querySelector(&quot;#id&quot;), &quot;height&quot;, &quot;500px&quot;);</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-itemsfromtree\\\">zTool.itemsFromTree</h2>\\n<p>在 json 数组中递归查找一项数据</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (要查找的数据，匹配keyObj的id属性),\\n *   item:可选参数，会传入action函数的参数\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;},\\n *      action:({ tree, currentItem, item, index, keyObj })=&gt;{}，//currentItem是查找到的那项数据\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//移除{id:9}的那一条数据\\nconst finished = zTool.itemsFromTree({\\n    tree: tree,\\n    sourceItem: { id: 9 },\\n    action: ({ tree, currentItem, item, index, keyObj }) =&gt; {\\n        //currentItem取得{id:9,name:&quot;豆芽&quot;}\\n    },\\n});\\n//finished 查找到就返回true</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-removeitemfromtree\\\">zTool.removeItemFromTree</h2>\\n<p>用于移除 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (要移除的数据，匹配keyObj的id属性),\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//移除{id:9}的那一条数据\\nconst newTree = zTool.removeItemFromTree({\\n    tree: tree,\\n    sourceItem: { id: 9 },\\n});\\n// 返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[]}]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-replaceitemfromtree\\\">zTool.replaceItemFromTree</h2>\\n<p>用于替换 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (要被替换的数据，匹配keyObj的id属性),\\n *   item: object (新数据)\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//替换{id:9}的那一条数据\\nconst newTree = zTool.replaceItemFromTree({\\n    tree: tree,\\n    sourceItem: { id: 9 },\\n    item: { id: 18, name: &quot;莴笋&quot; },\\n});\\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-pushitemtotree\\\">zTool.pushItemToTree</h2>\\n<p>在 json 数组中一项数据的 children 末端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\\n *   item: object (新数据)\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//在{id:5}的那一条数据新增\\nconst newTree = zTool.pushItemToTree({\\n    tree: tree,\\n    sourceItem: { id: 5 },\\n    item: { id: 18, name: &quot;莴笋&quot; },\\n});\\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;},{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-unshiftitemtotree\\\">zTool.unshiftItemToTree</h2>\\n<p>在 json 数组中一项数据的 children 头端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\\n *   item: object (新数据)\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//在{id:5}的那一条数据新增\\nconst newTree = zTool.unshiftItemToTree({\\n    tree: tree,\\n    sourceItem: { id: 5 },\\n    item: { id: 18, name: &quot;莴笋&quot; },\\n});\\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;},{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-insertbeforeitemfromtree\\\">zTool.insertBeforeItemFromTree</h2>\\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之前</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (匹配keyObj的id属性),\\n *   item: object (新数据)\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//在{id:5}的那一条数据之前插入\\nconst newTree = zTool.insertBeforeItemFromTree({\\n    tree: tree,\\n    sourceItem: { id: 5 },\\n    item: { id: 18, name: &quot;莴笋&quot; },\\n});\\n//返回 [{id:2,name:&quot;苹果&quot;},{id:18,name:&quot;莴笋&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"ztool-insertafteritemfromtree\\\">zTool.insertAfterItemFromTree</h2>\\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之后</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n *\\n * @param {object} obj 以对象方式传参：\\n * {\\n *   tree:array (json数组),\\n *   sourceItem:object (匹配keyObj的id属性),\\n *   item: object (新数据)\\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\\n * }\\n */\\n//例：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//在{id:5}的那一条数据之后插入\\nconst newTree = zTool.insertBeforeItemFromTree({\\n    tree: tree,\\n    sourceItem: { id: 5 },\\n    item: { id: 18, name: &quot;莴笋&quot; },\\n});\\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]},{id:18,name:&quot;莴笋&quot;}]</code></pre>\\n<h2 id=\\\"ztool-turnlabelorvalue\\\">zTool.turnLabelOrValue</h2>\\n<p>用 一个值 换取 列表数据 中 另外一个字段的值</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n * @description:\\n * @param tree {array}\\n * @param value {string|array|number}\\n * @param toDist {object}  默认 ： { src: &quot;value&quot;, dist: &quot;label&quot; }  意思》将value值取tree对应的 label\\n * @return: newValue\\n */\\n//从一级列表数据\\nconst list = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot; }, { id: 6, name: &quot;肉类&quot; }];\\n//id:2换取对应name\\nconst newValue = zTool.turnLabelOrValue(list, 2, { src: &quot;id&quot;, dist: &quot;name&quot; });\\n//返回 &quot;苹果&quot;\\n\\n//从tree(必须带有 children 属性)：\\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\\n//id:9换取对应name\\nconst newValue = zTool.turnLabelOrValue(tree, 9, { src: &quot;id&quot;, dist: &quot;name&quot; });\\n//返回 &quot;豆芽&quot;\\n\\n//从tree(必须带有 children 属性)：\\nconst tree = [\\n    {\\n        id: 1,\\n        name: &quot;省&quot;,\\n        children: [\\n            { id: 2, name: &quot;市1&quot;, children: [{ id: 4, name: &quot;区3&quot; }] },\\n            { id: 3, name: &quot;市2&quot;, children: [{ id: 5, name: &quot;区4&quot; }] },\\n        ],\\n    },\\n];\\n//级联id值（array） 换取 name\\nconst newValue = zTool.turnLabelOrValue(tree, [1, 3, 5], { src: &quot;id&quot;, dist: &quot;name&quot; });\\n//返回 [&quot;省&quot;,&quot;市2&quot;,&quot;区4&quot;]</code></pre>\\n<h2 id=\\\"ztool-turnmapkeys\\\">zTool.turnMapKeys</h2>\\n<p>递归转换 tree 里的字段名</p>\\n<pre><code class=\\\"language-js\\\">import { zTool } from &quot;zerod&quot;;\\n/**\\n * @description: 转换tree数据的键名\\n * @param tree {array}\\n * @param srcMapKeys {object} 默认 { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; },\\n * @param distMapKeys {object} 默认 { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; }\\n * @param extands {object} 默认 {}  可以在tree中加入定义的字段\\n * @param valueToString {boolean} 默认 false 是否把 value (有可能是数字) 转成 string 类型的\\n * @param includesSourceItem {boolean} 默认 false  除了label，value字段，是否保留tree中的其他字段\\n * @return: newTree\\n */\\n\\nconst tree = [\\n    {\\n        id: 1,\\n        name: &quot;省&quot;,\\n        children: [\\n            { id: 2, name: &quot;市1&quot;, children: [{ id: 4, name: &quot;区3&quot; }] },\\n            { id: 3, name: &quot;市2&quot;, children: [{ id: 5, name: &quot;区4&quot; }] },\\n        ],\\n    },\\n];\\n\\nconst newTree = zTool.turnMapKeys(\\n    tree,\\n    { label: &quot;name&quot;, value: &quot;id&quot;, children: &quot;children&quot; },\\n    { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; },\\n);\\n// [\\n//     {\\n//         value: 1,\\n//         label: &quot;省&quot;,\\n//         children: [\\n//             { value: 2, label: &quot;市1&quot;, children: [{ value: 4, label: &quot;区3&quot; }] },\\n//             { value: 3, label: &quot;市2&quot;, children: [{ value: 5, label: &quot;区4&quot; }] },\\n//         ],\\n//     },\\n// ]\\n\\n//加入自定义的字段\\nconst newTree = zTool.turnMapKeys(\\n    tree,\\n    { label: &quot;name&quot;, value: &quot;id&quot;, children: &quot;children&quot; },\\n    { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; },\\n    { active: false },\\n);\\n// [\\n//     {\\n//         value: 1,\\n//         label: &quot;省&quot;,\\n//         active: false,\\n//         children: [\\n//             { active: false, value: 2, label: &quot;市1&quot;, children: [{ active: false, value: 4, label: &quot;区3&quot; }] },\\n//             { active: false, value: 3, label: &quot;市2&quot;, children: [{ active: false, value: 5, label: &quot;区4&quot; }] },\\n//         ],\\n//     },\\n// ];\\n\\n//保留原字段\\nconst newTree = zTool.turnMapKeys(\\n    tree,\\n    { label: &quot;name&quot;, value: &quot;id&quot;, children: &quot;children&quot; },\\n    { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; },\\n    { active: false },\\n    false,\\n    true,\\n);\\n// [\\n//     {\\n//         id: 1,\\n//         value: 1,\\n//         name: &quot;省&quot;,\\n//         label: &quot;省&quot;,\\n//         active: false,\\n//         children: [\\n//             {\\n//                 active: false,\\n//                 value: 2,\\n//                 id: 2,\\n//                 label: &quot;市1&quot;,\\n//                 name: &quot;市1&quot;,\\n//                 children: [{ active: false, value: 4, id: 4, label: &quot;区3&quot;, name: &quot;区3&quot; }],\\n//             },\\n//             {\\n//                 active: false,\\n//                 value: 3,\\n//                 id: 3,\\n//                 label: &quot;市2&quot;,\\n//                 name: &quot;市2&quot;,\\n//                 children: [{ active: false, value: 5, id: 5, label: &quot;区4&quot;, name: &quot;区4&quot; }],\\n//             },\\n//         ],\\n//     },\\n// ];</code></pre>\\n\";","var map = {\n\t\"./AmdDocHOC/index.jsx\": \"pnNO\",\n\t\"./AshowDemoHOC/index.jsx\": \"+fre\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"jjl2\";","module.exports = (__webpack_require__(\"9w1k\"))(497);"],"sourceRoot":""}