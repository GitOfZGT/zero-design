/*{
    "version": "1.0.0",
    "platform": "darwin",
    "buildTime": "2021-10-18 18:05:50"
}*/
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"+LXM":function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n("v6s4")),l=r(n("zy2M")),a=r(n("oHWW")),d=r(n("fF7F")),i=a.default.AmdDocHOC,s=(a.default.AshowDemoHOC,i(l.default,{ZliveFormBaseDemo:function(){return o.default.createElement(d.default,null)}}));t.default=s},"/NT/":function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZcolorPicker=void 0,n("nTlR");var o=r(n("fwZX")),l=r(n("q8s6")),a=r(n("MAG/")),d=r(n("6iOh")),i=r(n("1rR9")),s=r(n("IPZl")),c=r(n("v6s4")),u=r(n("yLZQ")),f=r(n("XcRB")),m=n("i9C0"),p=n("7JPH");function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,s.default)(e);if(t){var o=(0,s.default)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,i.default)(this,n)}}n("DY0S");var g=function(e){(0,d.default)(n,e);var t=h(n);function n(){var e;(0,l.default)(this,n);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={showPicker:!1,color:"",size:"default"},e.backgroundColor="tranparent",e.position={},e.methods={initValue:function(){var t=e.props.value||e.props.defaultValue;if(t){var n="";if(t.includes("rgb")){var r=t.trim().replace(/[rgba\(\)]/g,"").replace(/[，]/g,",").split(",");if(!(3===r.length|4===r.length))throw Error("rgb值书写有误");n={r:Number(r[0]),g:Number(r[1]),b:Number(r[2]),a:r[3]?Number(r[3]):1}}else{if(!(t.includes("#")&&t.length>3))throw Error("颜色值只支持hex和rgb类型");n=t}e.backgroundColor=n,e.setState({color:n})}},colorChange:function(t,n){e.backgroundColor="rgba(".concat(t.rgb.r,", ").concat(t.rgb.g,", ").concat(t.rgb.b,",").concat(t.rgb.a,")"),e.setState({color:t.rgb}),e.props.onChange&&e.props.onChange("rgb"==e.props.valueType?e.backgroundColor:t[e.props.valueType],t)},setPosition:function(){var t=e.boxEl.getBoundingClientRect(),n=e.pickerEl.getBoundingClientRect(),r=t.top+t.height,o=t.left;r+n.height>document.documentElement.clientHeight&&(r=t.top-n.height),o+n.width>document.documentElement.clientWidth&&(o=t.left-n.width),e.position={top:r,left:o},e.coverEl.style.visibility="visible"},triggerPicker:function(t){if(!(e.props.disabled||t&&e.pickerEl.contains(t.target))){var n=!e.state.showPicker;n&&(e.coverEl.style.display="block",e.coverEl.style.visibility="hidden",e.methods.setPosition()),e.setState({showPicker:n})}},onAnimationEnd:function(){e.state.showPicker||(e.coverEl.style.display="none")},closePicker:function(t){t&&(e.pickerEl.contains(t.target)||e.boxEl.contains(t.target))||e.setState({showPicker:!1})},clearColor:function(t){t.stopPropagation(),e.backgroundColor="tranparent",e.setState({color:""}),e.props.onChange&&e.props.onChange(null)}},e}return(0,a.default)(n,[{key:"componentDidMount",value:function(){this.methods.initValue(),document.documentElement.addEventListener("click",this.methods.closePicker,!1)}},{key:"componentDidUpdate",value:function(e){this.props.value!==e.value&&this.methods.initValue()}},{key:"componentWillUnmount",value:function(){document.documentElement.removeEventListener("click",this.methods.closePicker,!1)}},{key:"render",value:function(){var e=this,t=this.props,n=t.className,r=t.disabled,l=t.style,a=t.size,d=t.allowClear;return c.default.createElement("span",{className:"z-color-box ".concat(a," ").concat(n||""," ").concat(r?"disabled":""," ").concat(this.state.color&&d?"allow-clear":""),ref:function(t){return e.boxEl=t},style:l,onClick:this.methods.triggerPicker},c.default.createElement("span",{className:"z-bg"}),c.default.createElement("span",{className:"z-color ".concat(this.state.color&&d?"allow-clear":""),style:this.state.color?{backgroundColor:this.backgroundColor}:null}),u.default.createPortal(c.default.createElement("div",{className:"z-cover",ref:function(t){return e.coverEl=t}},c.default.createElement(p.CSSTransition,{in:this.state.showPicker,timeout:500,classNames:"fadeIn-to-down"},c.default.createElement("div",{className:"z-picker",style:this.position,ref:function(t){return e.pickerEl=t},onAnimationEnd:this.methods.onAnimationEnd},c.default.createElement(m.SketchPicker,{color:this.state.color,onChange:this.methods.colorChange})))),document.body),this.state.color&&d?c.default.createElement(o.default,{type:"close-circle",theme:"filled",className:"z-color-clear-icon",onClick:this.methods.clearColor}):null)}}]),n}(c.default.PureComponent);t.ZcolorPicker=g,g.propTypes={value:f.default.string,defaultValue:f.default.string,onChange:f.default.func,className:f.default.string,size:f.default.string,valueType:f.default.string,disabled:f.default.bool,allowClear:f.default.bool},g.defaultProps={valueType:"hex",allowClear:!1};var v=g;t.default=v},"/Ykg":function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Zviewer=void 0;var o=r(n("q8s6")),l=r(n("MAG/")),a=r(n("6iOh")),d=r(n("1rR9")),i=r(n("IPZl")),s=r(n("v6s4")),c=r(n("kRUu")),u=r(n("XcRB")),f=r(n("ryJs"));n("hfS7"),n("axcb");var m=r(n("vApo")),p=n("V0j1"),h=n("7JPH"),g=r(n("nyVi"));function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,i.default)(e);if(t){var o=(0,i.default)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,d.default)(this,n)}}var b=function(e){(0,a.default)(n,e);var t=v(n);function n(){var e;(0,o.default)(this,n);for(var r=arguments.length,l=new Array(r),a=0;a<r;a++)l[a]=arguments[a];return(e=t.call.apply(t,[this].concat(l))).initViewer=(0,g.default)((function(){e.viewer?e.viewer.update():e.props.urls.length&&(e.viewer=new f.default(e.imgsEl,{transition:!1,url:function(e){return e.dataset.url},hide:e.props.onViewerHide,ready:function(){var t=e.viewer.viewer?e.viewer.viewer:null;if(t&&null===t.querySelector(".z-next")){var n=document.createElement("div"),r=document.createElement("div");n.className="z-next",r.className="z-prev",n.innerHTML='<i  class="zero-icon zerod-next"/>',r.innerHTML='<i  class="zero-icon zerod-prev"/>',t.appendChild(n),t.appendChild(r),n.addEventListener("click",(function(){e.viewer.next(!0)}),!1),r.addEventListener("click",(function(){e.viewer.prev(!0)}),!1)}}})),e.props.viewerUpdated&&e.props.viewerUpdated()}),60),e}return(0,l.default)(n,[{key:"componentDidMount",value:function(){this.initViewer()}},{key:"componentDidUpdate",value:function(e){e.urls===this.props.urls&&e.urls.length===this.props.urls.length||this.initViewer()}},{key:"componentWillUnmount",value:function(){this.viewer&&this.viewer.destroy()}},{key:"render",value:function(){var e=this,t=this.props.showThumbAlt;return s.default.createElement("ul",{ref:function(t){e.imgsEl=t},className:"z-viewer-ul ".concat(this.props.className)},s.default.createElement(h.TransitionGroup,{component:null,enter:!0,exit:!1,appear:!0},this.props.urls.map((function(n,r){var o="string"==typeof n?n:n.thumb?n.thumb:n.url,l="string"==typeof n?n:n.url,a="string"!=typeof n&&n.alt?n.alt:r+1;return s.default.createElement(h.CSSTransition,{key:r,timeout:p.animateTimout.flipInTime,classNames:"flipY",onEntered:e.initViewer,onExited:e.initViewer},s.default.createElement("li",{key:r},t?s.default.createElement("div",{className:"z-viewer-thumb"},s.default.createElement(m.default,{url:o,style:{height:"100%"}})):s.default.createElement(m.default,{url:o,style:{height:"100%"}}),t?s.default.createElement("div",{className:"z-viewer-alt"},a):null,s.default.createElement("img",{"data-url":l,alt:a})))}))))}}]),n}(c.default);t.Zviewer=b,b.propTypes={urls:u.default.oneOfType([u.default.arrayOf(u.default.string),u.default.arrayOf(u.default.object)]),className:u.default.string,showThumbAlt:u.default.bool},b.defaultProps={urls:[],className:"",showThumbAlt:!0};var y=b;t.default=y},duPH:function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZcodeHighlight=void 0;var o=r(n("q8s6")),l=r(n("MAG/")),a=r(n("6iOh")),d=r(n("1rR9")),i=r(n("IPZl")),s=r(n("v6s4")),c=r(n("kRUu")),u=r(n("XcRB")),f=r(n("XYcM"));function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,i.default)(e);if(t){var o=(0,i.default)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,d.default)(this,n)}}n("lYVS"),n("dDAE"),n("roMe"),n("YO7D"),n("77Mx"),n("vV76"),n("QgYW"),n("X7dv"),n("d8H9"),n("Vqov");var p=function(e){(0,a.default)(n,e);var t=m(n);function n(){return(0,o.default)(this,n),t.apply(this,arguments)}return(0,l.default)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.children,n=e.mode;if(t){if(t&&"html"===n){var r=t.replace(/\<pre/g,'<pre class="line-numbers"');this.boxEl.innerHTML=r}f.default.highlightAllUnder(this.boxEl)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.mode,o=null;if(n&&"html"!==r){var l=s.default.createElement("code",{className:"language-".concat(this.props.lang)},this.props.children);o="block"===this.props.mode?s.default.createElement("pre",{className:"line-numbers"},l):l}return s.default.createElement("div",{ref:function(t){return e.boxEl=t}},o)}}]),n}(c.default);t.ZcodeHighlight=p,p.propTypes={mode:u.default.string,lang:u.default.string,children:u.default.string},p.defaultProps={lang:"html",mode:"block"};var h=p;t.default=h},fF7F:function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n("55cP"));n("FWSn");var l=r(n("tOpa"));n("gV3c");var a=r(n("ogjV")),d=r(n("/NT/"));n("xgct");var i=r(n("6Wwa")),s=r(n("q8s6")),c=r(n("MAG/")),u=r(n("6iOh")),f=r(n("1rR9")),m=r(n("IPZl"));n("pnp8");var p=r(n("tHrf")),h=r(n("v6s4"));function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,m.default)(e);if(t){var o=(0,m.default)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,f.default)(this,n)}}function v(e){var t=e.value,n=e.onChange,r=(e.methods,e.changeFormItems);return h.default.createElement(p.default,{type:"primary",onClick:function(){r({key:"servicePort",show:!!t},!0),n(!t)}},t?"显示":"不显示","端口号")}var b=function(e){(0,u.default)(n,e);var t=g(n);function n(){var e;(0,s.default)(this,n);for(var r=arguments.length,o=new Array(r),l=0;l<r;l++)o[l]=arguments[l];return(e=t.call.apply(t,[this].concat(o))).items=[{key:"serviceCode",label:"服务编码",render:function(e){return new Promise((function(e){setTimeout((function(){e(h.default.createElement(i.default,{placeholder:"请输入服务编码"}))}),5e3)}))},options:function(){return{rules:[{required:!0,message:"不能为空。"}]}}},{key:"serviceName",label:"服务名称",render:function(e){return h.default.createElement(i.default,{placeholder:"请输入服务名称",allowClear:!0})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"colorValue",label:"颜色值",render:function(e){return h.default.createElement(d.default,{className:"z-margin-top-4",allowClear:!0})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"serviceRemark",label:"服务说明",span:{md:24},render:function(e){return h.default.createElement(i.default.TextArea,{rows:2,placeholder:"请输入服务说明"})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"servicePort",label:"端口号",labelWidth:"80px",render:function(e){return h.default.createElement(a.default,{min:11110,max:65535,step:10})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"myButton",label:!1,show:!0,render:function(){return function(e,t,n,r){return h.default.createElement(v,{methods:r,changeFormItems:t})}}},{key:"confProperty",label:"默认配置",span:24,render:function(e){return h.default.createElement(i.default.TextArea,{rows:15,placeholder:"请输入默认配置"})},options:{rules:[{required:!0,message:"不能为空。"}]}}],e.defaultValue={serviceCode:"9999",serviceRemark:"llll"},e}return(0,c.default)(n,[{key:"render",value:function(){return h.default.createElement("div",{className:"app-body",style:{padding:"20px"}},h.default.createElement("div",{className:"z-panel"},h.default.createElement("div",{className:"z-panel-body"},h.default.createElement(o.default,{labelLayout:"inline",values:this.defaultValue,items:this.items,onSubmit:function(e){return Promise.resolve().then((function(t){l.default.success("提交成功："+JSON.stringify(e))}))}}))))}}]),n}(h.default.PureComponent);t.default=b},oZFy:function(e,t,n){var r={"./AmdDocHOC/index.jsx":"xRbD","./AshowDemoHOC/index.jsx":"+GLa"};function o(e){var t=l(e);return n(t)}function l(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=l,e.exports=o,o.id="oZFy"},v5v4:function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.ZpageWraperHOC=l,t.default=void 0;var o=r(n("6sYb"));function l(){return o.default}var a=l;t.default=a},vApo:function(e,t,n){"use strict";var r=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZbgImage=void 0;var o=r(n("q8s6")),l=r(n("MAG/")),a=r(n("6iOh")),d=r(n("1rR9")),i=r(n("IPZl")),s=r(n("v6s4")),c=r(n("kRUu")),u=r(n("XcRB"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,i.default)(e);if(t){var o=(0,i.default)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,d.default)(this,n)}}n("dLwK");var m=function(e){(0,a.default)(n,e);var t=f(n);function n(){return(0,o.default)(this,n),t.apply(this,arguments)}return(0,l.default)(n,[{key:"render",value:function(){var e=this,t="z-bg-image-box z-flex-items-center ".concat(this.props.className?this.props.className:""," ").concat(this.props.url?"":"no-url");return s.default.createElement("div",{className:t,onClick:function(t){e.props.onClick&&e.props.onClick(t)},style:this.props.style},this.props.url?null:s.default.createElement("span",null,"无图片"),s.default.createElement("div",{className:"z-bg-image is-bg-".concat(this.props.position),style:{backgroundImage:"url(".concat(this.props.url,")")}}),this.props.children)}}]),n}(c.default);t.ZbgImage=m,m.propTypes={url:u.default.string,position:u.default.string,className:u.default.string,style:u.default.object,onClick:u.default.func},m.defaultProps={position:"center"};var p=m;t.default=p},zy2M:function(e,t){e.exports='\x3c!-- @routePath: /component-doc/Zform-doc --\x3e\n\n<h1 id="普通表单：zform">普通表单：Zform</h1>\n<p><code>Zform</code>将<code>antd</code>的<code>Form</code>、<code>Form.item</code>的结构转成数据结构直接渲染的方式，并且自带有一个<code>提交</code>表单的按钮</p>\n<div class="z-demo-box" data-render="ZliveFormBaseDemo" data-title=" ZliveForm" data-description=" ZliveForm基本使用的示例" data-defaultexpanded="false"></div>\n\n<pre><code class="language-jsx">/**\n * @renderMode: inline\n * @componentName: ZliveFormBaseDemo\n * @description: ZliveForm基本使用的示例\n * @title: ZliveForm\n */\nimport React from &#39;react&#39;;\nimport { Zform, ZcolorPicker } from &#39;zerod&#39;;\nimport { Input, message, InputNumber, Button } from &#39;antd&#39;;\n\nfunction AButton({ value, onChange, methods, changeFormItems }) {\n    return (\n        &lt;Button\n            type=&quot;primary&quot;\n            onClick={() =&gt; {\n                // const insideItems = methods.getInsideItems();\n                // const portItem = insideItems.find((item) =&gt; item.key === &#39;servicePort&#39;);\n                // changeFormItems(\n                //     {\n                //         key: &#39;servicePort&#39;,\n                //         show: !portItem.ref.current.itemShowStatus,\n                //     },\n                //     true,\n                // );\n                changeFormItems(\n                    {\n                        key: &#39;servicePort&#39;,\n                        show: !!value,\n                    },\n                    true,\n                );\n                onChange(!value);\n            }}&gt;\n            {value ? &#39;显示&#39; : &#39;不显示&#39;}\n            端口号\n        &lt;/Button&gt;\n    );\n}\n\nexport default class Myjavascript extends React.PureComponent {\n    items = [\n        {\n            key: &#39;serviceCode&#39;,\n            label: &#39;服务编码&#39;,\n            render: (form) =&gt; {\n                return new Promise((resolve) =&gt; {\n                    setTimeout(() =&gt; {\n                        resolve(&lt;Input placeholder=&quot;请输入服务编码&quot; /&gt;);\n                    }, 5000);\n                });\n            },\n            //antd的 form.getFieldDecorator的options\n            options: () =&gt; ({\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            }),\n        },\n        {\n            key: &#39;serviceName&#39;,\n            label: &#39;服务名称&#39;,\n            render: (form) =&gt; {\n                return &lt;Input placeholder=&quot;请输入服务名称&quot; allowClear /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &#39;colorValue&#39;,\n            label: &#39;颜色值&#39;,\n            render: (form) =&gt; {\n                return &lt;ZcolorPicker className=&quot;z-margin-top-4&quot; allowClear /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &#39;serviceRemark&#39;,\n            label: &#39;服务说明&#39;,\n            span: { md: 24 },\n            render: (form) =&gt; {\n                return &lt;Input.TextArea rows={2} placeholder=&quot;请输入服务说明&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &#39;servicePort&#39;,\n            label: &#39;端口号&#39;,\n            labelWidth: &#39;80px&#39;,\n            render: (form) =&gt; {\n                return &lt;InputNumber min={11110} max={65535} step={10} /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &#39;myButton&#39;,\n            label: false,\n            show: true,\n            render: () =&gt; {\n                return (form, changeFormItems, item, methods) =&gt; {\n                    return &lt;AButton methods={methods} changeFormItems={changeFormItems} /&gt;;\n                };\n            },\n        },\n        {\n            key: &#39;confProperty&#39;,\n            label: &#39;默认配置&#39;,\n            span: 24,\n            render: (form) =&gt; {\n                return &lt;Input.TextArea rows={15} placeholder=&quot;请输入默认配置&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &#39;不能为空。&#39;,\n                    },\n                ],\n            },\n        },\n    ];\n    defaultValue = {\n        serviceCode: &#39;9999&#39;,\n        serviceRemark: &#39;llll&#39;,\n    };\n    render() {\n        return (\n            &lt;div className=&quot;app-body&quot; style={{ padding: &#39;20px&#39; }}&gt;\n                &lt;div className=&quot;z-panel&quot;&gt;\n                    &lt;div className=&quot;z-panel-body&quot;&gt;\n                        &lt;Zform\n                            labelLayout=&quot;inline&quot;\n                            values={this.defaultValue}\n                            items={this.items}\n                            onSubmit={(values) =&gt; {\n                                // console.log(values);\n                                return Promise.resolve().then((re) =&gt; {\n                                    message.success(&#39;提交成功：&#39; + JSON.stringify(values));\n                                });\n                            }}\n                        /&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code></pre>\n<h2 id="zform-的-props">Zform 的 props</h2>\n<p>可追 <code>className</code>、<code>style</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>labelLayout</td>\n<td>label 的布局方式</td>\n<td>&#39;horizontal&#39;|&#39;vertical&#39;|&#39;inline&#39;</td>\n<td>&#39;vertical&#39;</td>\n</tr>\n<tr>\n<td>items</td>\n<td>生成表单的 json 数组，请看下面的 items 结构, (请使用变量缓存所需设置的值而非直接使用字面量)</td>\n<td>array</td>\n<td>--</td>\n</tr>\n<tr>\n<td>defaultSpan</td>\n<td>统一设置 items 栅栏占格，默认：{xxl:6,xl:8,lg:12,md:24}，但 items 中的 span 属性的优先级比这个高</td>\n<td>number | object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>onSubmit</td>\n<td>触发保存按钮会先验证表单是否通过,通过了当 confirm.show 为 ture 会打开确认提示框,确认后才调用 onSubmit,onSubmit 函数必须返回 Promise 对象才能关闭提示框，如果存在 otherForms,values 是一个数组，否则是一个对象</td>\n<td>function(values){return Promise.resolve()}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>momentFormat</td>\n<td>是否在触发 onSubmit 函数后里面传出的 values 中存在 moment 对象进行表单控件对应的 format 格式化，启用此属性，相关 moment 值的控件必需 format 属性</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td><i class="zero-icon zerod-shengchangzhouqi"></i> submitBtnName</td>\n<td>提交按钮的名称，如果为空则不显示默认的提交按钮</td>\n<td>string | furnction(){return ReactNode;}</td>\n<td>保存</td>\n</tr>\n<tr>\n<td><del>submitMsg</del></td>\n<td><del>提交表单时的确认提示框文本，如果为空，则不会打开提示框直接调用 onSubmit 函数</del>，submitMsg 已经被 confirm.content 替代，这里保留着向下兼容</td>\n<td>string</td>\n<td>点击确定按钮提交数据</td>\n</tr>\n<tr>\n<td><i class="zero-icon zerod-shengchangzhouqi"></i> submitBtnRender</td>\n<td>渲染提交按钮的函数，可以用自定义内容替换默认的提交按钮;参数有 onSubmit：内置的提交按钮的方法,其可传入参数 onSubmit(e,query)，props:Zform 组件的 props,可以取得 props.form</td>\n<td>funtion(onSubmit,props){return ReactNode;}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>values</td>\n<td>所有表单控件的值，如{serviceName:&quot;名称&quot;}，&quot;serviceName&quot;对应 items 属性里面的 key</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>getFormInstance</td>\n<td>获取 form 对象的钩子，外部通过(form)=&gt;{this.formIstance=form;}获得 form 对象,通过 this.formInstance.调用 antd <a href="https://ant.design/components/form-cn/">表单相关方法</a></td>\n<td>function(form,methods){}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>afterItemsRendered</td>\n<td>所有表单控件渲染完的回调，包括异步渲染控件</td>\n<td>function(form,methods){}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>otherForms</td>\n<td>有时存在多个 Zform 时，只想有一个保存按钮来触发提交，当触发保存时，会调用 otherForms 函数，otherForms 应该 return 一个其他 form 对象的数组，会加上当前的 form 一起验证表单是否通过，通过了才会调用 onSubmit</td>\n<td>function(){return [form1,form2]}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>confirm</td>\n<td>是一个对象，触发保存按钮后的确认提示框的配置，包含<a href="https://ant.design/components/modal-cn/">Antd 的 Modal 的属性（除了 onOk）</a>，还包含 show 属性(如果为 false 则不会出现确认提示框，直接调用 onSubmit 函数)</td>\n<td>object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>booleanToNumber</td>\n<td>表单验证通过后是否把 boolean 类型的值转成 0 或 1，通常处理 Switch 控件的值</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>controlSize</td>\n<td>表单控件大小</td>\n<td>default | large | small</td>\n<td>default</td>\n</tr>\n<tr>\n<td>excludeHideValue</td>\n<td>onSubmit 的 values 是否不包含隐藏控件的值</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>excludeHideValid</td>\n<td>触发 onSubmit 后是否不验证隐藏控件的值</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>hiddenItemFirstRendering</td>\n<td>默认隐藏的控件是否初始就渲染,并且算入 onSubmit 的提取值</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onlySetCurrentValues</td>\n<td>values 存在时 是否 只对当前 form 设置值，排除 otherForms 方法的其他 form</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id="items-结构">items 结构</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key</td>\n<td>表单控件 value 对应的字段名</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>label</td>\n<td>表单控件 label</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td>labelFocused</td>\n<td>当 labelLayout===&quot;inline&quot;时，label 是否始终处于聚集样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>labelWidth</td>\n<td>label 的宽度，如 labelWidth:&quot;120px&quot;，当 labelLayout==&#39;horizontal&#39;才有效</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td><i class="zero-icon zerod-shengchangzhouqi"></i> render</td>\n<td>渲染表单控件的钩子。支持异步加载：必须 return 的是 Promise 对象。例如使用了后台接口：(form,changeFormItems)=&gt;api.getOptions.then(re=&gt;{return 表单控件})。changeFormItems 是一个方法，主要用于局部改变 items，实现表单控件之间交互联动,使用方式请往下看</td>\n<td>(form,changeFormItems)=&gt;{return ReactNode | Promise}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>show</td>\n<td>默认显示</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>hiddenRendering</td>\n<td>隐藏时是否强制渲染,并且算入 onSubmit 的提取值,优先级大于 hiddenItemFirstRendering</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>span</td>\n<td>栅栏占格(antd 的栅栏组件分 24 栏)，例：{xxl:4,xl:6,lg:8}，默认取 this.props.defaultSpan</td>\n<td>number | object</td>\n<td>--</td>\n</tr>\n<tr>\n<td>isFormItem</td>\n<td>默认为 true、如果为 false 则 render 函数可以渲染非表单控件内容</td>\n<td>boolean</td>\n<td>--</td>\n</tr>\n<tr>\n<td>className</td>\n<td>可以给每项添加 className</td>\n<td>string</td>\n<td>--</td>\n</tr>\n<tr>\n<td><i class="zero-icon zerod-shengchangzhouqi"></i> options</td>\n<td><a href="https://ant.design/components/form-cn/">Antd 的表单中 getFieldDecorator 函数的 options 参数</a> ,可以配置验证规则</td>\n<td>object || ()=&gt;options</td>\n<td>--</td>\n</tr>\n</tbody></table>\n<h2 id="changeformitems">changeFormItems</h2>\n<p>changeFormItems 是一个方法，主要用于局部改变 items，实现表单控件之间交互联动。但不能直接在 render 函数中使用，应在控件的事件当中。changeFormItems 除了在 items 里的 render 参数中，还存在于 getFormInstance 函数的 methods 参数里。</p>\n<p>changeFormItems 需要两个参数：<code>newItems</code>：array | object 和 <code>part</code> : boolean</p>\n<p><code>newItems</code>的结构取决于 <code>part</code>参数</p>\n<p>如果<code>part</code>为 false (默认为 false),<code>newItems</code>同 Zform 的 items，会重新渲染全部 items，这是早期的做法，不建议使用</p>\n<pre><code class="language-jsx">//this.items就是Zform的items\nconst newItems = this.items.slice(0);\nnewItems.splice(4, 1); //不显示第五个\nchangeFormItems(this.items, false); //触发渲染</code></pre>\n<p>如果<code>part</code>为 true，就是局部改变，<code>newItems</code>可以为数组(多个 item 改变)，可以为对象(单个 item 改变),推荐使用方式如下</p>\n<pre><code class="language-jsx">//不显示key为servicePort的那个item，\nchangeFormItems(\n    {\n        key: &#39;servicePort&#39;, //对应Zform的items里的key\n        show: false, //是否显示\n    },\n    true,\n);\n//其他内容\nchangeFormItems(\n    [\n        {\n            key: &#39;servicePort&#39;, //对应Zform的items里的key\n            //改变key为servicePort的那个item的内容\n            newItem: {\n                control: &lt;Input /&gt;, //控件  ReactNode\n                span: { lg: 12 }, //栅栏占格 同zform 的items里的span\n                options: {}, //同zform 的items里的options\n                isFormItem: true, //control是否是表单控件\n                label: &#39;&#39;, //label\n            },\n        },\n    ],\n    true,\n);</code></pre>\n<h2 id="辅助">辅助</h2>\n<p>在<code>zerod/components/Zform/controls.js</code>提供了 <code>getControl(name,config)</code>和<code>getOptions(config)</code> 两个方法</p>\n<p>在如下的 items 结构中 render 和 options 内容可用<code>getControl</code>和<code>getOptions</code>获取：</p>\n<pre><code class="language-jsx">import { getControl, getOptions } from &#39;zerod/components/Zform/controls&#39;;\nconst items = [\n    {\n        key: &#39;numberPlate&#39;,\n        label: &#39;车牌号码&#39;,\n        render: (form) =&gt; {\n            return getControl(&#39;Input&#39;, { placeholder: &#39;请输入车牌号码&#39; });\n        },\n        options: getOptions({\n            required: true,\n            requiredMsg: &#39;请输入车牌号码！&#39;,\n            rules: [\n                {\n                    pattern: /^.{1,10}$/,\n                    message: &#39;车牌号码必须为长度1到10位的字符！&#39;,\n                },\n            ],\n            initialValue: &#39;&#39;,\n        }),\n    },\n    {\n        key: &#39;vehicleType&#39;,\n        label: &#39;车辆类别&#39;,\n        render: (form) =&gt; {\n            return getControl(&#39;Select&#39;, {\n                selectList: [\n                    { label: &#39;人货车&#39;, value: &#39;0&#39; },\n                    { label: &#39;的士头&#39;, value: &#39;1&#39; },\n                    { label: &#39;小汽车&#39;, value: &#39;2&#39; },\n                    { label: &#39;其他&#39;, value: &#39;3&#39; },\n                ],\n                placeholder: &#39;请选择车辆类别&#39;,\n            });\n        },\n        options: getOptions({ required: true, requiredMsg: &#39;请选择车辆类别&#39; }),\n    },\n];</code></pre>\n<h2 id="getcontrolnameconfig中">getControl(name,config)中</h2>\n<p>name 可选：<code>Input</code>、<code>Input.Group</code>、<code>TextArea</code>、<code>Switch</code>、<code>Select</code>、<code>Checkbox</code>、<code>InputNumber</code>、<code>DatePicker</code>、<code>Radio</code>、<code>Checkbox.Group</code>、<code>Radio.Group</code>、<code>TimePicker</code>、<code>Upload</code>、<code>TreeSelect</code>、<code>Mention</code>、\n<code>RangePicker</code>、<code>MonthPicker</code>、<code>Rate</code>、<code>AutoComplete</code>（在 antd-design 可找到对应的表单控件）、<code>TreeInput</code>(就是 ZtreeInput)、<code>Cascader</code>、<code>ColorPicker</code>(即 ZcolorPicker)、<code>TimeRange</code>(即 ZtimeRange) 、<code>YearPicker</code>(年份)</p>\n<p>当<code>Select</code>、<code>Checkbox.Group</code>、<code>Radio.Group</code>，需 config.selectList=[{label:&quot;label&quot;,value:&quot;value&quot;},]</p>\n<p>当<code>Select</code>，如果需选择项分组需 config.group=true，并且 config.selectList=[{label:&quot;组名&quot;,children:[{label:&quot;label&quot;,value:&quot;value&quot;}]},]</p>\n<pre><code class="language-js">getControl(&#39;Select&#39;, {\n    selectList: [{ label: &#39;label&#39;, value: &#39;value&#39; }], //当`Select`、`Checkbox.Group`、`Radio.Group`时的选项数据\n    //...antd-design 可找到对应的表单控件的更多属性\n});</code></pre>\n<h2 id="getoptionsconfig-中">getOptions(config) 中</h2>\n<pre><code class="language-js">getOptions({\n    required: true, //是否必填规则\n    requiredMsg: &#39;请选择车辆类别&#39;, //是否必填规则的错误提示\n    rules: [], //其他规则\n    initialValue: &#39;initialValue&#39;, //控件初始值\n    //...更多属性同items结构的options\n});</code></pre>\n'}}]);