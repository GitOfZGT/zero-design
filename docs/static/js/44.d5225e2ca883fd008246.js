(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[44],{

/***/ "3dgd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("uqIC");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _HOC_load_HOC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("ebhq");
/* harmony import */ var zerod_components_zTool_doc_md__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("KoJr");
/* harmony import */ var zerod_components_zTool_doc_md__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(zerod_components_zTool_doc_md__WEBPACK_IMPORTED_MODULE_2__);


var AmdDocHOC = _HOC_load_HOC_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].AmdDocHOC;

/* harmony default export */ __webpack_exports__["default"] = (AmdDocHOC(zerod_components_zTool_doc_md__WEBPACK_IMPORTED_MODULE_2___default.a));

/***/ }),

/***/ "KoJr":
/***/ (function(module, exports) {

module.exports = "<h1 id=\"-ztool\">工具库 zTool</h1>\n<p><code>zTool</code>积累了一些通用的工具方法，包括对需要对 DOM 元素操作的一些方法</p>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-httpajax\">zTool.httpAjax</h2>\n<p>对<code>axios</code>(优秀的 ajax 库)的二次封装，并统一了<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>、<code>patch</code>请求方式的传参方式</p>\n<p>zTool.httpAjax()返回一个 Promise 对象,当<code>noCallback === false</code>时,默认对响应结果的处理：</p>\n<p>只有 <code>result.data.code === 0</code> 时才会进入<code>then((re)=&gt;{})</code>回调，其他情况都会进入<code>catch((re)=&gt;{})</code>回调,并且<code>then((re)=&gt;{})</code>和<code>catch((re)=&gt;{})</code>回调中的参数<code>re</code>其实是<code>result.data</code>  </p>\n<p>当 <code>result.data.code === -1</code> || <code>result.data.code === 500</code> 会 使用 message.error 弹出 <code>result.data.msg</code> || <code>result.data.data</code> 提示</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {string} method //get || post || put    .....\n * @param {string} url //接口url\n * @param {object} query //接口参数，key，value 对应\n * @param {object} config //axios的config参数，更多请看https://github.com/axios/axios\n * @param {boolean} noCallback //默认false，因为httpAjax方法默认会有对特殊请求结果的统一处理，noCallback=true时，就是不需要默认的统一处理\n */\n//例：\nzTool\n    .httpAjax(&quot;get&quot;, &quot;/webapi/v1.0/config/center/deleteServiceInfo&quot;, { id: &quot;41&quot; })\n    .then((re) =&gt; {})\n    .then((re) =&gt; {})\n    .catch((re) =&gt; {})\n    .finally(() =&gt; {});\nzTool.httpAjax(&quot;post&quot;, &quot;/webapi/v1.0/config/center/updateConfigProperty&quot;, { id: &quot;41&quot;, name: &quot;我们的故事&quot; });</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-isurl\">zTool.isUrl</h2>\n<p>判断是否 url</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {string} url //\n */\nzTool.isUrl(&quot;https://github.com/axios/axios&quot;); // true</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-parsequerystring\">zTool.parseQueryString</h2>\n<p>获取 url 问号后面的参数，并转成对象</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {string} url //\n */\nzTool.parseQueryString(&quot;http://my.com/select?id=100&amp;selected=1&quot;); //{id:100,selected:1}\nzTool.parseQueryString(&quot;?id=100&amp;selected=1&quot;); //{id:100,selected:1}</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-filterquery\">zTool.filterQuery</h2>\n<p>只取一个对象中的某些属性</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {array}  //\n * @param {object}  //\n */\nzTool.filterQuery([&quot;name&quot;, &quot;selected&quot;], { name: &quot;萧雨&quot;, selected: false, id: &quot;85&quot;, woch: &quot;犹豫&quot; }); //得到新对象： {name:&quot;萧雨&quot;,selected:false}</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-buildscroll\">zTool.BuildScroll</h2>\n<p><code>zTool.BuildScroll</code> 是一个构造方法，是对<a href=\"http://iscrolljs.com/#intro\" target=\"_blank\">漂亮滚动条插件 ISroll</a>的 <code>new IScroll(el,opt)</code> 的二次封装,并且解决嵌套滚动条的问题，且对 options 有一些默认值</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //需要生成滚动条的盒子\n * @param {object} opttions //IScroll的配置，更多请看http://iscrolljs.com/#intro\n */\n//scroollInstance有三个属性:\n//scroollInstance.scroll：其实是new IScroll(el,opt)的实例，\n//scroollInstance.refresh:更新滚动条的方法，\n//scroollInstance.nextScrollToTop：布尔值,默认false，下次调用refresh()时是否滚动条回到顶部\nconst scroollInstance = new zTool.BuildScroll(el, opt);\n\n// 结合zTool.listenDivSizeChange达到自动更新滚动条的效果\nclass My extends ZpureComponent {\n    componentDidMount() {\n        this.scroollInstance = new zTool.BuildScroll(this.bodyEl, { scrollbars: &quot;custom&quot; });\n        zTool.listenDivSizeChange(this.bodyEl, this.scroollInstance.refresh);\n        zTool.listenDivSizeChange(this._contentEl, this.scroollInstance.refresh);\n    }\n    render() {\n        return (\n            &lt;section ref={(el) =&gt; (this.bodyEl = el)}&gt;\n                &lt;div ref={(el) =&gt; (this._contentEl = el)} style={{ position: &quot;relative&quot; }}&gt;\n                    &lt;div&gt;{this.props.children}&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/section&gt;\n        );\n    }\n}</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-listendivsizechange\">zTool.listenDivSizeChange</h2>\n<p>监听盒子（div）尺寸变化 ,只对 section，div 等块状元素有效，对 textarea 无效</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //需要生成滚动条的盒子\n * @param {function} callback //回调函数\n */\nzTool.listenDivSizeChange(document.querySelector(&quot;#id&quot;), ()=&gt;{\n    //盒子高度/宽度变化了\n}));</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-scrolldisablewheel\">zTool.scrollDisableWheel</h2>\n<p>用于解决外层使用了<code>zTool.BuildScroll</code>创建了滚动条，内部存在如：<code>textarea</code>出现滚动条时滚轮对<code>textarea</code>无效问题</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //textarea等\n */\nzTool.scrollDisableWheel(document.querySelector(&quot;#textarea&quot;));</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-gennonduplicateid\">zTool.GenNonDuplicateID</h2>\n<p>用于随机产生不重复 id</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {number} randomLength //时间戳之前的随机个数，默认8\n */\nzTool.GenNonDuplicateID(8);</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-eetostring\">zTool.EetoString</h2>\n<p>科学计数法转字符串,(数字位数过大，浏览器会以科学计数法方式显示，我们想要显示完整的数字就转成字符串来显示)</p>\n<pre><code class=\"language-jsx\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {number} num //数字\n */\nzTool.EetoString(6.5e8); //&quot;650000000&quot;\nzTool.EetoString(6.5e-7); //&quot;0.65000000&quot;</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-loadfilelist\">zTool.loadFileList</h2>\n<p>动态加载 .js、.css 的方法，支持多个文件同时加载，支持多个文件按顺序加载</p>\n<p>如果是&quot;http&quot; | &quot;https&quot; 开头,但没有.js|.css 后缀的路径只支持加载 js</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {array} files //js、css路径的数组，\n * @param {boolean} isSequence //是否按files数组的顺序加载，默认false\n */\n//例：\nzTool\n    .loadFileList([\n        &quot;./static/introJs/introjs.min.css&quot;,\n        &quot;./static/introJs/themes/introjs-flattener.css&quot;,\n        &quot;./static/introJs/intro.min.js&quot;,\n    ])\n    .then(() =&gt; {\n        //所有文件加载完的回调\n    });</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-datatypetest\">zTool.dataTypeTest</h2>\n<p>检测数据类型，返回对应数据类型的名称</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n\nzTool.dataTypeTest(54); // number\nzTool.dataTypeTest(&quot;you&quot;); // string\nzTool.dataTypeTest({ name: &quot;bun&quot; }); // object\nzTool.dataTypeTest([54, &quot;47&quot;]); // array\nzTool.dataTypeTest(true); // boolean\nzTool.dataTypeTest(new Date(&quot;2018-08-07&quot;)); // date\nzTool.dataTypeTest(null); // null\nzTool.dataTypeTest(undefined); // undefined\nzTool.dataTypeTest(function() {}); // function\nzTool.dataTypeTest(new Symbol()); // symbol\nzTool.dataTypeTest(new Set()); // set\nzTool.dataTypeTest(new Map()); // map</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-deepcopy\">zTool.deepCopy</h2>\n<p>深度复制对象或数组</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n\nconst newArray = zTool.deepCopy([{ name: &quot;1&quot;, children: [{ name: &quot;1-1&quot; }] }]);\nconst newObj = zTool.deepCopy({ name: &quot;1&quot;, children: [{ name: &quot;1-1&quot; }] });</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-arrayfilterby\">zTool.arrayFilterBy</h2>\n<p>根据条件过滤数组，只能过滤两种情况：一、数组里面全是对象，二、数组里面全是字符串或者其他类型的</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {array} array //原数组\n * @param {} property //过滤条件\n */\n//用法一如：\nvar arr = [{ name: &quot;水果&quot;, value: 1 }, { name: &quot;蔬菜&quot;, value: 2 }];\nzTool.arrayFilterBy(arr, { value: 2 }); //得到[{name:&quot;蔬菜&quot;,value:2}]\n//用法二如：\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\nzTool.arrayFilterBy(arr, 3); //得到 [3,3,3]\n//用法三如：\nvar arr = [{ name: &quot;水果&quot;, value: 1 }, { name: &quot;蔬菜&quot;, value: 2 }, { name: &quot;草莓&quot;, value: 4 }];\nzTool.arrayFilterBy(arr, [{ value: 2 }, { value: 4 }]); //得到[{name:&quot;蔬菜&quot;,value:2},{name:&quot;草莓&quot;,value:4}]\n//用法四如：\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\narrayFilterBy(arr, [3, 2]); //得到 [3,3,3,2,2]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-on\">zTool.on</h2>\n<p>事件绑定，同 <code>element.addEventListener(event,handle,false)</code>;</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} event //事件名，如&quot;click&quot;\n * @param {function} handler //事件回调\n */\n//例：\nzTool.on(document.querySelector(&quot;#id&quot;), &quot;click&quot;, (e) =&gt; {\n    //回调\n});</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-off\">zTool.off</h2>\n<p>移除事件，同 <code>element.removeEventListener(event,handle,false)</code>，参数同<code>zTool.on</code></p>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-once\">zTool.once</h2>\n<p>绑定一次性事件，参数同<code>zTool.on</code></p>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-hasclass\">zTool.hasClass</h2>\n<p>检测某个 DOM 元素是否存在某个样式类名,返回<code>boolean</code>值</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nconst hasFLoat = zTool.hasClass(document.querySelector(&quot;#id&quot;), &quot;z-float&quot;);\nconsole.log(hasFLoat);</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-addclass\">zTool.addClass</h2>\n<p>给某个 DOM 元素添加样式类名</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nzTool.addClass(document.querySelector(&quot;#id&quot;), &quot;z-float z-font-size-20&quot;);</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-removeclass\">zTool.removeClass</h2>\n<p>给某个 DOM 元素移除样式类名</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nzTool.removeClass(document.querySelector(&quot;#id&quot;), &quot;z-font-size-20&quot;);</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-getstyle\">zTool.getStyle</h2>\n<p>获取某个元素的某个样式</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} styleName //样式名\n */\n//例：\nconst height = zTool.getStyle(document.querySelector(&quot;#id&quot;), &quot;height&quot;); // 100px</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-setstyle\">zTool.setStyle</h2>\n<p>给某个元素设置 style</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} styleName //样式名\n */\n//例：\nzTool.setStyle(document.querySelector(&quot;#id&quot;), &quot;height&quot;, &quot;500px&quot;);</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-itemsfromtree\">zTool.itemsFromTree</h2>\n<p>在 json 数组中递归查找一项数据</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要查找的数据，匹配keyObj的id属性),\n *   item:可选参数，会传入action函数的参数\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;},\n *      action:({ tree, currentItem, item, index, keyObj })=&gt;{}，//currentItem是查找到的那项数据\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//移除{id:9}的那一条数据\nconst finished = zTool.itemsFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n    action: ({ tree, currentItem, item, index, keyObj }) =&gt; {\n        //currentItem取得{id:9,name:&quot;豆芽&quot;}\n    },\n});\n//finished 查找到就返回true</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-removeitemfromtree\">zTool.removeItemFromTree</h2>\n<p>用于移除 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要移除的数据，匹配keyObj的id属性),\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//移除{id:9}的那一条数据\nconst newTree = zTool.removeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n});\n// 返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[]}]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-replaceitemfromtree\">zTool.replaceItemFromTree</h2>\n<p>用于替换 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被替换的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//替换{id:9}的那一条数据\nconst newTree = zTool.replaceItemFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n    item: { id: 18, name: &quot;莴笋&quot; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-pushitemtotree\">zTool.pushItemToTree</h2>\n<p>在 json 数组中一项数据的 children 末端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//在{id:5}的那一条数据新增\nconst newTree = zTool.pushItemToTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &quot;莴笋&quot; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;},{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-unshiftitemtotree\">zTool.unshiftItemToTree</h2>\n<p>在 json 数组中一项数据的 children 头端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//在{id:5}的那一条数据新增\nconst newTree = zTool.unshiftItemToTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &quot;莴笋&quot; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;},{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-insertbeforeitemfromtree\">zTool.insertBeforeItemFromTree</h2>\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之前</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//在{id:5}的那一条数据之前插入\nconst newTree = zTool.insertBeforeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &quot;莴笋&quot; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:18,name:&quot;莴笋&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\n<div class=\"z-doc-titles\"></div>\n\n<h2 id=\"ztool-insertafteritemfromtree\">zTool.insertAfterItemFromTree</h2>\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之后</p>\n<pre><code class=\"language-js\">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [{ id: 2, name: &quot;苹果&quot; }, { id: 5, name: &quot;蔬菜&quot;, children: [{ id: 9, name: &quot;豆芽&quot; }] }];\n//在{id:5}的那一条数据之后插入\nconst newTree = zTool.insertBeforeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &quot;莴笋&quot; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]},{id:18,name:&quot;莴笋&quot;}]</code></pre>\n";

/***/ }),

/***/ "SX+g":
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__("sG4F"))(498);

/***/ }),

/***/ "jjl2":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./AmdDocHOC/index.jsx": "pnNO",
	"./AshowDemoHOC/index.jsx": "+fre"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "jjl2";

/***/ })

}]);
//# sourceMappingURL=44.d5225e2ca883fd008246.js.map