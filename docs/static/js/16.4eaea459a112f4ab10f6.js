(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"+fre":function(t,e,n){"use strict";n.r(e);n("89bW");var r=n("XXxv"),o=n("Ds8w"),a=n.n(o),d=n("6ato"),s=n.n(d),i=n("2dj7"),u=n.n(i),l=n("Xtzg"),c=n.n(l),m=n("0dFU"),p=n.n(m),f=n("ZS5U"),h=n.n(f);e.default={name:"AshowDemoHOC",HOC:function(t,e){return function(n){function o(){return s()(this,o),c()(this,(o.__proto__||a()(o)).apply(this,arguments))}return p()(o,n),u()(o,[{key:"componentDidMount",value:function(){var n=this.boxEl.querySelector(".z-open-modal-btn");n._scroll=e,n._render=function(){return t}}},{key:"render",value:function(){var t=this;return h.a.createElement("div",{ref:function(e){t.boxEl=e}},h.a.createElement(r.a,{type:"primary",className:"z-open-modal-btn"},"查看Demo"))}}]),o}(h.a.Component)}}},BOae:function(t,e){t.exports='<h1 id="-zform">普通表单：Zform</h1>\n<p><code>Zform</code>将<code>antd</code>的<code>Form</code>、<code>Form.item</code>的结构转成数据结构直接渲染的方式，并且自带有一个<code>提交</code>表单的按钮</p>\n<p>1、基本使用</p>\n<div class="z-demo-box" data-render="demo1" data-title="基本使用"></div>\n\n<pre><code class="language-jsx">import React from &quot;react&quot;;\nimport { Zform } from &quot;zerod&quot;;\nimport { Input, message } from &quot;antd&quot;;\nclass Myjavascript extends React.Component {\n    items = [\n        {\n            key: &quot;serviceCode&quot;,\n            label: &quot;服务编码&quot;,\n            render: (form) =&gt; {\n                //异步加载表单控件\n                return new Promise((resolve) =&gt; {\n                    setTimeout(() =&gt; {\n                        resolve(&lt;Input placeholder=&quot;请输入服务编码&quot; /&gt;);\n                    }, 5000);\n                });\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;serviceName&quot;,\n            label: &quot;服务名称&quot;,\n            render: (form) =&gt; {\n                return &lt;Input placeholder=&quot;请输入服务名称&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;serviceRemark&quot;,\n            label: &quot;服务说明&quot;,\n            render: (form) =&gt; {\n                return &lt;Input.TextArea rows={2} placeholder=&quot;请输入服务说明&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;servicePort&quot;,\n            detailKey: &quot;serviceProt&quot;,\n            label: &quot;端口号&quot;,\n            render: (form) =&gt; {\n                return &lt;InputNumber min={11110} max={65535} step={10} /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;confProperty&quot;,\n            label: &quot;默认配置&quot;,\n            render: (form) =&gt; {\n                return &lt;Input.TextArea rows={15} placeholder=&quot;请输入默认配置&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n    ];\n    render() {\n        return (\n            &lt;Zform\n                items={this.items}\n                onSubmit={(values) =&gt; {\n                    return Promise.resolve().then((re) =&gt; {\n                        message.success(&quot;提交成功：&quot; + JSON.stringify(values));\n                    });\n                }}\n            /&gt;\n        );\n    }\n}</code></pre>\n<h2 id="zform-props">Zform 的 props</h2>\n<p>可追 <code>className</code>、<code>style</code></p>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>items</td>\n            <td>生成表单的json数组，请看下面的items结构</td>\n            <td>array</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>defaultSpan</td>\n            <td>统一设置items栅栏占格，默认：{xxl:6,xl:8,lg:12,md:24}，但items中的span属性的优先级比这个高</td>\n            <td>number | object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>onSubmit</td>\n            <td>表单提交事件,(values)=>{return Promise.resolve()},当submitMsg不为空时,onSubmit函数必须返回Promise对象才能关闭提示框</td>\n            <td>function</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>submitBtnName</td>\n            <td>提交按钮的名称，如果为空则不显示默认的提交按钮</td>\n            <td>string | furnction(){\n                return ReactNode | Element;\n            }</td>\n            <td>保存</td>\n        </tr>\n        <tr>\n            <td>submitMsg</td>\n            <td>提交表单时的确认提示框文本，如果为空，则不会触发提示</td>\n            <td>string</td>\n            <td>点击确定按钮提交数据</td>\n        </tr>\n        <tr>\n            <td>submitBtnRender</td>\n            <td>渲染提交按钮的函数，可以用自定义内容替换默认的提交按钮;参数有onSubmit：内置的提交按钮的方法，props:Zform组件的props,可以取得props.form</td>\n            <td>funtion(onSubmit,props){return ReactNode | Element;}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>formDefaultValues</td>\n            <td>返显表单的数据，如{serviceName:"名称"}，"serviceName"对应items属性里面的key</td>\n            <td>object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>getFormInstance</td>\n            <td>获取Form实例的钩子，外部通过(form)=>{this.formIstance=form;}获得form实例对象,通过this.formInstance.调用antd<a href="https://ant.design/components/form-cn/" target="_blank">表单相关方法</a></td>\n            <td>function</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id="items-">items 结构</h2>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>key</td>\n            <td>表单控件value对应的字段名</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>label</td>\n            <td>表单控件label</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>render</td>\n            <td>渲染表单控件的钩子。支持异步加载：必须return的是Promise对象。例如使用了后台接口：(form)=>api.getOptions.then(re=>{return 表单控件})</td>\n            <td>(form)=>{return ReactNode | Element | Promise}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>span</td>\n            <td>栅栏占格(antd的栅栏组件分24栏)，例：{xxl:4,xl:6,lg:8}，默认取this.props.defaultSpan</td>\n            <td>number | object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>isFormItem</td>\n            <td>默认为true、如果为false则render函数可以渲染非表单控件内容</td>\n            <td>boolean</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>className</td>\n            <td>可以给每项添加className</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>options</td>\n            <td><a href="https://ant.design/components/form-cn/" target="_blank">Antd的表单中getFieldDecorator函数的options参数</a>,可以配置验证规则}</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n'},d21d:function(t,e,n){"use strict";n.r(e);var r=n("omC7"),o=n.n(r),a=(n("ujeF"),n("RX4L")),d=(n("uIkl"),n("Zcwe")),s=(n("xpJR"),n("DmjY")),i=n("Asgo"),u=n.n(i),l=n("Ds8w"),c=n.n(l),m=n("6ato"),p=n.n(m),f=n("2dj7"),h=n.n(f),g=n("Xtzg"),v=n.n(g),b=n("0dFU"),q=n.n(b),y=n("ZS5U"),E=n.n(y),w=n("tmCC"),k=n("ebhq"),x=n("BOae"),C=n.n(x),N=k.a.AmdDocHOC;e.default=N(C.a,{demo1:function(){var t=function(t){function e(){var t,n,r,o;p()(this,e);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=v()(this,(t=e.__proto__||c()(e)).call.apply(t,[this].concat(i))),r.items=[{key:"serviceCode",label:"服务编码",render:function(t){return new u.a(function(t){setTimeout(function(){t(E.a.createElement(s.a,{placeholder:"请输入服务编码"}))},5e3)})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"serviceName",label:"服务名称",render:function(t){return E.a.createElement(s.a,{placeholder:"请输入服务名称"})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"colorValue",label:"颜色值",render:function(t){return E.a.createElement(w.e,{className:"z-margin-top-4"})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"serviceRemark",label:"服务说明",render:function(t){return E.a.createElement(s.a.TextArea,{rows:2,placeholder:"请输入服务说明"})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"servicePort",detailKey:"serviceProt",label:"端口号",render:function(t){return E.a.createElement(d.a,{min:11110,max:65535,step:10})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"confProperty",label:"默认配置",render:function(t){return E.a.createElement(s.a.TextArea,{rows:15,placeholder:"请输入默认配置"})},options:{rules:[{required:!0,message:"不能为空。"}]}}],r.defaultValue={serviceCode:"9999",serviceRemark:"llll"},o=n,v()(r,o)}return q()(e,t),h()(e,[{key:"render",value:function(){return E.a.createElement(w.j,{formDefaultValues:this.defaultValue,items:this.items,onSubmit:function(t){return u.a.resolve().then(function(e){a.a.success("提交成功："+o()(t))})}})}}]),e}(E.a.Component);return E.a.createElement(t,null)}})},ebhq:function(t,e,n){"use strict";var r=n("Q2cO"),o=n.n(r),a=n("jjl2"),d={},s=[];a.keys().forEach(function(t){var e=void 0;try{e=a(t).default}catch(e){throw Error(t+":"+e)}if(void 0===e||"object"!==(void 0===e?"undefined":o()(e)))throw Error(t+":内没有 export default 或者export default格式有误 ");if("function"!=typeof e.HOC)throw Error(t+":HOC有误");var n=e.name;if("string"!=typeof n)throw Error(t+":缺少name属性");if(!/^A[A-z0-9]*HOC$/.test(n))throw Error(t+":name属性请以A开头HOC结尾");if(n=n.trim(),s.includes(n))throw Error(t+":"+n+"此HOC名称已被使用");s.push(n),d[n]=e.HOC}),e.a=d},jjl2:function(t,e,n){var r={"./AmdDocHOC/index.jsx":"pnNO","./AshowDemoHOC/index.jsx":"+fre"};function o(t){var e=a(t);return n(e)}function a(t){var e=r[t];if(!(e+1)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return e}o.keys=function(){return Object.keys(r)},o.resolve=a,t.exports=o,o.id="jjl2"},pnNO:function(t,e,n){"use strict";n.r(e);var r=n("Ds8w"),o=n.n(r),a=n("6ato"),d=n.n(a),s=n("2dj7"),i=n.n(s),u=n("Xtzg"),l=n.n(u),c=n("0dFU"),m=n.n(c),p=n("ZS5U"),f=n.n(p),h=n("FY2y"),g=n.n(h),v=(n("T9cD"),n("tmCC")),b=n("tW/l"),q=n.n(b);var y=Object(v.r)();e.default={name:"AmdDocHOC",HOC:function(t,e){var n=function(n){function r(){var t,e,n,a;d()(this,r);for(var s=arguments.length,i=Array(s),u=0;u<s;u++)i[u]=arguments[u];return e=n=l()(this,(t=r.__proto__||o()(r)).call.apply(t,[this].concat(i))),n.renderEls=[],a=e,l()(n,a)}return m()(r,n),i()(r,[{key:"componentWillUnmount",value:function(){this.renderEls.forEach(function(t){g.a.unmountComponentAtNode(t)})}},{key:"componentDidMount",value:function(){var t=this,n=this.mdEl.querySelectorAll(".z-demo-box");Array.prototype.slice.call(n).forEach(function(n){var r=function(t){var e={};if(t.dataset)return t.dataset;for(var n=0;n<t.attributes.length;n++){var r=t.attributes[n].nodeName;if(/^data-\w+$/.test(r)){var o=t.attributes[n].nodeValue;e[r.match(/^data-(\w+)/)[1]]=o}}return e}(n);if(e&&"function"==typeof e[r.render]){var o=n.nextElementSibling;o=o&&"pre"==o.localName?o:null;var a=e[r.render]();t.renderEls.push(n),g.a.render(a,n,function(){var t=document.createElement("div");t.className="z-demo-footer";var e=document.createElement("div");e.className="z-demo-code-btn z-flex-space-between";var a=document.createElement("div");a.className="z-demo-code";var d=document.createElement("img");d.addEventListener("click",function(){d.src=d.open?"https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg":"https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg",a.style.height=d.open?"0px":"auto",d.open=!d.open},!1),d.src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg";var s=document.createElement("span");s.innerText=r.title?r.title:"",e.appendChild(s),o&&e.appendChild(d),t.appendChild(e),o&&a.appendChild(o),t.appendChild(a),n.appendChild(t)})}}),this.mdEl.addEventListener("click",function(e){"string"==typeof e.target.className&&e.target.className.includes("z-open-modal-btn")&&setTimeout(function(){"function"==typeof e.target._render&&t.props.showRightModal({show:!0,modal:e.target._modal?e.target._modal:"mainModal",content:e.target._render(),scroll:e.target._scroll,onTransitionend:function(t){}})},10)},!1),this.mdEl.addEventListener("click",function(e){"string"==typeof e.target.className&&e.target.className.includes("z-show-loading-btn")&&setTimeout(function(){if("mainRoute"==e.target._modal)t.props.showRouteLoading(!0),setTimeout(function(){t.props.showRouteLoading(!1)},2e3);else{var n=e.target._modal?e.target._modal:"mainModal";t.props.showRightModal(!0,n,null,!0),t.props.showModalLoading(!0,n),setTimeout(function(){t.props.showModalLoading(!1,n)},2e3)}},10)})}},{key:"render",value:function(){var e=this;return f.a.createElement(y,{pageHeader:{show:!1},hasBodyPadding:!1},f.a.createElement("div",{className:"z-panel "+q.a["z-md-doc"],ref:function(t){return e.mdEl=t}},f.a.createElement("div",{className:"z-panel-body"},f.a.createElement(v.d,{mode:"html"},t))))}}]),r}(f.a.Component);return v.i.setConsumer(n)}}}}]);