{"version":3,"sources":["webpack:///delegated ./node_modules/lodash/_SetCache.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/react-transition-group/index.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///./node_modules/zerod/components/Zform/doc.md","webpack:///delegated ./node_modules/react-color/lib/index.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///./src/views/Main/component-doc/Zform-doc/index.jsx","webpack:///./src/HOC sync index.jsx$","webpack:///delegated ./node_modules/lodash/_setToArray.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/lodash/toNumber.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/lodash/_baseIteratee.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/lodash/_cacheHas.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/viewerjs/dist/viewer.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368","webpack:///delegated ./node_modules/lodash/_Set.js from dll-reference _dll_vendor_3d2c9e3bcfbe3a2fd368"],"names":["AmdDocHOC","HOC","hasHide","formItems","key","label","labelFocused","render","form","selectList","value","saveFieldOptions","options","initialValue","rules","required","message","Promise","resolve","setTimeout","span","md","labelWidth","changeFormItems","show","getDemo","labelLayout","items","defaultValue","serviceCode","serviceRemark","values","console","log","then","re","success","JSON","stringify","React","PureComponent","doc","demo1","Myjavascript","demo2","demo3"],"mappings":"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","file":"static/js/9.c95bcee45dc2ce9ff9d3.js","sourcesContent":["module.exports = (__webpack_require__(\"9w1k\"))(359);","module.exports = (__webpack_require__(\"9w1k\"))(489);","module.exports = \"<!--\\n * @Author: zgt\\n * @Date: 2018-08-21 10:59:31\\n * @LastEditors: zgt\\n * @LastEditTime: 2019-10-11 17:36:23\\n * @Description: file content\\n -->\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h1 id=\\\"-zform\\\">普通表单：Zform</h1>\\n<p><code>Zform</code>将<code>antd</code>的<code>Form</code>、<code>Form.item</code>的结构转成数据结构直接渲染的方式，并且自带有一个<code>提交</code>表单的按钮</p>\\n<p>继承了 React.PureComponent</p>\\n<p>1、labelLayout==&#39;inline&#39;</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo1\\\" data-title=\\\"inline\\\"></div>\\n\\n<pre><code class=\\\"language-jsx\\\">import React from &quot;react&quot;;\\nimport ZpureComponent from &quot;zerod/components/ZpureComponent&quot;;\\nimport { Zform } from &quot;zerod&quot;;\\nimport { Input, message } from &quot;antd&quot;;\\nclass Myjavascript extends React.PureComponent {\\n    items = [\\n        {\\n            key: &quot;serviceCode&quot;,\\n            label: &quot;服务编码&quot;,\\n            render: form =&gt; {\\n                return new Promise(resolve =&gt; {\\n                    setTimeout(() =&gt; {\\n                        resolve(&lt;Input placeholder=&quot;请输入服务编码&quot; /&gt;);\\n                    }, 5000);\\n                });\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: () =&gt; ({\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            }),\\n        },\\n        {\\n            key: &quot;serviceName&quot;,\\n            label: &quot;服务名称&quot;,\\n            render: form =&gt; {\\n                return &lt;Input placeholder=&quot;请输入服务名称&quot; /&gt;;\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: {\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            },\\n        },\\n        {\\n            key: &quot;colorValue&quot;,\\n            label: &quot;颜色值&quot;,\\n            render: form =&gt; {\\n                return &lt;ZcolorPicker className=&quot;z-margin-top-4&quot; /&gt;;\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: {\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            },\\n        },\\n        {\\n            key: &quot;serviceRemark&quot;,\\n            label: &quot;服务说明&quot;,\\n            span: { md: 24 },\\n            render: form =&gt; {\\n                return &lt;Input.TextArea rows={2} placeholder=&quot;请输入服务说明&quot; /&gt;;\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: {\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            },\\n        },\\n        {\\n            key: &quot;servicePort&quot;,\\n            label: &quot;端口号&quot;,\\n            labelWidth: &quot;80px&quot;,\\n            render: form =&gt; {\\n                return &lt;InputNumber min={11110} max={65535} step={10} /&gt;;\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: {\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            },\\n        },\\n        {\\n            key: &quot;myButton&quot;,\\n            label: &quot;按钮&quot;,\\n            render: (form, changeFormItems) =&gt; {\\n                return (\\n                    &lt;Button\\n                        type=&quot;primary&quot;\\n                        onClick={() =&gt; {\\n                            const newItems = this.items.slice(0);\\n                            newItems.splice(4, 1);\\n                            changeFormItems(hasHide ? this.items : newItems);\\n                            hasHide = !hasHide;\\n                        }}\\n                    &gt;\\n                        {hasHide ? &quot;显示&quot; : &quot;不显示&quot;}端口号\\n                    &lt;/Button&gt;\\n                );\\n            },\\n        },\\n        {\\n            key: &quot;confProperty&quot;,\\n            label: &quot;默认配置&quot;,\\n            span: 24,\\n            render: form =&gt; {\\n                return &lt;Input.TextArea rows={15} placeholder=&quot;请输入默认配置&quot; /&gt;;\\n            },\\n            //antd的 form.getFieldDecorator的options\\n            options: {\\n                //验证规则\\n                rules: [\\n                    {\\n                        required: true,\\n                        message: &quot;不能为空。&quot;,\\n                    },\\n                ],\\n            },\\n        },\\n    ];\\n    defaultValue = {\\n        serviceCode: &quot;9999&quot;,\\n        serviceRemark: &quot;llll&quot;,\\n    };\\n    render() {\\n        return (\\n            &lt;Zform\\n                labelLayout=&quot;horizontal&quot;\\n                values={this.defaultValue}\\n                items={this.items}\\n                onSubmit={values =&gt; {\\n                    // console.log(values);\\n                    return Promise.resolve().then(re =&gt; {\\n                        message.success(&quot;提交成功：&quot; + JSON.stringify(values));\\n                    });\\n                }}\\n            /&gt;\\n        );\\n    }\\n}</code></pre>\\n<p>2、labelLayout==&quot;vertical&quot;</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo2\\\" data-title=\\\"vertical\\\"></div>\\n\\n<p>2、labelLayout==&quot;horizontal&quot;</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo3\\\" data-title=\\\"horizontal\\\"></div>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"zform-props\\\">Zform 的 props</h2>\\n<p>可追 <code>className</code>、<code>style</code></p>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>参数</th>\\n            <th>说明</th>\\n            <th>类型</th>\\n            <th>默认值</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n         <tr>\\n            <td>labelLayout</td>\\n            <td>label的布局方式</a></td>\\n            <td>'horizontal'|'vertical'|'inline'</td>\\n            <td>'vertical'</td>\\n        </tr>\\n        <tr>\\n            <td>items</td>\\n            <td>生成表单的json数组，请看下面的items结构, (请使用变量缓存所需设置的值而非直接使用字面量)</td>\\n            <td>array</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>defaultSpan</td>\\n            <td>统一设置items栅栏占格，默认：{xxl:6,xl:8,lg:12,md:24}，但items中的span属性的优先级比这个高</td>\\n            <td>number | object</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>onSubmit</td>\\n            <td>触发保存按钮会先验证表单是否通过,通过了当confirm.show为ture会打开确认提示框,确认后才调用onSubmit,onSubmit函数必须返回Promise对象才能关闭提示框，如果存在otherForms,values是一个数组，否则是一个对象</td>\\n            <td>function(values){return Promise.resolve()}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>momentFormat</td>\\n            <td>是否在触发onSubmit函数后里面传出的values中存在moment对象进行表单控件对应的format格式化，启用此属性，相关moment值的控件必需format属性</td>\\n            <td>boolean</td>\\n            <td>false</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> submitBtnName</td>\\n            <td>提交按钮的名称，如果为空则不显示默认的提交按钮</td>\\n            <td>string | furnction(){\\n                return ReactNode;\\n            }</td>\\n            <td>保存</td>\\n        </tr>\\n        <tr>\\n            <td><del>submitMsg</del></td>\\n            <td><del>提交表单时的确认提示框文本，如果为空，则不会打开提示框直接调用onSubmit函数</del>，submitMsg已经被 confirm.content替代，这里保留着向下兼容</td>\\n            <td>string</td>\\n            <td>点击确定按钮提交数据</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> submitBtnRender</td>\\n            <td>渲染提交按钮的函数，可以用自定义内容替换默认的提交按钮;参数有onSubmit：内置的提交按钮的方法,其可传入参数onSubmit(e,query)，props:Zform组件的props,可以取得props.form</td>\\n            <td>funtion(onSubmit,props){return ReactNode;}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>values</td>\\n            <td>所有表单控件的值，如{serviceName:\\\"名称\\\"}，\\\"serviceName\\\"对应items属性里面的key</td>\\n            <td>object</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>getFormInstance</td>\\n            <td>获取form对象的钩子，外部通过(form)=>{this.formIstance=form;}获得form对象,通过this.formInstance.调用antd<a href=\\\"https://ant.design/components/form-cn/\\\" target=\\\"_blank\\\">表单相关方法</a></td>\\n            <td>function(form,methods){}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>afterItemsRendered</td>\\n            <td>所有表单控件渲染完的回调，包括异步渲染控件</a></td>\\n            <td>function(form,methods){}</td>\\n            <td>--</td>\\n        </tr>\\n         <tr>\\n            <td>otherForms</td>\\n            <td>有时存在多个Zform时，只想有一个保存按钮来触发提交，当触发保存时，会调用otherForms函数，otherForms应该return一个其他form对象的数组，会加上当前的form一起验证表单是否通过，通过了才会调用onSubmit</td>\\n            <td>function(){return [form1,form2]}</td>\\n            <td>--</td>\\n        </tr>\\n         <tr>\\n            <td>confirm</td>\\n            <td>是一个对象，触发保存按钮后的确认提示框的配置，包含<a href=\\\"https://ant.design/components/modal-cn/\\\" target=\\\"_blank\\\"> Antd的Modal的属性（除了onOk）</a>，还包含 show属性(如果为false则不会出现确认提示框，直接调用onSubmit函数)</td>\\n            <td>object</td>\\n            <td>--</td>\\n        </tr>\\n         <tr>\\n            <td>booleanToNumber</td>\\n            <td>表单验证通过后是否把boolean类型的值转成0或1，通常处理Switch控件的值</td>\\n            <td>boolean</td>\\n            <td>true</td>\\n        </tr>\\n         <tr>\\n            <td>controlSize</td>\\n            <td>表单控件大小</td>\\n            <td>default\\\\|large\\\\|small</td>\\n            <td>default</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"items-\\\">items 结构</h2>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>参数</th>\\n            <th>说明</th>\\n            <th>类型</th>\\n            <th>默认值</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>key</td>\\n            <td>表单控件value对应的字段名</td>\\n            <td>string</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>label</td>\\n            <td>表单控件label</td>\\n            <td>string</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>labelWidth</td>\\n            <td>label的宽度，如labelWidth:\\\"120px\\\"，当labelLayout=='horizontal'才可能用的上</td>\\n            <td>string</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> render</td>\\n            <td>渲染表单控件的钩子。支持异步加载：必须return的是Promise对象。例如使用了后台接口：(form,changeFormItems)=>api.getOptions.then(re=>{return 表单控件})。changeFormItems 是一个方法，主要用于局部改变items，实现表单控件之间交互联动,使用方式请往下看</td>\\n            <td>(form,changeFormItems)=>{return ReactNode | Promise}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>span</td>\\n            <td>栅栏占格(antd的栅栏组件分24栏)，例：{xxl:4,xl:6,lg:8}，默认取this.props.defaultSpan</td>\\n            <td>number | object</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>isFormItem</td>\\n            <td>默认为true、如果为false则render函数可以渲染非表单控件内容</td>\\n            <td>boolean</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>className</td>\\n            <td>可以给每项添加className</td>\\n            <td>string</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> options</td>\\n            <td><a href=\\\"https://ant.design/components/form-cn/\\\" target=\\\"_blank\\\">Antd的表单中getFieldDecorator函数的options参数</a>,可以配置验证规则}</td>\\n            <td>object || ()=>options</td>\\n            <td>--</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"changeformitems\\\">changeFormItems</h2>\\n<p>changeFormItems 是一个方法，主要用于局部改变 items，实现表单控件之间交互联动。但不能直接在 render 函数中使用，应在控件的事件当中。changeFormItems 除了在 items 里的 render 参数中，还存在于 getFormInstance 函数的 methods 参数里。</p>\\n<p>changeFormItems 需要两个参数：<code>newItems</code>：array | object 和 <code>part</code> : boolean</p>\\n<p><code>newItems</code>的结构取决于 <code>part</code>参数</p>\\n<p>如果<code>part</code>为 false (默认为 false),<code>newItems</code>同 Zform 的 items，会重新渲染全部 items，这是早期的做法，不建议使用</p>\\n<pre><code class=\\\"language-jsx\\\">//this.items就是Zform的items\\nconst newItems = this.items.slice(0);\\nnewItems.splice(4, 1); //不显示第五个\\nchangeFormItems(this.items, false); //触发渲染</code></pre>\\n<p>如果<code>part</code>为 true，就是局部改变，<code>newItems</code>可以为数组(多个 item 改变)，可以为对象(单个 item 改变),推荐使用方式如下</p>\\n<pre><code class=\\\"language-jsx\\\">//不显示key为servicePort的那个item，\\nchangeFormItems(\\n    {\\n        key: &quot;servicePort&quot;, //对应Zform的items里的key\\n        show: false, //是否显示\\n    },\\n    true,\\n);\\n//其他内容\\nchangeFormItems(\\n    [\\n        {\\n            key: &quot;servicePort&quot;, //对应Zform的items里的key\\n            //改变key为servicePort的那个item的内容\\n            newItem: {\\n                control: &lt;Input /&gt;, //控件  ReactNode\\n                span: { lg: 12 }, //栅栏占格 同zform 的items里的span\\n                options: {}, //同zform 的items里的options\\n                isFormItem: true, //control是否是表单控件\\n                label: &quot;&quot;, //label\\n            },\\n        },\\n    ],\\n    true,\\n);</code></pre>\\n<h2 id=\\\"-\\\">辅助</h2>\\n<p>在<code>zerod/components/Zform/controls.js</code>提供了 <code>getControl(name,config)</code>和<code>getOptions(config)</code> 两个方法</p>\\n<p>在如下的 items 结构中 render 和 options 内容可用<code>getControl</code>和<code>getOptions</code>获取：</p>\\n<pre><code class=\\\"language-jsx\\\">import { getControl, getOptions } from &quot;zerod/components/Zform/controls&quot;;\\nconst items = [\\n    {\\n        key: &quot;numberPlate&quot;,\\n        label: &quot;车牌号码&quot;,\\n        render: form =&gt; {\\n            return getControl(&quot;Input&quot;, { placeholder: &quot;请输入车牌号码&quot; });\\n        },\\n        options: getOptions({\\n            required: true,\\n            requiredMsg: &quot;请输入车牌号码！&quot;,\\n            rules: [\\n                {\\n                    pattern: /^.{1,10}$/,\\n                    message: &quot;车牌号码必须为长度1到10位的字符！&quot;,\\n                },\\n            ],\\n            initialValue: &quot;&quot;,\\n        }),\\n    },\\n    {\\n        key: &quot;vehicleType&quot;,\\n        label: &quot;车辆类别&quot;,\\n        render: form =&gt; {\\n            return getControl(&quot;Select&quot;, {\\n                selectList: [\\n                    { label: &quot;人货车&quot;, value: &quot;0&quot; },\\n                    { label: &quot;的士头&quot;, value: &quot;1&quot; },\\n                    { label: &quot;小汽车&quot;, value: &quot;2&quot; },\\n                    { label: &quot;其他&quot;, value: &quot;3&quot; },\\n                ],\\n                placeholder: &quot;请选择车辆类别&quot;,\\n            });\\n        },\\n        options: getOptions({ required: true, requiredMsg: &quot;请选择车辆类别&quot; }),\\n    },\\n];</code></pre>\\n<h2 id=\\\"getcontrol-name-config-\\\">getControl(name,config)中</h2>\\n<p>name 可选：<code>Input</code>、<code>Input.Group</code>、<code>TextArea</code>、<code>Switch</code>、<code>Select</code>、<code>Checkbox</code>、<code>InputNumber</code>、<code>DatePicker</code>、<code>Radio</code>、<code>Checkbox.Group</code>、<code>Radio.Group</code>、<code>TimePicker</code>、<code>Upload</code>、<code>TreeSelect</code>、<code>Mention</code>、\\n<code>RangePicker</code>、<code>MonthPicker</code>、<code>Rate</code>、<code>AutoComplete</code>（在 antd-design 可找到对应的表单控件）、<code>TreeInput</code>(就是 ZtreeInput)、<code>Cascader</code>、<code>ColorPicker</code>(即 ZcolorPicker)、<code>TimeRange</code>(即 ZtimeRange) 、<code>YearPicker</code>(年份)</p>\\n<p>当<code>Select</code>、<code>Checkbox.Group</code>、<code>Radio.Group</code>，需 config.selectList=[{label:&quot;label&quot;,value:&quot;value&quot;},]</p>\\n<p>当<code>Select</code>，如果需选择项分组需 config.group=true，并且 config.selectList=[{label:&quot;组名&quot;,children:[{label:&quot;label&quot;,value:&quot;value&quot;}]},]</p>\\n<pre><code class=\\\"language-js\\\">getControl(&quot;Select&quot;, {\\n    selectList: [{ label: &quot;label&quot;, value: &quot;value&quot; }], //当`Select`、`Checkbox.Group`、`Radio.Group`时的选项数据\\n    //...antd-design 可找到对应的表单控件的更多属性\\n});</code></pre>\\n<h2 id=\\\"getoptions-config-\\\">getOptions(config) 中</h2>\\n<pre><code class=\\\"language-js\\\">getOptions({\\n    required: true, //是否必填规则\\n    requiredMsg: &quot;请选择车辆类别&quot;, //是否必填规则的错误提示\\n    rules: [], //其他规则\\n    initialValue: &quot;initialValue&quot;, //控件初始值\\n    //...更多属性同items结构的options\\n});</code></pre>\\n\";","module.exports = (__webpack_require__(\"9w1k\"))(316);","import React from \"react\";\r\nimport { Zform, ZcolorPicker } from \"zerod\";\r\nimport { Input, message, InputNumber, Button, Select, DatePicker, Radio } from \"antd\";\r\nimport HOC from \"@/HOC/load-HOC.js\";\r\nconst { AmdDocHOC } = HOC;\r\nimport doc from \"zerod/components/Zform/doc.md\";\r\nimport { getControl } from \"zerod/components/Zform/controls\";\r\nlet hasHide = false;\r\nconst formItems = [\r\n\t{\r\n\t\tkey: \"radio\",\r\n\t\tlabel: \"单选\",\r\n\t\tlabelFocused: true,\r\n\t\trender: form => {\r\n\t\t\tconst selectList = [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"A\",\r\n\t\t\t\t\tvalue: 2,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"B\",\r\n\t\t\t\t\tvalue: 3,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"C\",\r\n\t\t\t\t\tvalue: 4,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"D\",\r\n\t\t\t\t\tvalue: 5,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t\tform.saveFieldOptions[\"radio\"] = selectList;\r\n\t\t\treturn getControl(\"Checkbox.Group\", {\r\n\t\t\t\tselectList,\r\n\t\t\t});\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: () => ({\r\n\t\t\tinitialValue: \"\",\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tkey: \"datepicker\",\r\n\t\tlabel: \"日期框\",\r\n\t\trender: form => {\r\n\t\t\treturn <DatePicker />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: () => ({\r\n\t\t\tinitialValue: null,\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tkey: \"selectTest\",\r\n\t\tlabel: \"下拉框\",\r\n\t\trender: form => {\r\n\t\t\tconst selectList = [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"欧文大哥\",\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"我的观点\",\r\n\t\t\t\t\tvalue: 5,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"我的感受\",\r\n\t\t\t\t\tvalue: 6,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"新手大哥\",\r\n\t\t\t\t\tvalue: 8,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t\tform.saveFieldOptions[\"selectTest\"] = selectList;\r\n\t\t\treturn getControl(\"Select\", {\r\n\t\t\t\tselectList,\r\n\t\t\t});\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: () => ({\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tkey: \"serviceCode\",\r\n\t\tlabel: \"服务编码\",\r\n\t\trender: form => {\r\n\t\t\treturn new Promise(resolve => {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tresolve(<Input placeholder=\"请输入服务编码\" />);\r\n\t\t\t\t}, 5000);\r\n\t\t\t});\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: () => ({\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tkey: \"serviceName\",\r\n\t\tlabel: \"服务名称\",\r\n\t\trender: form => {\r\n\t\t\treturn <Input placeholder=\"请输入服务名称\" />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: {\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tkey: \"colorValue\",\r\n\t\tlabel: \"颜色值\",\r\n\t\trender: form => {\r\n\t\t\treturn <ZcolorPicker />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: {\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tinitialValue: \"#BC29A0\",\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tkey: \"serviceRemark\",\r\n\t\tlabel: \"服务说明\",\r\n\t\tspan: { md: 24 },\r\n\t\trender: form => {\r\n\t\t\treturn <Input.TextArea rows={2} placeholder=\"请输入服务说明\" />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: {\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tkey: \"servicePort\",\r\n\t\tlabel: \"端口号\",\r\n\t\tlabelWidth: \"80px\",\r\n\t\trender: form => {\r\n\t\t\treturn <InputNumber min={11110} max={65535} step={10} />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: {\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tkey: \"myButton\",\r\n\t\tlabel: \" \",\r\n\t\trender: (form, changeFormItems) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t// const newItems = this.items.slice(0);\r\n\t\t\t\t\t\t// newItems.splice(4, 1);\r\n\t\t\t\t\t\t// changeFormItems(hasHide ? this.items : newItems);\r\n\t\t\t\t\t\tchangeFormItems(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkey: \"servicePort\",\r\n\t\t\t\t\t\t\t\tshow: hasHide,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\thasHide = !hasHide;\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{hasHide ? \"显示\" : \"不显示\"}端口号\r\n\t\t\t\t</Button>\r\n\t\t\t);\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tkey: \"confProperty\",\r\n\t\tlabel: \"默认配置\",\r\n\t\tspan: 24,\r\n\t\trender: form => {\r\n\t\t\treturn <Input.TextArea rows={15} placeholder=\"请输入默认配置\" />;\r\n\t\t},\r\n\t\t//antd的 form.getFieldDecorator的options\r\n\t\toptions: {\r\n\t\t\t//验证规则\r\n\t\t\trules: [\r\n\t\t\t\t{\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tmessage: \"不能为空。\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n];\r\nfunction getDemo(labelLayout) {\r\n\treturn class Myjavascript extends React.PureComponent {\r\n\t\titems = formItems;\r\n\t\tdefaultValue = {\r\n\t\t\tserviceCode: \"9999\",\r\n\t\t\tserviceRemark: \"llll\",\r\n\t\t};\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<Zform\r\n\t\t\t\t\tlabelLayout={labelLayout}\r\n\t\t\t\t\tformDefaultValues={this.defaultValue}\r\n\t\t\t\t\titems={this.items}\r\n\t\t\t\t\tonSubmit={values => {\r\n\t\t\t\t\t\tconsole.log(values);\r\n\t\t\t\t\t\treturn Promise.resolve().then(re => {\r\n\t\t\t\t\t\t\tmessage.success(\"提交成功：\" + JSON.stringify(values));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\nexport default AmdDocHOC(doc, {\r\n\tdemo1: function() {\r\n\t\tconst Myjavascript = getDemo(\"inline\");\r\n\t\treturn <Myjavascript />;\r\n\t},\r\n\tdemo2: function() {\r\n\t\tconst Myjavascript = getDemo(\"vertical\");\r\n\t\treturn <Myjavascript />;\r\n\t},\r\n\tdemo3: function() {\r\n\t\tconst Myjavascript = getDemo(\"horizontal\");\r\n\t\treturn <Myjavascript />;\r\n\t},\r\n});\r\n","var map = {\n\t\"./AmdDocHOC/index.jsx\": \"pnNO\",\n\t\"./AshowDemoHOC/index.jsx\": \"+fre\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"jjl2\";","module.exports = (__webpack_require__(\"9w1k\"))(366);","module.exports = (__webpack_require__(\"9w1k\"))(438);","module.exports = (__webpack_require__(\"9w1k\"))(329);","module.exports = (__webpack_require__(\"9w1k\"))(363);","module.exports = (__webpack_require__(\"9w1k\"))(497);","module.exports = (__webpack_require__(\"9w1k\"))(371);"],"sourceRoot":""}