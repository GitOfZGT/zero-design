/*{
    "version": "1.0.0",
    "platform": "darwin",
    "buildTime": "2021-07-03 13:41:21"
}*/
(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{"/Ykg":function(e,t,n){"use strict";var o=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Zviewer=void 0;var r=o(n("q8s6")),a=o(n("MAG/")),c=o(n("6iOh")),s=o(n("1rR9")),p=o(n("IPZl")),l=o(n("v6s4")),d=o(n("kRUu")),u=o(n("XcRB")),i=o(n("ryJs"));n("hfS7"),n("axcb");var m=o(n("vApo")),f=n("V0j1"),g=n("7JPH"),h=o(n("nyVi"));function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,p.default)(e);if(t){var r=(0,p.default)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return(0,s.default)(this,n)}}var y=function(e){(0,c.default)(n,e);var t=v(n);function n(){var e;(0,r.default)(this,n);for(var o=arguments.length,a=new Array(o),c=0;c<o;c++)a[c]=arguments[c];return(e=t.call.apply(t,[this].concat(a))).initViewer=(0,h.default)((function(){e.viewer?e.viewer.update():e.props.urls.length&&(e.viewer=new i.default(e.imgsEl,{transition:!1,url:function(e){return e.dataset.url},hide:e.props.onViewerHide,ready:function(){var t=e.viewer.viewer?e.viewer.viewer:null;if(t&&null===t.querySelector(".z-next")){var n=document.createElement("div"),o=document.createElement("div");n.className="z-next",o.className="z-prev",n.innerHTML='<i  class="zero-icon zerod-next"/>',o.innerHTML='<i  class="zero-icon zerod-prev"/>',t.appendChild(n),t.appendChild(o),n.addEventListener("click",(function(){e.viewer.next(!0)}),!1),o.addEventListener("click",(function(){e.viewer.prev(!0)}),!1)}}})),e.props.viewerUpdated&&e.props.viewerUpdated()}),60),e}return(0,a.default)(n,[{key:"componentDidMount",value:function(){this.initViewer()}},{key:"componentDidUpdate",value:function(e){e.urls===this.props.urls&&e.urls.length===this.props.urls.length||this.initViewer()}},{key:"componentWillUnmount",value:function(){this.viewer&&this.viewer.destroy()}},{key:"render",value:function(){var e=this,t=this.props.showThumbAlt;return l.default.createElement("ul",{ref:function(t){e.imgsEl=t},className:"z-viewer-ul ".concat(this.props.className)},l.default.createElement(g.TransitionGroup,{component:null,enter:!0,exit:!1,appear:!0},this.props.urls.map((function(n,o){var r="string"==typeof n?n:n.thumb?n.thumb:n.url,a="string"==typeof n?n:n.url,c="string"!=typeof n&&n.alt?n.alt:o+1;return l.default.createElement(g.CSSTransition,{key:o,timeout:f.animateTimout.flipInTime,classNames:"flipY",onEntered:e.initViewer,onExited:e.initViewer},l.default.createElement("li",{key:o},t?l.default.createElement("div",{className:"z-viewer-thumb"},l.default.createElement(m.default,{url:r,style:{height:"100%"}})):l.default.createElement(m.default,{url:r,style:{height:"100%"}}),t?l.default.createElement("div",{className:"z-viewer-alt"},c):null,l.default.createElement("img",{"data-url":a,alt:c})))}))))}}]),n}(d.default);t.Zviewer=y,y.propTypes={urls:u.default.oneOfType([u.default.arrayOf(u.default.string),u.default.arrayOf(u.default.object)]),className:u.default.string,showThumbAlt:u.default.bool},y.defaultProps={urls:[],className:"",showThumbAlt:!0};var x=y;t.default=x},QGcZ:function(e,t,n){"use strict";var o=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;o(n("v6s4"));var r=o(n("mOFN")),a=o(n("oHWW")),c=a.default.AmdDocHOC,s=(a.default.AshowDemoHOC,c(r.default,{}));t.default=s},duPH:function(e,t,n){"use strict";var o=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZcodeHighlight=void 0;var r=o(n("q8s6")),a=o(n("MAG/")),c=o(n("6iOh")),s=o(n("1rR9")),p=o(n("IPZl")),l=o(n("v6s4")),d=o(n("kRUu")),u=o(n("XcRB")),i=o(n("XYcM"));function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,p.default)(e);if(t){var r=(0,p.default)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return(0,s.default)(this,n)}}n("lYVS"),n("dDAE"),n("roMe"),n("YO7D"),n("77Mx"),n("vV76"),n("QgYW"),n("X7dv"),n("d8H9"),n("Vqov");var f=function(e){(0,c.default)(n,e);var t=m(n);function n(){return(0,r.default)(this,n),t.apply(this,arguments)}return(0,a.default)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.children,n=e.mode;if(t){if(t&&"html"===n){var o=t.replace(/\<pre/g,'<pre class="line-numbers"');this.boxEl.innerHTML=o}i.default.highlightAllUnder(this.boxEl)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,o=t.mode,r=null;if(n&&"html"!==o){var a=l.default.createElement("code",{className:"language-".concat(this.props.lang)},this.props.children);r="block"===this.props.mode?l.default.createElement("pre",{className:"line-numbers"},a):a}return l.default.createElement("div",{ref:function(t){return e.boxEl=t}},r)}}]),n}(d.default);t.ZcodeHighlight=f,f.propTypes={mode:u.default.string,lang:u.default.string,children:u.default.string},f.defaultProps={lang:"html",mode:"block"};var g=f;t.default=g},mOFN:function(e,t){e.exports='\x3c!-- @routePath: /standard --\x3e\n\n<h1 id="代码书写约定规范">代码书写约定规范</h1>\n<blockquote>\n<p>scss : className 的单词之间以“-”连接,如<code>z-panel-body</code>; 相同的样式值多次使用到请使用变量（scss 变量写法如：<code>$--border-color:#f0fef2</code>）;   </p>\n</blockquote>\n<blockquote>\n<p>js : 变量名和普通函数名如果是多个单词,请使用骆驼峰形式如<code>myName</code>，构造函数名和 class 类名,请以首字母大写、多个单词以骆驼峰形式，如<code>MyComponent</code>;  </p>\n</blockquote>\n<blockquote>\n<p>js : 声明函数参数超过 3 个时，请使用对象参数形式，如 <code>showMyDreams(show,isBox,byElement)</code>,<code>showMyDreams({show,isBox,byElement,allData})</code>;  </p>\n</blockquote>\n<blockquote>\n<p>react : 禁用组件生命周期函数：<code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code>,因为这些可能在以后 react 中被废弃的函数; </p>\n</blockquote>\n<blockquote>\n<p>react : ref 属性禁用字符串方式, 如禁用<code>&lt;div ref=&quot;myBox&quot;&gt;&lt;/div&gt;</code>，推荐用法<code>&lt;div ref={(el)=&gt;{this.myBoxEl=el;}}&gt;&lt;/div&gt;</code> 或者使用 <code>React.createRef()</code>; </p>\n</blockquote>\n<blockquote>\n<p>react : 组件内跟<code>setState</code>无关的属性，请不要写进 <code>state</code>中。  </p>\n</blockquote>\n<pre><code class="language-jsx">// @horizonKey: reactComponent\n// @horizonTitle: react v16.8之前的class组件写法：(建议继承React.PureComponent)\nimport React from &quot;react&quot;;\nimport PropTypes from &quot;prop-types&quot;;\n\nclass MyComponent extends React.PureComponent {\n    // 定义props的类型(如果有props规定必须要写)\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n    };\n    // props的默认值（如果需要）\n    static defaultProps = {\n        className: &quot;z-body&quot;,\n    };\n    // 定义初始state\n    state = {\n        listData: [],\n    };\n    // 安装组件（插入树中）后\n    componentDidMount(){\n\n    },\n    // props更新或state更新后\n    componentDidUpdate(prevProps,prevState){\n\n    },\n    // 卸载和销毁组件之前\n    componentWillUnmount(){\n\n    }\n    render() {\n        const { className, children } = this.props;\n        return (\n            &lt;div className={className}&gt;\n                {this.state.listData.map((item) =&gt; {\n                    return &lt;p&gt;{item.name}&lt;/p&gt;;\n                })}\n                {children}\n            &lt;/div&gt;\n        );\n    }\n}</code></pre>\n<pre><code class="language-jsx">// @horizonKey: reactComponent\n// @horizonTitle: react v16.8之后带hook的函数组件写法：\nimport React, { useState, useEffect, useRef, useImperativeHandle, useCallback } from &#39;react&#39;;\nimport PropTypes from &#39;prop-types&#39;;\n// 定义props的类型(如果有props规定必须要写)\nconst propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.any,\n};\n// props的默认值（如果需要）\nconst defaultProps = {\n    className: &#39;z-body&#39;,\n};\nconst MyComponent = React.forwardRef(function(props, ref) {\n    const { className, children, formData } = props;\n    const [listData, setListData] = useState([]);\n    //用useRef 来实现 class 组件的实例属性\n    const myRef = useRef(null);\n    //formData改变时==&gt;处理数据,等同于componentDidMount和componentDidUpdate\n    useEffect(() =&gt; {\n        setListData([{ label: &#39;&#39;, value: &#39;&#39; }]);\n    }, [formData]);\n    //useEffect可使用多个，\n    //这个useEffect只等同于componentDidMount\n    useEffect(() =&gt; {}, []);\n    useEffect(() =&gt; {\n        //这个useEffect里return出去的函数等同于componentWillUnmount\n        return () =&gt; {\n            // 我是componentWillUnmount\n        };\n    }, []);\n    //用useImperativeHandle暴露一些外部ref能访问的属性\n    useImperativeHandle(ref, () =&gt; {\n        return {\n            getMydata() {\n                return listData;\n            },\n        };\n    });\n    return (\n        &lt;div className={className}&gt;\n            {listData.map((item) =&gt; {\n                return &lt;p&gt;{item.name}&lt;/p&gt;;\n            })}\n            {children}\n        &lt;/div&gt;\n    );\n});\nMyComponent.propTypes = propTypes;\nMyComponent.defaultProps = defaultProps;\nexport default React.memo(MyComponent);</code></pre>\n<p class="z-margin-bottom-30 "></p>\n\n<h1 id="zerod-admin-webpack-开发约定规范">zerod-admin-webpack 开发约定规范</h1>\n<p>以下看到的<code>@</code>符号，是开发目录 <code>src</code> 的别名（绝对路径）</p>\n<h2 id="后台接口-api">后台接口 @/Api</h2>\n<p>0、后台接口请求响应体应该这样的 ： { code:状态码,data:数据 ,msg:&quot;提示&quot; }</p>\n<p>1、<code>@/App.api.js</code> 会自动加载 <code>@/Api/</code>下的<code>.api.js</code></p>\n<p>2、对应后台 <code>swagger</code> 接口文档，如 login 分类的接口，就创建一个<code>login.api.js</code>，在这个 js 中统一写 login 相关的接口函数</p>\n<p>3、规定写法：</p>\n<pre><code class="language-jsx">// 例如login.api.js\nimport httpAjax from &#39;@/zTool/httpAjax&#39;;\nexport default {\n    name: &#39;login&#39;, //空间命名，用于支持多个.api.js中的apis出现相同的函数命名\n    apis: {\n        //获取列表接口\n        getList(query) {\n            return httpAjax(&#39;post&#39;, &#39;接口路径&#39;, query);\n        },\n        //获取验证码\n        getCode(query) {\n            return httpAjax(&#39;get&#39;, &#39;接口路径&#39;, query);\n        },\n    },\n};</code></pre>\n<p>4、例如在<code>Home/index.jsx</code>中使用接口</p>\n<pre><code class="language-jsx">// 导入@/App.api.js即可\nimport api from &#39;@/App.api.js&#39;;\n\napi.login\n    .getList(查询参数)\n    .then((re) =&gt; {})\n    .catch((re) =&gt; {})\n    .finally(() =&gt; {});</code></pre>\n<h2 id="静态资源">静态资源</h2>\n<p>1、衡量小文件可进行打包处理的，统一放 <code>@/assets</code> 目录，如小图片在 <code>@/assets/images</code></p>\n<p>2、较大文件，不宜打包处理的，统一放 <code>static</code>目录，但不能 <code>import png from &#39;../static/images/my.png&#39;</code> 的方式引入， 以<code>&lt;img src=&quot;../../static/images/my.png&quot;&gt;</code>等方式使用</p>\n<h2 id="通用组件-components">通用组件 @/components</h2>\n<p>1、组件命名：以大写<code>A</code>开头，驼峰命名法</p>\n<p>2、一个大组件就是一个文件夹，文件夹命名与组件命名相同，里面有对应的 <code>index.jsx（必需文件）</code>和 <code>style.scss</code>,  \n如 <code>AtabBar</code> 组件。</p>\n<pre><code class="language-jsx">//例子：AtabBar 的 index.jsx\n//使用模块化的css\nimport cssClass from &#39;./style.scss&#39;;\n\nimport React from &#39;react&#39;;\nimport ZpureComponent from &#39;zerod/components/ZpureComponent&#39;;\nclass AtabBar extends ZpureComponent {\n    render() {\n        return &lt;div&gt;&lt;/div&gt;;\n    }\n}\nexport default {\n    name: &#39;AtabBar&#39;, //组件命名(必需)\n    component: AtabBar, //必需\n};</code></pre>\n<p>3、<code>@/components</code> 下的所有 <code>index.jsx</code>会在 <code>@/components/load-components.js</code>自动加载，使用的时候如</p>\n<pre><code class="language-jsx">//例如，在路由组件中使用通用组件只需\nimport components from &#39;@/components/load-components&#39;;\n//然后必须这样：需要什么组件，将组件命名const出来\nconst { AtabBar, ApageTitle } = components;</code></pre>\n<h2 id="路由组件-views">路由组件 @/views</h2>\n<p>0、一个路由组件就是一个文件夹，文件夹命名：以大写字母开头，驼峰命名法</p>\n<p>1、<code>@/views</code>下的目录结构按照路由层级结构划分</p>\n<p>2、每个路由组件有对应的 <code>index.jsx、style.scss</code> 和<code>A.route.js(路由配置)</code></p>\n<p>3、路由组件一般使用异步加载，使用 <code>@/lazyLoad/</code>懒加载：</p>\n<pre><code class="language-jsx">//例如：Home页面有 index.jsx、style.scss和Home.route.js\n// A.route.js写法：\nimport lazyLoad from &#39;@/lazyLoad/lazyLoad&#39;;\nconst Home = lazyLoad(() =&gt; import(&#39;./&#39;));\nexport default [\n    {\n        path: &#39;/Home&#39;,\n        component: Home,\n    },\n];</code></pre>\n<h2 id="状态管理仓库-store">状态管理仓库 @/store</h2>\n<p>状态管理的工具使用的是<code>redux</code> + <code>react-redux</code></p>\n<p><code>@/store</code>主要分为三个部分：<code>reducers</code>、<code>actions</code>、<code>mapStateToProps</code></p>\n<p><code>@/store/index.js</code>中创建了 store，绝大多数不需要修改此文件</p>\n<p>如果要设置 store 中某些状态的初始值，请在<code>@/store/initialState.js</code>配置</p>\n<h3 id="reducers">reducers</h3>\n<p>绝大多数不需要修改<code>@/store/reducers/index.js</code>，它自动加载了<code>@/store/reducers</code>下所有以<code>.mutation.js</code>后缀的文件</p>\n<p><code>.mutation.js</code>内书写的格式如下：</p>\n<pre><code class="language-js">// 变异状态 例子：\nexport default {\n    //命名空间，用于区分 多个.mutation.js里mutations中存在相同函数名\n    name: &#39;evaluate&#39;,\n    //状态变异的函数结构:\n    mutations: {\n        // 如果 actions/index.js中 type 为&quot;evaluate.changeInput1&quot;的action函数被触发，就会触发这里的changeInput1函数去变异相应的状态\n        changeInput1(state, action) {\n            return {\n                ...state,\n                currentValue: action.payload.value,\n            };\n        },\n        // 同理\n        changeInput2(state, action) {\n            return {\n                ...state,\n                maxValue: action.payload.value,\n            };\n        },\n    },\n};</code></pre>\n<h3 id="actions">actions</h3>\n<p>actions 的作用是，其他地方或者其他组件内部想要改变 store 仓库里的什么状态</p>\n<p><code>@/store/actions/index.js</code>内书写的格式如下：</p>\n<pre><code class="language-js">// action函数之一\nexport const numberChange1 = (value) =&gt; ({\n    type: &#39;evaluate.changeInput1&#39;, //要触发的是 命名空间为evaluate的 `.mutation.js`中的 `changeInput1`函数\n    payload: {\n        value,\n    },\n});\n// action函数之一\nexport const numberChange2 = (value) =&gt; ({\n    type: &#39;evaluate.changeInput2&#39;, // 同理\n    payload: {\n        value,\n    },\n});</code></pre>\n<h3 id="mapstatetoprops">mapStateToProps</h3>\n<p>mapStateToProps 的作用是，其他地方或者其他组件内部想要取 store 仓库中的什么状态</p>\n<p><code>@/store/mapStateToProps/index.js</code>内书写的格式如下：</p>\n<pre><code class="language-js">//mapStateToProps函数之一\nexport const getInputValueState1 = function(state) {\n    // 这里取得 store仓库中的currentValue状态 给某个组件的props.value\n    return {\n        value: state.currentValue,\n    };\n};\n//mapStateToProps函数之一\nexport const getInputValueState2 = function(state) {\n    // 这里取得 store仓库中的maxValue状态 给某个组件的props.value\n    return {\n        value: state.maxValue,\n    };\n};</code></pre>\n<h3 id="react-redux-的-connect">react-redux 的 connect</h3>\n<p>当已经写好了<code>.mutation.js</code>、<code>actions</code>、<code>mapStateToProps</code>，这时需要<code>connect</code>将<code>mapStateToProps</code>和<code>actons</code>与<code>组件</code>进行连接</p>\n<p>假如有 <code>Input</code> 这样的组件,它有 value 和 onChange 两个 props，它与 <code>mapStateToProps</code>和<code>actions</code>的连接如下：</p>\n<pre><code class="language-jsx">import React from &#39;react&#39;;\nimport ZpureComponent from &#39;zerod/components/ZpureComponent&#39;;\nimport { Input } from &#39;antd&#39;;\nimport { connect } from &#39;react-redux&#39;;\nimport { numberChange1 } from &#39;@/store/actions&#39;;\nimport { getInputValueState1 } from &#39;@/store/mapStateToProps&#39;;\n\nconst NewInput = connect(getInputValueState1, {\n    onChange: numberChange1,\n})(Input);</code></pre>\n<h2 id="react-上下文-使用">react 上下文 使用</h2>\n<p>1、<code>@/App.context.js</code> 会自动加载 <code>@/context/</code>下的以大写字母开头且以<code>Context</code>结尾的<code>.js</code></p>\n<p>2、例：<code>AppRootContext.js</code></p>\n<pre><code class="language-jsx">import React from &#39;react&#39;;\nimport ZpureComponent from &#39;zerod/components/ZpureComponent&#39;;\nconst defaultValue = {};\nconst context = React.createContext(defaultValue); //创建上下文\nconst { Provider, Consumer } = context;\n//提供启用上下文的方法\nconst setConsumer = (ChildComponent) =&gt; {\n    return class ContextConsumer extends ZpureComponent {\n        render() {\n            return &lt;Consumer&gt;{(value) =&gt; &lt;ChildComponent {...this.props} {...value} /&gt;}&lt;/Consumer&gt;;\n        }\n    };\n};\nexport default {\n    name: &#39;AppRootContext&#39;, //上下文名称（必需）,首字母要大写,以Context结尾\n    loadingText: &#39;加载中...&#39;, //一些固定值\n    Provider,\n    Consumer,\n    setConsumer,\n};</code></pre>\n<p>3、使用上下文 例子：</p>\n<p>上文</p>\n<pre><code class="language-jsx">//引入上下文\nimport contexts from &#39;@/App.context.js&#39;;\n//将上下文的名称 const 出来\nconst { AppRootContext } = contexts;\n\n//在 App.jsx中通过 AppRootContext.Provider 组件更改 上文value\n&lt;AppRootContext.Provider\n    value={{\n        updateLoading: this.methods.updateLoading,\n        timeoutHideLoading: this.methods.timeoutHideLoading,\n        updateDialog: this.methods.updateDialog,\n        updatePicker: this.methods.updatePicker,\n        setPageStorage: this.methods.setPageStorage,\n        getPageStorage: this.methods.getPageStorage,\n        clearPageStorage: this.methods.clearPageStorage,\n    }}\n&gt;\n    {/*这里包含下文的组件*/}\n&lt;/AppRootContext.Provider&gt;;</code></pre>\n<p>下文</p>\n<pre><code class="language-jsx">//引入上下文\nimport contexts from &#39;@/App.context.js&#39;;\n//将上下文的名称 const 出来\nconst { AppRootContext } = contexts;\n\n//在 Report/index.jsx中通过 AppRootContext.setConsumer(Report) 获取上文的value\n//这时在 Report组件中就可以 通过props使用这些东西\n\nthis.props.updateLoading();\nthis.props.timeoutHideLoading();\nthis.props.updateDialog();</code></pre>\n'},oZFy:function(e,t,n){var o={"./AmdDocHOC/index.jsx":"xRbD","./AshowDemoHOC/index.jsx":"+GLa"};function r(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=a,e.exports=r,r.id="oZFy"},v5v4:function(e,t,n){"use strict";var o=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.ZpageWraperHOC=a,t.default=void 0;var r=o(n("6sYb"));function a(){return r.default}var c=a;t.default=c},vApo:function(e,t,n){"use strict";var o=n("K6wJ");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZbgImage=void 0;var r=o(n("q8s6")),a=o(n("MAG/")),c=o(n("6iOh")),s=o(n("1rR9")),p=o(n("IPZl")),l=o(n("v6s4")),d=o(n("kRUu")),u=o(n("XcRB"));function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,p.default)(e);if(t){var r=(0,p.default)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return(0,s.default)(this,n)}}n("dLwK");var m=function(e){(0,c.default)(n,e);var t=i(n);function n(){return(0,r.default)(this,n),t.apply(this,arguments)}return(0,a.default)(n,[{key:"render",value:function(){var e=this,t="z-bg-image-box z-flex-items-center ".concat(this.props.className?this.props.className:""," ").concat(this.props.url?"":"no-url");return l.default.createElement("div",{className:t,onClick:function(t){e.props.onClick&&e.props.onClick(t)},style:this.props.style},this.props.url?null:l.default.createElement("span",null,"无图片"),l.default.createElement("div",{className:"z-bg-image is-bg-".concat(this.props.position),style:{backgroundImage:"url(".concat(this.props.url,")")}}),this.props.children)}}]),n}(d.default);t.ZbgImage=m,m.propTypes={url:u.default.string,position:u.default.string,className:u.default.string,style:u.default.object,onClick:u.default.func},m.defaultProps={position:"center"};var f=m;t.default=f}}]);