/*{
    "version": "1.0.0",
    "platform": "darwin",
    "buildTime": "2021-10-18 18:05:50"
}*/
(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{"/Ykg":function(e,n,o){"use strict";var t=o("K6wJ");Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.Zviewer=void 0;var r=t(o("q8s6")),l=t(o("MAG/")),a=t(o("6iOh")),i=t(o("1rR9")),s=t(o("IPZl")),u=t(o("v6s4")),c=t(o("kRUu")),d=t(o("XcRB")),m=t(o("ryJs"));o("hfS7"),o("axcb");var p=t(o("vApo")),h=o("V0j1"),f=o("7JPH"),z=t(o("nyVi"));function T(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var o,t=(0,s.default)(e);if(n){var r=(0,s.default)(this).constructor;o=Reflect.construct(t,arguments,r)}else o=t.apply(this,arguments);return(0,i.default)(this,o)}}var v=function(e){(0,a.default)(o,e);var n=T(o);function o(){var e;(0,r.default)(this,o);for(var t=arguments.length,l=new Array(t),a=0;a<t;a++)l[a]=arguments[a];return(e=n.call.apply(n,[this].concat(l))).initViewer=(0,z.default)((function(){e.viewer?e.viewer.update():e.props.urls.length&&(e.viewer=new m.default(e.imgsEl,{transition:!1,url:function(e){return e.dataset.url},hide:e.props.onViewerHide,ready:function(){var n=e.viewer.viewer?e.viewer.viewer:null;if(n&&null===n.querySelector(".z-next")){var o=document.createElement("div"),t=document.createElement("div");o.className="z-next",t.className="z-prev",o.innerHTML='<i  class="zero-icon zerod-next"/>',t.innerHTML='<i  class="zero-icon zerod-prev"/>',n.appendChild(o),n.appendChild(t),o.addEventListener("click",(function(){e.viewer.next(!0)}),!1),t.addEventListener("click",(function(){e.viewer.prev(!0)}),!1)}}})),e.props.viewerUpdated&&e.props.viewerUpdated()}),60),e}return(0,l.default)(o,[{key:"componentDidMount",value:function(){this.initViewer()}},{key:"componentDidUpdate",value:function(e){e.urls===this.props.urls&&e.urls.length===this.props.urls.length||this.initViewer()}},{key:"componentWillUnmount",value:function(){this.viewer&&this.viewer.destroy()}},{key:"render",value:function(){var e=this,n=this.props.showThumbAlt;return u.default.createElement("ul",{ref:function(n){e.imgsEl=n},className:"z-viewer-ul ".concat(this.props.className)},u.default.createElement(f.TransitionGroup,{component:null,enter:!0,exit:!1,appear:!0},this.props.urls.map((function(o,t){var r="string"==typeof o?o:o.thumb?o.thumb:o.url,l="string"==typeof o?o:o.url,a="string"!=typeof o&&o.alt?o.alt:t+1;return u.default.createElement(f.CSSTransition,{key:t,timeout:h.animateTimout.flipInTime,classNames:"flipY",onEntered:e.initViewer,onExited:e.initViewer},u.default.createElement("li",{key:t},n?u.default.createElement("div",{className:"z-viewer-thumb"},u.default.createElement(p.default,{url:r,style:{height:"100%"}})):u.default.createElement(p.default,{url:r,style:{height:"100%"}}),n?u.default.createElement("div",{className:"z-viewer-alt"},a):null,u.default.createElement("img",{"data-url":l,alt:a})))}))))}}]),o}(c.default);n.Zviewer=v,v.propTypes={urls:d.default.oneOfType([d.default.arrayOf(d.default.string),d.default.arrayOf(d.default.object)]),className:d.default.string,showThumbAlt:d.default.bool},v.defaultProps={urls:[],className:"",showThumbAlt:!0};var q=v;n.default=q},"1epe":function(e,n,o){"use strict";var t=o("K6wJ");Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;t(o("v6s4"));var r=t(o("DTCh")),l=t(o("oHWW")),a=l.default.AmdDocHOC,i=(l.default.AshowDemoHOC,a(r.default,{}));n.default=i},DTCh:function(e,n){e.exports='\x3c!-- @routePath: /zTool-doc --\x3e\n\n<h1 id="工具对象-ztool">工具对象 zTool</h1>\n<p><code>zTool</code>积累了一些通用的工具方法，包括对需要对 DOM 元素操作的一些方法</p>\n<blockquote>\n<p>除了 BuildScroll,IScrollInstance,scrollDisableWheel,IntroInstance,listenDivSizeChange,mergeConfig , 其他的都引自于 <code>zerod-ztool</code>)</p>\n</blockquote>\n<h2 id="使用">使用</h2>\n<pre><code class="language-js">import { httpAjax, isUrl } from &#39;zerod/components/zTool&#39;;</code></pre>\n<h2 id="ztoolisurl">zTool.isUrl</h2>\n<p>判断是否 url</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {string} url //\n */\nzTool.isUrl(&#39;https://github.com/axios/axios&#39;); // true</code></pre>\n<h2 id="ztoolparsequerystring">zTool.parseQueryString</h2>\n<p>获取 url 问号后面的参数，并转成对象</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {string} url //\n */\nzTool.parseQueryString(&#39;http://my.com/select?id=100&amp;selected=1&#39;); //{id:100,selected:1}\nzTool.parseQueryString(&#39;?id=100&amp;selected=1&#39;); //{id:100,selected:1}</code></pre>\n<h2 id="ztoolfilterquery">zTool.filterQuery</h2>\n<p>只取一个对象中的某些属性</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {array}  //\n * @param {object}  //\n */\nzTool.filterQuery([&#39;name&#39;, &#39;selected&#39;], { name: &#39;萧雨&#39;, selected: false, id: &#39;85&#39;, woch: &#39;犹豫&#39; }); //得到新对象： {name:&quot;萧雨&quot;,selected:false}</code></pre>\n<h2 id="ztoolbuildscroll">zTool.BuildScroll</h2>\n<p><code>zTool.BuildScroll</code> 是一个构造方法，是对<a href="http://iscrolljs.com/#intro" target="_blank">漂亮滚动条插件 ISroll</a>的 <code>new IScroll(el,opt)</code> 的二次封装,并且解决嵌套滚动条的问题，且对 options 有一些默认值</p>\n<p>注:zerod v0.5.3 之后<code>zTool.BuildScroll</code>默认是不起作用的，需 options.useCustomScroll=true 启用。</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //需要生成滚动条的盒子\n * @param {object} options //IScroll的配置，更多请看http://iscrolljs.com/#intro\n */\n//scroollInstance有三个属性:\n//scroollInstance.scroll：其实是new IScroll(el,opt)的实例，\n//scroollInstance.refresh:更新滚动条的方法，\n//scroollInstance.nextScrollToTop：布尔值,默认false，下次调用refresh()时是否滚动条回到顶部\nconst scroollInstance = new zTool.BuildScroll(el, opt);\n\n// 结合zTool.listenDivSizeChange达到自动更新滚动条的效果\nclass My extends ZpureComponent {\n    componentDidMount() {\n        this.scroollInstance = new zTool.BuildScroll(this.bodyEl, { scrollbars: &#39;custom&#39;, useCustomScroll: true });\n        zTool.listenDivSizeChange(this.bodyEl, this.scroollInstance.refresh);\n        zTool.listenDivSizeChange(this._contentEl, this.scroollInstance.refresh);\n    }\n    render() {\n        return (\n            &lt;section ref={(el) =&gt; (this.bodyEl = el)}&gt;\n                &lt;div ref={(el) =&gt; (this._contentEl = el)} style={{ position: &#39;relative&#39; }}&gt;\n                    &lt;div&gt;{this.props.children}&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/section&gt;\n        );\n    }\n}</code></pre>\n<h2 id="ztoollistendivsizechange">zTool.listenDivSizeChange</h2>\n<p>监听盒子（div）尺寸变化 ,只对 section，div 等块状元素有效，对 textarea 无效</p>\n<pre><code class="language-jsx">import { zTool } from &quot;zerod&quot;;\n/**\n *\n * @param {HTMLElement} el //需要生成滚动条的盒子\n * @param {function} callback //回调函数\n */\nzTool.listenDivSizeChange(document.querySelector(&quot;#id&quot;), ()=&gt;{\n    //盒子高度/宽度变化了\n}));</code></pre>\n<h2 id="ztoolscrolldisablewheel">zTool.scrollDisableWheel</h2>\n<p>用于解决外层使用了<code>zTool.BuildScroll</code>创建了滚动条，内部存在如：<code>textarea</code>出现滚动条时滚轮对<code>textarea</code>无效问题</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //textarea等\n */\nzTool.scrollDisableWheel(document.querySelector(&#39;#textarea&#39;));</code></pre>\n<h2 id="ztoolgennonduplicateid">zTool.GenNonDuplicateID</h2>\n<p>用于随机产生不重复 id</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {number} randomLength //生成的字符长度\n */\nzTool.GenNonDuplicateID(8);</code></pre>\n<h2 id="ztooleetostring">zTool.EetoString</h2>\n<p>科学计数法转字符串,(数字位数过大，浏览器会以科学计数法方式显示，我们想要显示完整的数字就转成字符串来显示)</p>\n<pre><code class="language-jsx">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {number} num //数字\n */\nzTool.EetoString(6.5e8); //&quot;650000000&quot;\nzTool.EetoString(6.5e-7); //&quot;0.65000000&quot;</code></pre>\n<h2 id="ztoolloadfilelist">zTool.loadFileList</h2>\n<p>动态加载 .js、.css 的方法，支持多个文件同时加载，支持多个文件按顺序加载</p>\n<p>如果是&quot;http&quot; | &quot;https&quot; 开头,但没有.js|.css 后缀的路径只支持加载 js</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {array} files //js、css路径的数组，\n * @param {boolean} isSequence //是否按files数组的顺序加载，默认false\n */\n//例：\nzTool\n    .loadFileList([\n        &#39;./static/introJs/introjs.min.css&#39;,\n        &#39;./static/introJs/themes/introjs-flattener.css&#39;,\n        &#39;./static/introJs/intro.min.js&#39;,\n    ])\n    .then(() =&gt; {\n        //所有文件加载完的回调\n    });</code></pre>\n<h2 id="ztooldatatypetest">zTool.dataTypeTest</h2>\n<p>检测数据类型，返回对应数据类型的名称</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n\nzTool.dataTypeTest(54); // number\nzTool.dataTypeTest(&#39;you&#39;); // string\nzTool.dataTypeTest({ name: &#39;bun&#39; }); // object\nzTool.dataTypeTest([54, &#39;47&#39;]); // array\nzTool.dataTypeTest(true); // boolean\nzTool.dataTypeTest(new Date(&#39;2018-08-07&#39;)); // date\nzTool.dataTypeTest(null); // null\nzTool.dataTypeTest(undefined); // undefined\nzTool.dataTypeTest(function() {}); // function\nzTool.dataTypeTest(new Symbol()); // symbol\nzTool.dataTypeTest(new Set()); // set\nzTool.dataTypeTest(new Map()); // map\nzTool.dataTypeTest(new Promise()); // promise</code></pre>\n<h2 id="ztooldeepcopy">zTool.deepCopy</h2>\n<p>深度复制对象或数组</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n\nconst newArray = zTool.deepCopy([{ name: &#39;1&#39;, children: [{ name: &#39;1-1&#39; }] }]);\nconst newObj = zTool.deepCopy({ name: &#39;1&#39;, children: [{ name: &#39;1-1&#39; }] });</code></pre>\n<h2 id="ztoolarrayfilterby">zTool.arrayFilterBy</h2>\n<p>根据条件过滤数组，只能过滤两种情况：一、数组里面全是对象，二、数组里面全是字符串或者其他类型的</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {array} array //原数组\n * @param {} property //过滤条件\n */\n//用法一如：\nvar arr = [\n    { name: &#39;水果&#39;, value: 1 },\n    { name: &#39;蔬菜&#39;, value: 2 },\n];\nzTool.arrayFilterBy(arr, { value: 2 }); //得到[{name:&quot;蔬菜&quot;,value:2}]\n//用法二如：\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\nzTool.arrayFilterBy(arr, 3); //得到 [3,3,3]\n//用法三如：\nvar arr = [\n    { name: &#39;水果&#39;, value: 1 },\n    { name: &#39;蔬菜&#39;, value: 2 },\n    { name: &#39;草莓&#39;, value: 4 },\n];\nzTool.arrayFilterBy(arr, [{ value: 2 }, { value: 4 }]); //得到[{name:&quot;蔬菜&quot;,value:2},{name:&quot;草莓&quot;,value:4}]\n//用法四如：\nvar arr = [1, 2, 3, 2, 4, 3, 5, 3];\narrayFilterBy(arr, [3, 2]); //得到 [3,3,3,2,2]</code></pre>\n<h2 id="ztoolon">zTool.on</h2>\n<p>事件绑定，同 <code>element.addEventListener(event,handle,false)</code>;</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} event //事件名，如&quot;click&quot;\n * @param {function} handler //事件回调\n */\n//例：\nzTool.on(document.querySelector(&#39;#id&#39;), &#39;click&#39;, (e) =&gt; {\n    //回调\n});</code></pre>\n<h2 id="ztooloff">zTool.off</h2>\n<p>移除事件，同 <code>element.removeEventListener(event,handle,false)</code>，参数同<code>zTool.on</code></p>\n<h2 id="ztoolonce">zTool.once</h2>\n<p>绑定一次性事件，参数同<code>zTool.on</code></p>\n<h2 id="ztoolhasclass">zTool.hasClass</h2>\n<p>检测某个 DOM 元素是否存在某个样式类名,返回<code>boolean</code>值</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nconst hasFLoat = zTool.hasClass(document.querySelector(&#39;#id&#39;), &#39;z-float&#39;);\nconsole.log(hasFLoat);</code></pre>\n<h2 id="ztooladdclass">zTool.addClass</h2>\n<p>给某个 DOM 元素添加样式类名</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nzTool.addClass(document.querySelector(&#39;#id&#39;), &#39;z-float z-font-size-20&#39;);</code></pre>\n<h2 id="ztoolremoveclass">zTool.removeClass</h2>\n<p>给某个 DOM 元素移除样式类名</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} clasName //样式类名\n */\n//例：\nzTool.removeClass(document.querySelector(&#39;#id&#39;), &#39;z-font-size-20&#39;);</code></pre>\n<h2 id="ztoolgetstyle">zTool.getStyle</h2>\n<p>获取某个元素的某个样式</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} styleName //样式名\n */\n//例：\nconst height = zTool.getStyle(document.querySelector(&#39;#id&#39;), &#39;height&#39;); // 100px</code></pre>\n<h2 id="ztoolsetstyle">zTool.setStyle</h2>\n<p>给某个元素设置 style</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {HTMLElement} el //绑定事件的DOM\n * @param {string} styleName //样式名\n */\n//例：\nzTool.setStyle(document.querySelector(&#39;#id&#39;), &#39;height&#39;, &#39;500px&#39;);</code></pre>\n<h2 id="ztoolitemsfromtree">zTool.itemsFromTree</h2>\n<p>在 json 数组中递归查找一项数据</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要查找的数据，匹配keyObj的id属性),\n *   item:可选参数，会传入action函数的参数\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;},\n *      action:({ tree, currentItem, item, index, keyObj })=&gt;{}，//currentItem是查找到的那项数据\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//移除{id:9}的那一条数据\nconst finished = zTool.itemsFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n    action: ({ tree, currentItem, item, index, keyObj }) =&gt; {\n        //currentItem取得{id:9,name:&quot;豆芽&quot;}\n    },\n});\n//finished 查找到就返回true</code></pre>\n<h2 id="ztoolremoveitemfromtree">zTool.removeItemFromTree</h2>\n<p>用于移除 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要移除的数据，匹配keyObj的id属性),\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//移除{id:9}的那一条数据\nconst newTree = zTool.removeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n});\n// 返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[]}]</code></pre>\n<h2 id="ztoolreplaceitemfromtree">zTool.replaceItemFromTree</h2>\n<p>用于替换 json 数组中一项数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被替换的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//替换{id:9}的那一条数据\nconst newTree = zTool.replaceItemFromTree({\n    tree: tree,\n    sourceItem: { id: 9 },\n    item: { id: 18, name: &#39;莴笋&#39; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\n<h2 id="ztoolpushitemtotree">zTool.pushItemToTree</h2>\n<p>在 json 数组中一项数据的 children 末端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//在{id:5}的那一条数据新增\nconst newTree = zTool.pushItemToTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &#39;莴笋&#39; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;},{id:18,name:&quot;莴笋&quot;}]}]</code></pre>\n<h2 id="ztoolunshiftitemtotree">zTool.unshiftItemToTree</h2>\n<p>在 json 数组中一项数据的 children 头端新增一条子数据(不会造成原 json 的变异)，返回新的 json 数组</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (要被新增子数据的数据，匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//在{id:5}的那一条数据新增\nconst newTree = zTool.unshiftItemToTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &#39;莴笋&#39; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:18,name:&quot;莴笋&quot;},{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\n<h2 id="ztoolinsertbeforeitemfromtree">zTool.insertBeforeItemFromTree</h2>\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之前</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//在{id:5}的那一条数据之前插入\nconst newTree = zTool.insertBeforeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &#39;莴笋&#39; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:18,name:&quot;莴笋&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]}]</code></pre>\n<h2 id="ztoolinsertafteritemfromtree">zTool.insertAfterItemFromTree</h2>\n<p>用于将一项 item 数据插入在 json 数组中某项 sourceItem 数据之后</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n *\n * @param {object} obj 以对象方式传参：\n * {\n *   tree:array (json数组),\n *   sourceItem:object (匹配keyObj的id属性),\n *   item: object (新数据)\n *   keyObj:{id:&quot;id&quot;,children:&quot;children&quot;\n * }\n */\n//例：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//在{id:5}的那一条数据之后插入\nconst newTree = zTool.insertBeforeItemFromTree({\n    tree: tree,\n    sourceItem: { id: 5 },\n    item: { id: 18, name: &#39;莴笋&#39; },\n});\n//返回 [{id:2,name:&quot;苹果&quot;},{id:5,name:&quot;蔬菜&quot;,children:[{id:9,name:&quot;豆芽&quot;}]},{id:18,name:&quot;莴笋&quot;}]</code></pre>\n<h2 id="ztoolturnlabelorvalue">zTool.turnLabelOrValue</h2>\n<p>用 一个值 换取 列表数据 中 另外一个字段的值</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n * @description:\n * @param tree {array}\n * @param value {string|array|number}\n * @param toDist {object}  默认 ： { src: &quot;value&quot;, dist: &quot;label&quot; }  意思》将value值取tree对应的 label\n * @return: newValue\n */\n//从一级列表数据\nconst list = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39; },\n    { id: 6, name: &#39;肉类&#39; },\n];\n//id:2换取对应name\nconst newValue = zTool.turnLabelOrValue(list, 2, { src: &#39;id&#39;, dist: &#39;name&#39; });\n//返回 &quot;苹果&quot;\n\n//从tree(必须带有 children 属性)：\nconst tree = [\n    { id: 2, name: &#39;苹果&#39; },\n    { id: 5, name: &#39;蔬菜&#39;, children: [{ id: 9, name: &#39;豆芽&#39; }] },\n];\n//id:9换取对应name\nconst newValue = zTool.turnLabelOrValue(tree, 9, { src: &#39;id&#39;, dist: &#39;name&#39; });\n//返回 &quot;豆芽&quot;\n\n//从tree(必须带有 children 属性)：\nconst tree = [\n    {\n        id: 1,\n        name: &#39;省&#39;,\n        children: [\n            { id: 2, name: &#39;市1&#39;, children: [{ id: 4, name: &#39;区3&#39; }] },\n            { id: 3, name: &#39;市2&#39;, children: [{ id: 5, name: &#39;区4&#39; }] },\n        ],\n    },\n];\n//级联id值（array） 换取 name\nconst newValue = zTool.turnLabelOrValue(tree, [1, 3, 5], { src: &#39;id&#39;, dist: &#39;name&#39; });\n//返回 [&quot;省&quot;,&quot;市2&quot;,&quot;区4&quot;]</code></pre>\n<h2 id="ztoolturnmapkeys">zTool.turnMapKeys</h2>\n<p>递归转换 tree 里的字段名</p>\n<pre><code class="language-js">import { zTool } from &#39;zerod&#39;;\n/**\n * @description: 转换tree数据的键名\n * @param tree {array}\n * @param srcMapKeys {object} 默认 { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; },\n * @param distMapKeys {object} 默认 { label: &quot;label&quot;, value: &quot;value&quot;, children: &quot;children&quot; }\n * @param extands {object} 默认 {}  可以在tree中加入定义的字段\n * @param valueToString {boolean} 默认 false 是否把 value (有可能是数字) 转成 string 类型的\n * @param includesSourceItem {boolean} 默认 false  除了label，value字段，是否保留tree中的其他字段\n * @return: newTree\n */\n\nconst tree = [\n    {\n        id: 1,\n        name: &#39;省&#39;,\n        children: [\n            { id: 2, name: &#39;市1&#39;, children: [{ id: 4, name: &#39;区3&#39; }] },\n            { id: 3, name: &#39;市2&#39;, children: [{ id: 5, name: &#39;区4&#39; }] },\n        ],\n    },\n];\n\nconst newTree = zTool.turnMapKeys(\n    tree,\n    { label: &#39;name&#39;, value: &#39;id&#39;, children: &#39;children&#39; },\n    { label: &#39;label&#39;, value: &#39;value&#39;, children: &#39;children&#39; },\n);\n// [\n//     {\n//         value: 1,\n//         label: &quot;省&quot;,\n//         children: [\n//             { value: 2, label: &quot;市1&quot;, children: [{ value: 4, label: &quot;区3&quot; }] },\n//             { value: 3, label: &quot;市2&quot;, children: [{ value: 5, label: &quot;区4&quot; }] },\n//         ],\n//     },\n// ]\n\n//加入自定义的字段\nconst newTree = zTool.turnMapKeys(\n    tree,\n    { label: &#39;name&#39;, value: &#39;id&#39;, children: &#39;children&#39; },\n    { label: &#39;label&#39;, value: &#39;value&#39;, children: &#39;children&#39; },\n    { active: false },\n);\n// [\n//     {\n//         value: 1,\n//         label: &quot;省&quot;,\n//         active: false,\n//         children: [\n//             { active: false, value: 2, label: &quot;市1&quot;, children: [{ active: false, value: 4, label: &quot;区3&quot; }] },\n//             { active: false, value: 3, label: &quot;市2&quot;, children: [{ active: false, value: 5, label: &quot;区4&quot; }] },\n//         ],\n//     },\n// ];\n\n//保留原字段\nconst newTree = zTool.turnMapKeys(\n    tree,\n    { label: &#39;name&#39;, value: &#39;id&#39;, children: &#39;children&#39; },\n    { label: &#39;label&#39;, value: &#39;value&#39;, children: &#39;children&#39; },\n    { active: false },\n    false,\n    true,\n);\n// [\n//     {\n//         id: 1,\n//         value: 1,\n//         name: &quot;省&quot;,\n//         label: &quot;省&quot;,\n//         active: false,\n//         children: [\n//             {\n//                 active: false,\n//                 value: 2,\n//                 id: 2,\n//                 label: &quot;市1&quot;,\n//                 name: &quot;市1&quot;,\n//                 children: [{ active: false, value: 4, id: 4, label: &quot;区3&quot;, name: &quot;区3&quot; }],\n//             },\n//             {\n//                 active: false,\n//                 value: 3,\n//                 id: 3,\n//                 label: &quot;市2&quot;,\n//                 name: &quot;市2&quot;,\n//                 children: [{ active: false, value: 5, id: 5, label: &quot;区4&quot;, name: &quot;区4&quot; }],\n//             },\n//         ],\n//     },\n// ];</code></pre>\n'},duPH:function(e,n,o){"use strict";var t=o("K6wJ");Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.ZcodeHighlight=void 0;var r=t(o("q8s6")),l=t(o("MAG/")),a=t(o("6iOh")),i=t(o("1rR9")),s=t(o("IPZl")),u=t(o("v6s4")),c=t(o("kRUu")),d=t(o("XcRB")),m=t(o("XYcM"));function p(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var o,t=(0,s.default)(e);if(n){var r=(0,s.default)(this).constructor;o=Reflect.construct(t,arguments,r)}else o=t.apply(this,arguments);return(0,i.default)(this,o)}}o("lYVS"),o("dDAE"),o("roMe"),o("YO7D"),o("77Mx"),o("vV76"),o("QgYW"),o("X7dv"),o("d8H9"),o("Vqov");var h=function(e){(0,a.default)(o,e);var n=p(o);function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,l.default)(o,[{key:"componentDidMount",value:function(){var e=this.props,n=e.children,o=e.mode;if(n){if(n&&"html"===o){var t=n.replace(/\<pre/g,'<pre class="line-numbers"');this.boxEl.innerHTML=t}m.default.highlightAllUnder(this.boxEl)}}},{key:"render",value:function(){var e=this,n=this.props,o=n.children,t=n.mode,r=null;if(o&&"html"!==t){var l=u.default.createElement("code",{className:"language-".concat(this.props.lang)},this.props.children);r="block"===this.props.mode?u.default.createElement("pre",{className:"line-numbers"},l):l}return u.default.createElement("div",{ref:function(n){return e.boxEl=n}},r)}}]),o}(c.default);n.ZcodeHighlight=h,h.propTypes={mode:d.default.string,lang:d.default.string,children:d.default.string},h.defaultProps={lang:"html",mode:"block"};var f=h;n.default=f},oZFy:function(e,n,o){var t={"./AmdDocHOC/index.jsx":"xRbD","./AshowDemoHOC/index.jsx":"+GLa"};function r(e){var n=l(e);return o(n)}function l(e){if(!o.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}r.keys=function(){return Object.keys(t)},r.resolve=l,e.exports=r,r.id="oZFy"},v5v4:function(e,n,o){"use strict";var t=o("K6wJ");Object.defineProperty(n,"__esModule",{value:!0}),n.ZpageWraperHOC=l,n.default=void 0;var r=t(o("6sYb"));function l(){return r.default}var a=l;n.default=a},vApo:function(e,n,o){"use strict";var t=o("K6wJ");Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.ZbgImage=void 0;var r=t(o("q8s6")),l=t(o("MAG/")),a=t(o("6iOh")),i=t(o("1rR9")),s=t(o("IPZl")),u=t(o("v6s4")),c=t(o("kRUu")),d=t(o("XcRB"));function m(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var o,t=(0,s.default)(e);if(n){var r=(0,s.default)(this).constructor;o=Reflect.construct(t,arguments,r)}else o=t.apply(this,arguments);return(0,i.default)(this,o)}}o("dLwK");var p=function(e){(0,a.default)(o,e);var n=m(o);function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,l.default)(o,[{key:"render",value:function(){var e=this,n="z-bg-image-box z-flex-items-center ".concat(this.props.className?this.props.className:""," ").concat(this.props.url?"":"no-url");return u.default.createElement("div",{className:n,onClick:function(n){e.props.onClick&&e.props.onClick(n)},style:this.props.style},this.props.url?null:u.default.createElement("span",null,"无图片"),u.default.createElement("div",{className:"z-bg-image is-bg-".concat(this.props.position),style:{backgroundImage:"url(".concat(this.props.url,")")}}),this.props.children)}}]),o}(c.default);n.ZbgImage=p,p.propTypes={url:d.default.string,position:d.default.string,className:d.default.string,style:d.default.object,onClick:d.default.func},p.defaultProps={position:"center"};var h=p;n.default=h}}]);