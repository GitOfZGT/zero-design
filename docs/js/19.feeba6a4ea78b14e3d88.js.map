{"version":3,"sources":["webpack:///delegated ./node_modules/_viewerjs@1.3.3@viewerjs/dist/viewer.js from dll-reference _dll_vendor_e823eb2f1294e4241445","webpack:///./node_modules/zerod/components/ZmainHOC/doc.md","webpack:///./src/HOC sync index.jsx$","webpack:///./src/views/Main/HOC-doc/ZmainHOC-doc/index.jsx"],"names":["module","exports","__webpack_require__","map","./AmdDocHOC/index.jsx","./AshowDemoHOC/index.jsx","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","AmdDocHOC","HOC","AshowDemoHOC","Router","publiced","path","BrowserRouter","HashRouter","showMain","Component","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","style","height","react_router_dom__WEBPACK_IMPORTED_MODULE_12__","component","doc","demo1","MyScript","Main","demo2","pageConfig","leftExpandWidth","theme","headerLeftRender","main","zerod_components_Zlayout__WEBPACK_IMPORTED_MODULE_9__","ZheaderBtn","className","headerRightRender","Template","UserDropdown","componentDidMount","callback","_React$PureComponent","_getPrototypeOf2","_this","_babel_runtime_corejs2_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default","this","_len","arguments","length","args","Array","_key","_babel_runtime_corejs2_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default","_babel_runtime_corejs2_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default","call","apply","concat","methods","onMenuClick","item","dropdownMenu","antd_es_menu__WEBPACK_IMPORTED_MODULE_2__","cssClass","selectedKeys","onClick","Item","disabled","antd_es_icon__WEBPACK_IMPORTED_MODULE_3__","type","Divider","key","_babel_runtime_corejs2_helpers_inherits__WEBPACK_IMPORTED_MODULE_8___default","_babel_runtime_corejs2_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default","value","antd_es_dropdown__WEBPACK_IMPORTED_MODULE_1__","overlay","trigger","placement","React","PureComponent","NewMain","zerod_components_ZmainHOC__WEBPACK_IMPORTED_MODULE_0__","demo3","Logo","_React$PureComponent2","_getPrototypeOf3","_this2","_len2","_key2","state","showTitle","toggleTitle","show","setState","props","getLogoMethods","src","logo","alt","width","fontWeight","color","propTypes","PropTypes","func","_React$Component","Zheader","backgroundColor","Zbody","scroll","flexRow","getSideMenuTemplate","isCollapse","openAllSubmenu","getMaimRouteTemplate","permUrl","permName","children","iconClass","name","mainRoutes"],"mappings":"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","file":"js/19.feeba6a4ea78b14e3d88.js","sourcesContent":["module.exports = (__webpack_require__(\"sG4F\"))(498);","module.exports = \"<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h1 id=\\\"-zmainhoc\\\">主页布局：ZmainHOC</h1>\\n<p><code>ZmainHOC</code>是一个函数，传入<code>pageConfig</code>参数配置，返回一个主页布局结构(内置固定一种二级路由布局)的<code>组件</code>(我们这里称它为<code>main</code>组件)，凡是二级路由的子组件都可以使用<span class=\\\"z-history-href\\\" data-path=\\\"/main/context-doc/ZerodMainContext-doc\\\">上下文/ZerodMainContext</span></p>\\n<p>如果想<code>自定义布局结构</code>，又想能使用<span class=\\\"z-history-href\\\" data-path=\\\"/main/context-doc/ZerodMainContext-doc\\\">上下文/ZerodMainContext</span>，ZmainHOC 需要的参数就不是 pageConfig 参数配置 ，而是自己写的 Main 组件：<code>ZmainHOC(MainComponent,componentDidMount)</code></p>\\n<p>1、基本使用</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo1\\\" data-title=\\\"这个demo取zerod-design文档主页展示，所有代码如下\\\"></div>\\n\\n<pre><code class=\\\"language-jsx\\\">// react\\nimport React from &quot;react&quot;;\\nimport ZpureComponent from &quot;zerod/components/ZpureComponent&quot;;\\nimport PropTypes from &quot;prop-types&quot;;\\n// zerod\\nimport { Zlayout, ZmainHOC } from &quot;zerod&quot;;\\nimport GlobalLoading from &quot;@/lazyLoad/Loading.jsx&quot;;\\n// 路由组件\\nimport mainRoutes from &quot;./load-child-routes.js&quot;;\\n// ant ui\\nimport { Icon, Dropdown, Menu } from &quot;antd&quot;;\\n// img\\nimport logo from &quot;@/assets/images/logo.png&quot;;\\nimport flower from &quot;@/assets/images/flower.jpg&quot;;\\n// 样式类\\nimport cssClass from &quot;./style.scss&quot;;\\n// 后台接口\\nimport api from &quot;@/App.api.js&quot;;\\n\\nconst myMenu = [\\n    {\\n        permUrl: &quot;start-doc&quot;,\\n        permName: &quot;开始&quot;,\\n    },\\n];\\n\\nlet logoMethods = null;\\nconst pageConfig = {\\n    // 左侧边展开时的宽度\\n    leftExpandWidth: 280,\\n    // 主页的主题 light | dark\\n    theme: &quot;dark&quot;,\\n    // logt区域\\n    logo: {\\n        title: &quot;&quot;,\\n        render: () =&gt; {\\n            return &lt;Logo getLogoMethods={(methods) =&gt; (logoMethods = methods)} /&gt;;\\n        },\\n    },\\n    // 路由配置信息\\n    mainRoutes: mainRoutes,\\n    // 加载前要显示一个全局loading\\n    globalLoading: () =&gt; &lt;GlobalLoading /&gt;,\\n    // 侧边导航设置\\n    sideMenu: {\\n        //是否打开所有的submenu\\n        openAllSubmenu: true,\\n        //追加在上面的menu\\n        topOtherMenu: myMenu,\\n        //追加在下面的menu\\n        bottomOtherMenu: [],\\n        //\\n        mapKeys: { iconClass: &quot;iconClass&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\\n    },\\n    // 顶部栏左边内容的渲染钩子\\n    headerLeftRender: (tool) =&gt; {\\n        return &lt;img className=&quot;z-margin-left-20&quot; src={flower} height=&quot;60&quot; /&gt;;\\n    },\\n    // 顶部栏右边内容的渲染钩子\\n    // headerRightRender: (tool) =&gt; {\\n    //     return ;\\n    // },\\n    // 侧边栏折叠按钮触发后，过渡动画之前\\n    beforeToggleCollapse: (collapsed) =&gt; {\\n        logoMethods &amp;&amp; logoMethods.toggleTitle(collapsed);\\n    },\\n    // 侧边栏折叠按钮触发后，过渡动画之后\\n    // afterToggleCollapse: (collapsed) =&gt; {},\\n    // 组件加载完成的钩子\\n    componentDidMount: (callback) =&gt; {\\n        callback();\\n        //// 获取登录信息\\n        // api.login.getUserInfo().then((re) =&gt; {\\n        //     if (re.data) {\\n        //         console.log(re.data)\\n        //         //已经登录了保存登录信息数据，传入导航数据\\n        //         callback(re.data,[]);\\n        //         // callback(re.data, re.data.userInfo.permTreeVOS);\\n        //     } else {\\n        //         //如果没有登录回到登录页\\n        //         window.location.assign(&quot;/login&quot;);\\n        //     }\\n        // });\\n    },\\n};\\nexport default ZmainHOC(pageConfig);\\n\\nclass Logo extends ZpureComponent {\\n    static propTypes = {\\n        getLogoMethods: PropTypes.func,\\n    };\\n    state = {\\n        showTitle: true,\\n    };\\n    toggleTitle = (show) =&gt; {\\n        this.setState({\\n            showTitle: show,\\n        });\\n    };\\n    componentDidMount() {\\n        this.props.getLogoMethods &amp;&amp;\\n            this.props.getLogoMethods({\\n                toggleTitle: this.toggleTitle,\\n            });\\n    }\\n    render() {\\n        return (\\n            &lt;div className=&quot;z-flex-items-v-center&quot; style={{ height: &quot;100%&quot; }}&gt;\\n                &lt;img src={logo} alt=&quot;&quot; width=&quot;32&quot; className=&quot;z-margin-left-24&quot; /&gt;\\n                {this.state.showTitle ? (\\n                    &lt;span className=&quot;z-margin-left-12 z-font-size-20&quot; style={{ fontWeight: 600 }}&gt;\\n                        Zero-design\\n                    &lt;/span&gt;\\n                ) : null}\\n            &lt;/div&gt;\\n        );\\n    }\\n}</code></pre>\\n<p>2、右边顶部按钮</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo2\\\" data-title=\\\"需要在右上角添加更多按钮时，可使用Zlayout.ZheaderBtn\\\"></div>\\n\\n<pre><code class=\\\"language-jsx\\\">const pageConfig = {\\n    // 左侧边展开时的宽度\\n    leftExpandWidth: 280,\\n    // 主页的主题 light | dark\\n    theme: &quot;dark&quot;,\\n    // 顶部栏左边内容的渲染钩子\\n    headerLeftRender: (tool) =&gt; {\\n        return &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;左边&lt;/Zlayout.ZheaderBtn&gt;;\\n    },\\n    // 顶部栏右边内容的渲染钩子\\n    headerRightRender: (tool) =&gt; {\\n        return (\\n            &lt;Zlayout.Template&gt;\\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;按钮1&lt;/Zlayout.ZheaderBtn&gt;\\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;按钮2&lt;/Zlayout.ZheaderBtn&gt;\\n                &lt;UserDropdown /&gt;\\n            &lt;/Zlayout.Template&gt;\\n        );\\n    },\\n    // 组件加载完成的钩子\\n    componentDidMount: (callback) =&gt; {\\n        callback();\\n    },\\n};\\n\\nclass UserDropdown extends ZpureComponent {\\n    methods = {\\n        //用户dropdown按钮点击触发\\n        onMenuClick: (item) =&gt; {\\n            // if (item.key === &quot;/logout&quot;) {\\n            //     window.location.assign(item.key);\\n            // } else {\\n            // }\\n        },\\n    };\\n    dropdownMenu = (\\n        &lt;Menu\\n            className={cssClass[&quot;z-main-user-menu&quot;]}\\n            selectedKeys={[]}\\n            onClick={this.methods.onMenuClick &amp;&amp; this.methods.onMenuClick}\\n        &gt;\\n            &lt;Menu.Item disabled&gt;\\n                &lt;Icon type=&quot;user&quot; /&gt;\\n                个人中心\\n            &lt;/Menu.Item&gt;\\n            &lt;Menu.Item disabled&gt;\\n                &lt;Icon type=&quot;setting&quot; /&gt;\\n                设置\\n            &lt;/Menu.Item&gt;\\n            &lt;Menu.Divider /&gt;\\n            &lt;Menu.Item key=&quot;/logout&quot;&gt;\\n                &lt;Icon type=&quot;logout&quot; /&gt;\\n                退出登录\\n            &lt;/Menu.Item&gt;\\n        &lt;/Menu&gt;\\n    );\\n    render() {\\n        return (\\n            &lt;Dropdown overlay={this.dropdownMenu} trigger={[&quot;click&quot;]} placement=&quot;bottomRight&quot;&gt;\\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;\\n                    &lt;span className=&quot;z-icon-circle z-margin-right-8&quot;&gt;\\n                        &lt;Icon type=&quot;user&quot; /&gt;\\n                    &lt;/span&gt;\\n                    登录用户\\n                &lt;/Zlayout.ZheaderBtn&gt;\\n            &lt;/Dropdown&gt;\\n        );\\n    }\\n}\\nexport default ZmainHOC(pageConfig);</code></pre>\\n<p>3、自定义布局</p>\\n<div class=\\\"z-demo-box\\\" data-render=\\\"demo3\\\" data-title=\\\"ZmainHOC(MainComponent,componentDidMount)\\\"></div>\\n\\n<pre><code class=\\\"language-jsx\\\">import logo from &quot;@/assets/images/logo.png&quot;;\\nimport mainRoutes from &quot;@/Main/load-child-routes.js&quot;;\\nclass Logo extends React.PureComponent {\\n    static propTypes = {\\n        getLogoMethods: PropTypes.func,\\n    };\\n    state = {\\n        showTitle: true,\\n    };\\n    toggleTitle = (show) =&gt; {\\n        this.setState({\\n            showTitle: show,\\n        });\\n    };\\n    componentDidMount() {\\n        this.props.getLogoMethods &amp;&amp;\\n            this.props.getLogoMethods({\\n                toggleTitle: this.toggleTitle,\\n            });\\n    }\\n    render() {\\n        return (\\n            &lt;div className=&quot;z-flex-items-v-center&quot; style={{ height: &quot;100%&quot; }}&gt;\\n                &lt;img src={logo} alt=&quot;&quot; width=&quot;32&quot; className=&quot;z-margin-left-24&quot; /&gt;\\n                {this.state.showTitle ? (\\n                    &lt;span className=&quot;z-margin-left-12 z-font-size-20&quot; style={{ fontWeight: 600, color: &quot;white&quot; }}&gt;\\n                        Zero-design\\n                    &lt;/span&gt;\\n                ) : null}\\n            &lt;/div&gt;\\n        );\\n    }\\n}\\nclass Main extends React.Component {\\n    componentDidMount() {}\\n    render() {\\n        //自定义主页布局，经过ZmainHOC包装的组件，会this.props.getSideMenuTemplate和this.props.getMaimRouteTemplate两个方法\\n        return (\\n            &lt;Zlayout&gt;\\n                &lt;Zlayout.Zheader style={{ backgroundColor: &quot;#0A1131&quot; }}&gt;\\n                    &lt;Logo /&gt;\\n                &lt;/Zlayout.Zheader&gt;\\n                &lt;Zlayout.Zbody scroll={false}&gt;\\n                    &lt;Zlayout flexRow&gt;\\n                        &lt;Zlayout width={&quot;320px&quot;}&gt;\\n                            {this.props.getSideMenuTemplate({\\n                                theme: &quot;dark&quot;,\\n                                isCollapse: false,\\n                                openAllSubmenu: true,\\n                            })}\\n                        &lt;/Zlayout&gt;\\n                        &lt;Zlayout&gt;{this.props.getMaimRouteTemplate(&quot;my_main_body&quot;)}&lt;/Zlayout&gt;\\n                    &lt;/Zlayout&gt;\\n                &lt;/Zlayout.Zbody&gt;\\n            &lt;/Zlayout&gt;\\n        );\\n    }\\n}\\nconst NewMain = ZmainHOC(Main, (callback) =&gt; {\\n    //同pageConfig的componentDidMount函数\\n    callback(\\n        //保存的用户信息\\n        {},\\n        //侧边导航数据\\n        [\\n            {\\n                permUrl: &quot;start-doc&quot;,\\n                permName: &quot;开始&quot;,\\n            },\\n            {\\n                permUrl: &quot;standard-doc&quot;,\\n                permName: &quot;开发约定规范&quot;,\\n            },\\n            {\\n                permUrl: &quot;mobile-doc&quot;,\\n                permName: &quot;移动端开发&quot;,\\n            },\\n            {\\n                permUrl: &quot;zTool-doc&quot;,\\n                permName: &quot;工具函数：zTool&quot;,\\n            },\\n            {\\n                permUrl: &quot;style-doc&quot;,\\n                permName: &quot;通用样式&quot;,\\n            },\\n        ],\\n        //mapKeys\\n        { iconClass: &quot;permIconUrl&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\\n        //路由配置数据\\n        mainRoutes,\\n    );\\n});</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"pageconfig\\\">pageConfig</h2>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>参数</th>\\n            <th>说明</th>\\n            <th>类型</th>\\n            <th>默认值</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>noticeType</td>\\n            <td>用于配置操作提示通告的方式</td>\\n            <td>notification | message</td>\\n            <td>message</td>\\n        </tr>\\n        <tr>\\n            <td>leftExpandWidth</td>\\n            <td>左侧栏展开时的宽度</td>\\n            <td>string | number</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>theme</td>\\n            <td>主题</td>\\n            <td>light | dark | mazarine</td>\\n            <td>light</td>\\n        </tr>\\n        <tr>\\n            <td>logo</td>\\n            <td>logo区域配置,请看下面的pageConfig.logo</td>\\n            <td>object</td>\\n            <td>'{title:\\\"\\\",render:()=><span>logo</span>}'</td>\\n        </tr>\\n        <tr>\\n            <td>mainRoutes</td>\\n            <td>\\n                <p>路由配置,如[{path: \\\"/start-doc\\\",component: 组件,exact:是否精准匹配默认true, redirect:false,to:\\\"/redirect-path\\\"}];  当重定向属性redirect为true时,component无效，to属性有效。</p>\\n                <p>mainRoutes还可以是函数，return路由配置，componentDidMount钩子的callback回调之后执行</p>\\n                <p>注：默认只有侧导航menuData里存在的path才会去生成路由，如需取消这种默认，让mainRoutes为函数return路由配置即可</p>\\n            </td>\\n            <td>array[object] | function(menuData,tool){ return array[object]}</td>\\n            <td>[]</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> globalLoading</td>\\n            <td>加载前要显示的一个全局loading</td>\\n            <td>ReactNode | function(){return ;}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>sideMenu</td>\\n            <td>侧边导航配置,请看下面的pageConfig.sideMenu</td>\\n            <td>object</td>\\n            <td>{}</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> headerLeftRender</td>\\n            <td>右侧顶部栏左边内容的渲染钩子,参数有main组件的实例对象</td>\\n            <td>function(tool){return ;}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> headerRightRender</td>\\n            <td>右侧顶部栏右边内容的渲染钩子,参数有main组件的实例对象</td>\\n            <td>function(tool){return ;}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>beforeToggleCollapse</td>\\n            <td>侧边栏折叠按钮触发后，过渡动画之前回调,参数有折叠状态collapsed</td>\\n            <td>function(collapsed,tool){}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>afterToggleCollapse</td>\\n            <td>侧边栏折叠按钮触发后，过渡动画之后回调,参数有折叠状态collapsed</td>\\n            <td>function(collapsed,tool){}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>componentDidMount</td>\\n            <td><p>main组件加载完的钩子,考虑到可能走异步,提供一个一定要调用的callback</p>\\n            <p>callback(userInfo = {}, menuData = []),userInfo是用户登录后要储存的一个对象，menuData是侧边导航的数据(map结构由pageConfig.sideMenu.mapKeys对应)。menuData除了pageConfig.sideMenu.mapKeys对应的属性外，还可以选择添加newWindow:true(点击这个导航打开新的浏览器标签页)</p>\\n            <p>$router:是一个对象，提供history和location属性</p></td>\\n            <td>function(callback,$router,tool){}</td>\\n            <td>--</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"pageconfig-logo\\\">pageConfig.logo</h2>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>参数</th>\\n            <th>说明</th>\\n            <th>类型</th>\\n            <th>默认值</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>title</td>\\n            <td>标题</td>\\n            <td>string</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td><i class=\\\"zero-icon zerod-shengchangzhouqi\\\"></i> render</td>\\n            <td>渲染logo的钩子</td>\\n            <td>function(){return ;}</td>\\n            <td>--</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"pageconfig-sidemenu\\\">pageConfig.sideMenu</h2>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>参数</th>\\n            <th>说明</th>\\n            <th>类型</th>\\n            <th>默认值</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>collapseBtnRender</td>\\n            <td>折叠按钮的渲染函数 (collapsed)=>Icon</td>\\n            <td>(collapsed)=>Icon</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>onSelect</td>\\n            <td>点击选中菜单项触发的函数，如果函数内return false 则不会跳转menuData中对应项的path路径</td>\\n            <td>function({ item, key, selectedKeys }){}</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>openAllSubmenu</td>\\n            <td>侧边导航存在二级导航时，是否打开所有的一级导航</td>\\n            <td>boolean</td>\\n            <td>false</td>\\n        </tr>\\n        <tr>\\n            <td><del>topOtherMenu</del></td>\\n            <td><del>追加在上面的导航配置(map结构由pageConfig.sideMenu.mapKeys对应)，中间的导航配置是由pageConfig.componentDidMount中的callback函数注入进去的</del>；其实不需要这属性，直接处理componentDidMount的callback的menuData数据即可</td>\\n            <td>array[object]</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td><del>bottomOtherMenu</del></td>\\n            <td><del>追加在下面的导航配置(map结构由pageConfig.sideMenu.mapKeys对应)</del>；其实不需要这属性，直接处理componentDidMount的callback的menuData数据即可</td>\\n            <td>array[object]</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>mapKeys</td>\\n            <td>导航配置的map对象key的对应，默认{ iconClass: \\\"iconClass\\\", path: \\\"path\\\", name: \\\"name\\\", children: \\\"children\\\" }</td>\\n            <td>object</td>\\n            <td>--</td>\\n        </tr>\\n        <tr>\\n            <td>noParentPath</td>\\n            <td>如为true,则菜单导航的path不会与父节点的path拼接</td>\\n            <td>boolean</td>\\n            <td>false</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"-\\\">自定义主页布局</h2>\\n<p>如果想自定义布局结构，又想能使用<span class=\\\"z-history-href\\\" data-path=\\\"/main/context-doc/ZerodMainContext-doc\\\">上下文/ZerodMainContext</span>，ZmainHOC 需要的参数就不是 pageConfig 参数配置 ，而是自己写的 Main 组件：<code>ZmainHOC(MainComponent,componentDidMount)</code>,其中 componentDidMount 参数同 pageConfig 的 componentDidMount</p>\\n<pre><code class=\\\"language-jsx\\\">//componentDidMount的callback调用需多些参数\\nconst NewMain= ZmainHOC(MainComponent, (callback) =&gt; {\\n    //callback必须调用，可在异步之后调用\\n    callback(\\n        //保存的用户信息\\n        {},\\n        //侧边导航数据\\n        [\\n            {\\n                permUrl: &quot;start-doc&quot;,\\n                permName: &quot;开始&quot;,\\n            },\\n        ],\\n        //mapKeys  同 pageConfig.sideMenu 的mapKeys\\n        { iconClass: &quot;permIconUrl&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\\n        //路由配置数据,同pageConfig的mainRoutes\\n        mainRoutes,\\n    );\\n});</code></pre>\\n<p>这时<code>MainComponent</code>组件的 props 会添加<code>getSideMenuTemplate</code>和<code>getMaimRouteTemplate</code>两个方法，可在<code>MainComponent</code>组件的 render 函数中使用</p>\\n<pre><code class=\\\"language-jsx\\\">//得到的sideMenuBody是侧边导航布局内容，必须放进Zlayout内\\nconst sideMenuBody = this.props.getSideMenuTemplate({\\n    theme: &quot;mazarine&quot;, //同pageConfig的theme : light | dark | mazarine\\n    isCollapse: false, //是否折叠侧边导航\\n    openAllSubmenu: false, //是否默认打开所有的二级导航\\n    onSelect: function({ item, key, selectedKeys }) {}, //同ZsideMenu的onSelect\\n});\\n//得到的mainRouteBody是二级路由区域布局内容，必须放进Zlayout内\\nconst mainRouteBody = this.props.getMaimRouteTemplate(id); //id可选，当一个应用中出现两次 ZmainHOC时，就要用id区分</code></pre>\\n<p>必须使用 <span class=\\\"z-history-href\\\" data-path=\\\"/main/component-doc/Zlayout-doc\\\">组件/Zlayout</span> 来布局</p>\\n<pre><code class=\\\"language-jsx\\\">class MainComponent extends React.Component {\\n    componentDidMount() {}\\n    render() {\\n        //自定义主页布局，经过ZmainHOC包装的组件，会有this.props.getSideMenuTemplate和this.props.getMaimRouteTemplate两个方法\\n        return (\\n            &lt;Zlayout&gt;\\n                &lt;Zlayout.Zheader style={{ backgroundColor: &quot;#0A1131&quot; }}&gt;\\n                    &lt;Logo /&gt;\\n                &lt;/Zlayout.Zheader&gt;\\n                &lt;Zlayout.Zbody scroll={false}&gt;\\n                    &lt;Zlayout flexRow&gt;\\n                        &lt;Zlayout width={&quot;320px&quot;}&gt;\\n                            {this.props.getSideMenuTemplate({\\n                                theme: &quot;dark&quot;,\\n                                isCollapse: false,\\n                                openAllSubmenu: true,\\n                            })}\\n                        &lt;/Zlayout&gt;\\n                        &lt;Zlayout&gt;{this.props.getMaimRouteTemplate(&quot;my_main_body&quot;)}&lt;/Zlayout&gt;\\n                    &lt;/Zlayout&gt;\\n                &lt;/Zlayout.Zbody&gt;\\n            &lt;/Zlayout&gt;\\n        );\\n    }\\n}</code></pre>\\n<div class=\\\"z-doc-titles\\\"></div>\\n\\n<h2 id=\\\"tool-\\\">tool 参数</h2>\\n<p><code>tool</code>是一个对象，里面的属性同 上下文/ZerodMainContext 提供的内容</p>\\n\";","var map = {\n\t\"./AmdDocHOC/index.jsx\": \"pnNO\",\n\t\"./AshowDemoHOC/index.jsx\": \"+fre\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"jjl2\";","// react\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// zerod\r\nimport { Zlayout, ZmainHOC } from \"zerod\";\r\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\r\nimport { Menu, Dropdown, Icon } from \"antd\";\r\nimport HOC from \"@/HOC/load-HOC.js\";\r\nconst { AmdDocHOC, AshowDemoHOC } = HOC;\r\nimport Main from \"@/views/Main\";\r\nimport cssClass from \"@/views/Main/style.scss\";\r\nimport doc from \"zerod/components/ZmainHOC/doc.md\";\r\nimport publiced from \"../../../../../config/pablic\";\r\nimport logo from \"@/assets/images/logo.png\";\r\n\r\n// 路由组件\r\nimport mainRoutes from \"../../load-child-routes.js\";\r\n\r\nconst Router = publiced.path == \"/\" ? BrowserRouter : HashRouter;\r\n\r\nconst showMain = function(Component) {\r\n\treturn (\r\n\t\t<div style={{ height: \"100%\" }}>\r\n\t\t\t<Router>\r\n\t\t\t\t<Route path={`/main/HOC-doc/ZmainHOC-doc`} component={Component} />\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default AmdDocHOC(doc, {\r\n\tdemo1: function() {\r\n\t\tconst MyScript = AshowDemoHOC(showMain(Main), false);\r\n\t\treturn <MyScript />;\r\n\t},\r\n\tdemo2: function() {\r\n\t\tconst pageConfig = {\r\n\t\t\t// 左侧边展开时的宽度\r\n\t\t\tleftExpandWidth: 280,\r\n\t\t\t// 主页的主题 light | dark\r\n\t\t\ttheme: \"dark\",\r\n\t\t\t// 顶部栏左边内容的渲染钩子\r\n\t\t\theaderLeftRender: (main) => {\r\n\t\t\t\treturn <Zlayout.ZheaderBtn className=\"z-margin-right-15\">左边</Zlayout.ZheaderBtn>;\r\n\t\t\t},\r\n\t\t\t// 顶部栏右边内容的渲染钩子\r\n\t\t\theaderRightRender: (main) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Zlayout.Template>\r\n\t\t\t\t\t\t<Zlayout.ZheaderBtn className=\"z-margin-right-15\">按钮1</Zlayout.ZheaderBtn>\r\n\t\t\t\t\t\t<Zlayout.ZheaderBtn className=\"z-margin-right-15\">按钮2</Zlayout.ZheaderBtn>\r\n\t\t\t\t\t\t<UserDropdown />\r\n\t\t\t\t\t</Zlayout.Template>\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t// 组件加载完成的钩子\r\n\t\t\tcomponentDidMount: (callback) => {\r\n\t\t\t\tcallback();\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tclass UserDropdown extends React.PureComponent {\r\n\t\t\tmethods = {\r\n\t\t\t\t//用户dropdown按钮点击触发\r\n\t\t\t\tonMenuClick: (item) => {\r\n\t\t\t\t\t// if (item.key === \"/logout\") {\r\n\t\t\t\t\t// \twindow.location.assign(item.key);\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t// }\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\tdropdownMenu = (\r\n\t\t\t\t<Menu\r\n\t\t\t\t\tclassName={cssClass[\"z-main-user-menu\"]}\r\n\t\t\t\t\tselectedKeys={[]}\r\n\t\t\t\t\tonClick={this.methods.onMenuClick && this.methods.onMenuClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Menu.Item disabled>\r\n\t\t\t\t\t\t<Icon type=\"user\" />\r\n\t\t\t\t\t\t个人中心\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t<Menu.Item disabled>\r\n\t\t\t\t\t\t<Icon type=\"setting\" />\r\n\t\t\t\t\t\t设置\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t<Menu.Divider />\r\n\t\t\t\t\t<Menu.Item key=\"/logout\">\r\n\t\t\t\t\t\t<Icon type=\"logout\" />\r\n\t\t\t\t\t\t退出登录\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t</Menu>\r\n\t\t\t);\r\n\t\t\trender() {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Dropdown overlay={this.dropdownMenu} trigger={[\"click\"]} placement=\"bottomRight\">\r\n\t\t\t\t\t\t<Zlayout.ZheaderBtn className=\"z-margin-right-15\">\r\n\t\t\t\t\t\t\t<span className=\"z-icon-circle z-margin-right-8\">\r\n\t\t\t\t\t\t\t\t<Icon type=\"user\" />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t登录用户\r\n\t\t\t\t\t\t</Zlayout.ZheaderBtn>\r\n\t\t\t\t\t</Dropdown>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst NewMain = ZmainHOC(pageConfig);\r\n\t\tconst MyScript = AshowDemoHOC(showMain(NewMain), false);\r\n\t\treturn <MyScript />;\r\n\t},\r\n\tdemo3: function() {\r\n\t\tclass Logo extends React.PureComponent {\r\n\t\t\tstatic propTypes = {\r\n\t\t\t\tgetLogoMethods: PropTypes.func,\r\n\t\t\t};\r\n\t\t\tstate = {\r\n\t\t\t\tshowTitle: true,\r\n\t\t\t};\r\n\t\t\ttoggleTitle = (show) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowTitle: show,\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tcomponentDidMount() {\r\n\t\t\t\tthis.props.getLogoMethods &&\r\n\t\t\t\t\tthis.props.getLogoMethods({\r\n\t\t\t\t\t\ttoggleTitle: this.toggleTitle,\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\trender() {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"z-flex-items-v-center\" style={{ height: \"100%\" }}>\r\n\t\t\t\t\t\t<img src={logo} alt=\"\" width=\"32\" className=\"z-margin-left-24\" />\r\n\t\t\t\t\t\t{this.state.showTitle ? (\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName=\"z-margin-left-12 z-font-size-20\"\r\n\t\t\t\t\t\t\t\tstyle={{ fontWeight: 600, color: \"white\" }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tZero-design\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tclass Main extends React.Component {\r\n\t\t\tcomponentDidMount() {}\r\n\t\t\trender() {\r\n\t\t\t\t//自定义主页布局，经过ZmainHOC包装的组件，会this.props.getSideMenuTemplate和this.props.getMaimRouteTemplate两个方法\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Zlayout>\r\n\t\t\t\t\t\t<Zlayout.Zheader style={{ backgroundColor: \"#0A1131\" }}>\r\n\t\t\t\t\t\t\t<Logo />\r\n\t\t\t\t\t\t</Zlayout.Zheader>\r\n\t\t\t\t\t\t<Zlayout.Zbody scroll={false}>\r\n\t\t\t\t\t\t\t<Zlayout flexRow>\r\n\t\t\t\t\t\t\t\t<Zlayout width={\"320px\"}>\r\n\t\t\t\t\t\t\t\t\t{this.props.getSideMenuTemplate({\r\n\t\t\t\t\t\t\t\t\t\ttheme: \"dark\",\r\n\t\t\t\t\t\t\t\t\t\tisCollapse: false,\r\n\t\t\t\t\t\t\t\t\t\topenAllSubmenu: true,\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Zlayout>\r\n\t\t\t\t\t\t\t\t<Zlayout>{this.props.getMaimRouteTemplate(\"my_main_body\")}</Zlayout>\r\n\t\t\t\t\t\t\t</Zlayout>\r\n\t\t\t\t\t\t</Zlayout.Zbody>\r\n\t\t\t\t\t</Zlayout>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst NewMain = ZmainHOC(Main, (callback) => {\r\n\t\t\t//同pageConfig的componentDidMount函数\r\n\t\t\tcallback(\r\n\t\t\t\t//保存的用户信息\r\n\t\t\t\t{},\r\n\t\t\t\t//侧边导航数据\r\n\t\t\t\t[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpermUrl: \"HOC-doc\",\r\n\t\t\t\t\t\tpermName: \"HOC\",\r\n\t\t\t\t\t\tchildren: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZappHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"根组件 : ZappHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZmainHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"主页布局 : ZmainHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZpageWraperHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"页面头尾结构 : ZpageWrapper\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZsearchListHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"列表展示 : ZsearchListHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZeditSimpleFormHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"编辑页面 : ZeditSimpleFormHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZdetailSimpleBaseHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"详情页面 : ZdetailSimpleBaseHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpermUrl: \"ZeditorTreeHOC-doc\",\r\n\t\t\t\t\t\t\t\tpermName: \"树列表页 : ZeditorTreeHOC\",\r\n\t\t\t\t\t\t\t\ticonClass: \"\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\t//mapKeys\r\n\t\t\t\t{ iconClass: \"permIconUrl\", path: \"permUrl\", name: \"permName\", children: \"children\" },\r\n\t\t\t\t//路由配置数据\r\n\t\t\t\tmainRoutes,\r\n\t\t\t);\r\n\t\t});\r\n\t\tconst MyScript = AshowDemoHOC(showMain(NewMain), false);\r\n\t\treturn <MyScript />;\r\n\t},\r\n});\r\n"],"sourceRoot":""}