(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{JNq4:function(t,n,e){"use strict";e.r(n);var o=e("9DAX"),a=e("MhH0"),d=e.n(a),r=e("FcZB"),l=e.n(r),s=e("Ratc"),i=e.n(s),u=e("0j8+"),c=e.n(u),h=e("0kOG"),p=e.n(h),m=e("uqIC"),y=e.n(m),g=e("ebhq"),f=e("zXgb"),L=e.n(f),q=(e("Z3zS"),e("Y3vA")),v=g.a.AmdDocHOC,w=g.a.AshowDemoHOC,M=function(t){function n(){var t,e;d()(this,n);for(var o=arguments.length,a=new Array(o),r=0;r<o;r++)a[r]=arguments[r];return(e=i()(this,(t=c()(n)).call.apply(t,[this].concat(a)))).openRightModal=function(){e.props.showLayerRightModal({show:!0,modal:"abc",content:y.a.createElement("div",{className:"z-panel"},y.a.createElement("div",{className:"z-panel-body"},"内容")),width:"300px",mask:!0,onTransitionend:function(){e.props.showLayerModalLoading(!0,"abc"),setTimeout(function(){e.props.showLayerModalLoading(!1,"abc")},2e3)}})},e}return p()(n,t),l()(n,[{key:"render",value:function(){return y.a.createElement("div",{className:"z-panel",style:{width:"90%",margin:"0 auto"}},y.a.createElement("div",{className:"z-panel-heading"},"面板标题"),y.a.createElement("div",{className:"z-panel-body"},y.a.createElement(o.a,{type:"primary",onClick:this.openRightModal},"打开RightModal")))}}]),n}(y.a.PureComponent);M=q.a.setConsumer(M);var x=function(t){function n(){return d()(this,n),i()(this,c()(n).apply(this,arguments))}return p()(n,t),l()(n,[{key:"render",value:function(){return y.a.createElement("div",{className:"z-padding-left-20 z-flex-items-center",style:{height:"100%"}},y.a.createElement("div",null,y.a.createElement(o.a,{type:"primary"},"按钮")))}}]),n}(y.a.PureComponent);n.default=v(L.a,{demo1:function(){var t=w({windowType:"layer",header:y.a.createElement(x,null),content:y.a.createElement(M,null)},!1);return y.a.createElement(t,null)}})},"SX+g":function(t,n,e){t.exports=e("sG4F")(498)},jjl2:function(t,n,e){var o={"./AmdDocHOC/index.jsx":"pnNO","./AshowDemoHOC/index.jsx":"+fre"};function a(t){var n=d(t);return e(n)}function d(t){if(!e.o(o,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return o[t]}a.keys=function(){return Object.keys(o)},a.resolve=d,t.exports=a,a.id="jjl2"},zXgb:function(t,n){t.exports='<h1 id="-zfulllayer">浮层窗口：ZfullLayer</h1>\n<p><code>ZfullLayer</code> 是一个背景黑色半透的覆盖在整个文档之上的窗口组件，分 header 和 children 两个内容区域</p>\n<p>1、基本使用</p>\n<div class="z-demo-box" data-render="demo1" data-title=""></div>\n\n<pre><code class="language-jsx">import React from &quot;react&quot;;\nimport { Button } from &quot;antd&quot;;\nimport ZfullLayer from &quot;zerod/components/ZfullLayer&quot;;\nimport ZerodLayerContext from &quot;zerod/components/ZerodLayerContext&quot;;\nclass Contents extends React.PureComponent {\n    openRightModal = () =&gt; {\n        //打开RightModal\n        this.props.showLayerRightModal({\n            show: true,\n            modal: &quot;abc&quot;,\n            content: (\n                &lt;div className=&quot;z-panel&quot;&gt;\n                    &lt;div className=&quot;z-panel-body&quot;&gt;内容&lt;/div&gt;\n                &lt;/div&gt;\n            ),\n            width: &quot;300px&quot;,\n            mask: false,\n            onTransitionend: () =&gt; {\n                //显示/隐藏modal的loading\n                this.props.showLayerModalLoading(true, &quot;abc&quot;);\n                setTimeout(() =&gt; {\n                    this.props.showLayerModalLoading(false, &quot;abc&quot;);\n                }, 2000);\n            },\n        });\n    };\n    render() {\n        return (\n            &lt;div className=&quot;z-panel&quot; style={{ width: &quot;90%&quot;, margin: &quot;0 auto&quot; }}&gt;\n                &lt;div className=&quot;z-panel-heading&quot;&gt;面板标题&lt;/div&gt;\n                &lt;div className=&quot;z-panel-body&quot;&gt;\n                    &lt;Button type=&quot;primary&quot; onClick={this.openRightModal}&gt;\n                        打开RightModal\n                    &lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\nContents = ZerodLayerContext.setConsumer(Contents);\n\nclass Header extends React.PureComponent {\n    render() {\n        return (\n            &lt;div className=&quot;z-padding-left-20 z-flex-items-center&quot; style={{ height: &quot;100%&quot; }}&gt;\n                &lt;div&gt;\n                    &lt;Button type=&quot;primary&quot;&gt;按钮&lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\nclass Myjavascript extends React.PureComponent {\n    methods = {\n        open: () =&gt; {\n            const amplify = this.ZfullLayerMethods.showLayer(\n                true,\n                () =&gt; {\n                    console.log(&quot;open&quot;);\n                },\n                true, //是否先缩放\n            );\n            //再放大效果\n            amplify();\n        },\n    };\n    exportMethods = (m) =&gt; {\n        this.ZfullLayerMethods = m;\n    };\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;div className=&quot;z-panel&quot;&gt;\n                    &lt;div className=&quot;z-panel-body&quot;&gt;\n                        &lt;Button type=&quot;primary&quot; onClick={this.methods.open}&gt;\n                            打开ZfullLayer\n                        &lt;/Button&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                &lt;ZfullLayer header={&lt;Header /&gt;} exportMethods={this.exportMethods}&gt;\n                    &lt;Contents /&gt;\n                &lt;/ZfullLayer&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code></pre>\n<h2 id="zfulllayer-props">ZfullLayer 的 props</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>header</td>\n<td>头部区域内容，高度有 64px</td>\n<td>ReactNode</td>\n<td>--</td>\n</tr>\n<tr>\n<td>children</td>\n<td>主体区域内容</td>\n<td>ReactNode</td>\n<td>--</td>\n</tr>\n<tr>\n<td>exportMethods</td>\n<td>在 componentDidMount 导出组件内部可调用的方法，methods 请往下看</td>\n<td>function(methods){}</td>\n<td>--</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>主体区域内容是否需要滚动条</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>type</td>\n<td>主题</td>\n<td>normal | dark</td>\n<td>dark</td>\n</tr>\n</tbody></table>\n<p>注： header 和 children 两个内容区域通信，请使用 <code>React.createRef()</code></p>\n<p>一般场景只允许同时打开一个<code>ZfullLayer</code></p>\n<h2 id="methods-zerodlayercontext-methods-showlayer-true-null-true-">methods 同 ZerodLayerContext 提供的内容如： methods.showLayer(true,null,true)();</h2>\n<p><code>ZfullLayer</code>内部子孙组件经过<code>import ZerodLayerContext from &quot;zerod/components/ZerodLayerContext&quot;</code>的 <code>ZerodLayerContext.setConsumer(子孙组件)</code>包装后，<code>props</code>提供如下内容：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>使用</th>\n<th>返回值类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>showLayer</td>\n<td>显示/隐藏 ZfullLayer 的方法,当 isScale 为 true 时返回一个函数，调用这个函数主体内容会有一个放大的过渡动画</td>\n<td>showLayer(show,callback,isScale)</td>\n<td>--</td>\n</tr>\n<tr>\n<td>showLoading</td>\n<td>显示/隐藏 ZfullLayer 内部的 loading</td>\n<td>showLoading(show)</td>\n<td>--</td>\n</tr>\n<tr>\n<td>showLayerRightModal</td>\n<td>在 ZfullLayer 中打开有抽屉窗口，参数同 <span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContent 的 showRightModal</span></td>\n<td>showLayerRightModal({})</td>\n<td>--</td>\n</tr>\n<tr>\n<td>showLayerModalLoading</td>\n<td>在 ZfullLayer 中显示对应窗口的 loading，同 <span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContent 的 showModalLoading</span></td>\n<td>showLayerModalLoading(show,modal)</td>\n<td>--</td>\n</tr>\n<tr>\n<td>getLayerModalScrollInstance</td>\n<td>在 ZfullLayer 中获取对应窗口的滚动条的实例，同 <span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContent 的 getScrollInstance</span></td>\n<td>getLayerModalScrollInstance(modal)</td>\n<td>object</td>\n</tr>\n<tr>\n<td>getLayerScrollAreaWrapperEl</td>\n<td>在 ZfullLayer 中获取对应窗口的滚动条区域的包裹元素，同 <span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContent 的 getScrollAreaWrapperEl</span></td>\n<td>getLayerScrollAreaWrapperEl(modal)</td>\n<td>Elment</td>\n</tr>\n</tbody></table>\n'}}]);
//# sourceMappingURL=24.ddd37211c806e8f19cb6.js.map