(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"SX+g":function(t,n,e){t.exports=e("sG4F")(498)},cGPK:function(t,n){t.exports='<div class="z-doc-titles"></div>\n\n<h1 id="-zmainhoc">主页布局：ZmainHOC</h1>\n<p><code>ZmainHOC</code>是一个函数，传入<code>pageConfig</code>参数配置，返回一个主页布局结构(内置固定一种二级路由布局)的<code>组件</code>(我们这里称它为<code>main</code>组件)，凡是二级路由的子组件都可以使用<span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContext</span></p>\n<p>如果想<code>自定义布局结构</code>，又想能使用<span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContext</span>，ZmainHOC 需要的参数就不是 pageConfig 参数配置 ，而是自己写的 Main 组件：<code>ZmainHOC(MainComponent,componentDidMount)</code></p>\n<p>1、基本使用</p>\n<div class="z-demo-box" data-render="demo1" data-title="这个demo取zerod-design文档主页展示，所有代码如下"></div>\n\n<pre><code class="language-jsx">// react\nimport React from &quot;react&quot;;\nimport ZpureComponent from &quot;zerod/components/ZpureComponent&quot;;\nimport PropTypes from &quot;prop-types&quot;;\n// zerod\nimport { Zlayout, ZmainHOC } from &quot;zerod&quot;;\nimport GlobalLoading from &quot;@/lazyLoad/Loading.jsx&quot;;\n// 路由组件\nimport mainRoutes from &quot;./load-child-routes.js&quot;;\n// ant ui\nimport { Icon, Dropdown, Menu } from &quot;antd&quot;;\n// img\nimport logo from &quot;@/assets/images/logo.png&quot;;\nimport flower from &quot;@/assets/images/flower.jpg&quot;;\n// 样式类\nimport cssClass from &quot;./style.scss&quot;;\n// 后台接口\nimport api from &quot;@/App.api.js&quot;;\n\nconst myMenu = [\n    {\n        permUrl: &quot;start-doc&quot;,\n        permName: &quot;开始&quot;,\n    },\n];\n\nlet logoMethods = null;\nconst pageConfig = {\n    // 左侧边展开时的宽度\n    leftExpandWidth: 280,\n    // 主页的主题 light | dark\n    theme: &quot;dark&quot;,\n    // logt区域\n    logo: {\n        title: &quot;&quot;,\n        render: () =&gt; {\n            return &lt;Logo getLogoMethods={(methods) =&gt; (logoMethods = methods)} /&gt;;\n        },\n    },\n    // 路由配置信息\n    mainRoutes: mainRoutes,\n    // 加载前要显示一个全局loading\n    globalLoading: () =&gt; &lt;GlobalLoading /&gt;,\n    // 侧边导航设置\n    sideMenu: {\n        //是否打开所有的submenu\n        openAllSubmenu: true,\n        //追加在上面的menu\n        topOtherMenu: myMenu,\n        //追加在下面的menu\n        bottomOtherMenu: [],\n        //\n        mapKeys: { iconClass: &quot;iconClass&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\n    },\n    // 顶部栏左边内容的渲染钩子\n    headerLeftRender: (tool) =&gt; {\n        return &lt;img className=&quot;z-margin-left-20&quot; src={flower} height=&quot;60&quot; /&gt;;\n    },\n    // 顶部栏右边内容的渲染钩子\n    // headerRightRender: (tool) =&gt; {\n    //     return ;\n    // },\n    // 侧边栏折叠按钮触发后，过渡动画之前\n    beforeToggleCollapse: (collapsed) =&gt; {\n        logoMethods &amp;&amp; logoMethods.toggleTitle(collapsed);\n    },\n    // 侧边栏折叠按钮触发后，过渡动画之后\n    // afterToggleCollapse: (collapsed) =&gt; {},\n    // 组件加载完成的钩子\n    componentDidMount: (callback) =&gt; {\n        callback();\n        //// 获取登录信息\n        // api.login.getUserInfo().then((re) =&gt; {\n        //     if (re.data) {\n        //         console.log(re.data)\n        //         //已经登录了保存登录信息数据，传入导航数据\n        //         callback(re.data,[]);\n        //         // callback(re.data, re.data.userInfo.permTreeVOS);\n        //     } else {\n        //         //如果没有登录回到登录页\n        //         window.location.assign(&quot;/login&quot;);\n        //     }\n        // });\n    },\n};\nexport default ZmainHOC(pageConfig);\n\nclass Logo extends ZpureComponent {\n    static propTypes = {\n        getLogoMethods: PropTypes.func,\n    };\n    state = {\n        showTitle: true,\n    };\n    toggleTitle = (show) =&gt; {\n        this.setState({\n            showTitle: show,\n        });\n    };\n    componentDidMount() {\n        this.props.getLogoMethods &amp;&amp;\n            this.props.getLogoMethods({\n                toggleTitle: this.toggleTitle,\n            });\n    }\n    render() {\n        return (\n            &lt;div className=&quot;z-flex-items-v-center&quot; style={{ height: &quot;100%&quot; }}&gt;\n                &lt;img src={logo} alt=&quot;&quot; width=&quot;32&quot; className=&quot;z-margin-left-24&quot; /&gt;\n                {this.state.showTitle ? (\n                    &lt;span className=&quot;z-margin-left-12 z-font-size-20&quot; style={{ fontWeight: 600 }}&gt;\n                        Zero-design\n                    &lt;/span&gt;\n                ) : null}\n            &lt;/div&gt;\n        );\n    }\n}</code></pre>\n<p>2、右边顶部按钮</p>\n<div class="z-demo-box" data-render="demo2" data-title="需要在右上角添加更多按钮时，可使用Zlayout.ZheaderBtn"></div>\n\n<pre><code class="language-jsx">const pageConfig = {\n    // 左侧边展开时的宽度\n    leftExpandWidth: 280,\n    // 主页的主题 light | dark\n    theme: &quot;dark&quot;,\n    // 顶部栏左边内容的渲染钩子\n    headerLeftRender: (tool) =&gt; {\n        return &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;左边&lt;/Zlayout.ZheaderBtn&gt;;\n    },\n    // 顶部栏右边内容的渲染钩子\n    headerRightRender: (tool) =&gt; {\n        return (\n            &lt;Zlayout.Template&gt;\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;按钮1&lt;/Zlayout.ZheaderBtn&gt;\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;按钮2&lt;/Zlayout.ZheaderBtn&gt;\n                &lt;UserDropdown /&gt;\n            &lt;/Zlayout.Template&gt;\n        );\n    },\n    // 组件加载完成的钩子\n    componentDidMount: (callback) =&gt; {\n        callback();\n    },\n};\n\nclass UserDropdown extends ZpureComponent {\n    methods = {\n        //用户dropdown按钮点击触发\n        onMenuClick: (item) =&gt; {\n            // if (item.key === &quot;/logout&quot;) {\n            //     window.location.assign(item.key);\n            // } else {\n            // }\n        },\n    };\n    dropdownMenu = (\n        &lt;Menu\n            className={cssClass[&quot;z-main-user-menu&quot;]}\n            selectedKeys={[]}\n            onClick={this.methods.onMenuClick &amp;&amp; this.methods.onMenuClick}\n        &gt;\n            &lt;Menu.Item disabled&gt;\n                &lt;Icon type=&quot;user&quot; /&gt;\n                个人中心\n            &lt;/Menu.Item&gt;\n            &lt;Menu.Item disabled&gt;\n                &lt;Icon type=&quot;setting&quot; /&gt;\n                设置\n            &lt;/Menu.Item&gt;\n            &lt;Menu.Divider /&gt;\n            &lt;Menu.Item key=&quot;/logout&quot;&gt;\n                &lt;Icon type=&quot;logout&quot; /&gt;\n                退出登录\n            &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n    render() {\n        return (\n            &lt;Dropdown overlay={this.dropdownMenu} trigger={[&quot;click&quot;]} placement=&quot;bottomRight&quot;&gt;\n                &lt;Zlayout.ZheaderBtn className=&quot;z-margin-right-15&quot;&gt;\n                    &lt;span className=&quot;z-icon-circle z-margin-right-8&quot;&gt;\n                        &lt;Icon type=&quot;user&quot; /&gt;\n                    &lt;/span&gt;\n                    登录用户\n                &lt;/Zlayout.ZheaderBtn&gt;\n            &lt;/Dropdown&gt;\n        );\n    }\n}\nexport default ZmainHOC(pageConfig);</code></pre>\n<p>3、自定义布局</p>\n<div class="z-demo-box" data-render="demo3" data-title="ZmainHOC(MainComponent,componentDidMount)"></div>\n\n<pre><code class="language-jsx">import logo from &quot;@/assets/images/logo.png&quot;;\nimport mainRoutes from &quot;@/Main/load-child-routes.js&quot;;\nclass Logo extends React.PureComponent {\n    static propTypes = {\n        getLogoMethods: PropTypes.func,\n    };\n    state = {\n        showTitle: true,\n    };\n    toggleTitle = (show) =&gt; {\n        this.setState({\n            showTitle: show,\n        });\n    };\n    componentDidMount() {\n        this.props.getLogoMethods &amp;&amp;\n            this.props.getLogoMethods({\n                toggleTitle: this.toggleTitle,\n            });\n    }\n    render() {\n        return (\n            &lt;div className=&quot;z-flex-items-v-center&quot; style={{ height: &quot;100%&quot; }}&gt;\n                &lt;img src={logo} alt=&quot;&quot; width=&quot;32&quot; className=&quot;z-margin-left-24&quot; /&gt;\n                {this.state.showTitle ? (\n                    &lt;span className=&quot;z-margin-left-12 z-font-size-20&quot; style={{ fontWeight: 600, color: &quot;white&quot; }}&gt;\n                        Zero-design\n                    &lt;/span&gt;\n                ) : null}\n            &lt;/div&gt;\n        );\n    }\n}\nclass Main extends React.Component {\n    componentDidMount() {}\n    render() {\n        //自定义主页布局，经过ZmainHOC包装的组件，会this.props.getSideMenuTemplate和this.props.getMaimRouteTemplate两个方法\n        return (\n            &lt;Zlayout&gt;\n                &lt;Zlayout.Zheader style={{ backgroundColor: &quot;#0A1131&quot; }}&gt;\n                    &lt;Logo /&gt;\n                &lt;/Zlayout.Zheader&gt;\n                &lt;Zlayout.Zbody scroll={false}&gt;\n                    &lt;Zlayout flexRow&gt;\n                        &lt;Zlayout width={&quot;320px&quot;}&gt;\n                            {this.props.getSideMenuTemplate({\n                                theme: &quot;dark&quot;,\n                                isCollapse: false,\n                                openAllSubmenu: true,\n                            })}\n                        &lt;/Zlayout&gt;\n                        &lt;Zlayout&gt;{this.props.getMaimRouteTemplate(&quot;my_main_body&quot;)}&lt;/Zlayout&gt;\n                    &lt;/Zlayout&gt;\n                &lt;/Zlayout.Zbody&gt;\n            &lt;/Zlayout&gt;\n        );\n    }\n}\nconst NewMain = ZmainHOC(Main, (callback) =&gt; {\n    //同pageConfig的componentDidMount函数\n    callback(\n        //保存的用户信息\n        {},\n        //侧边导航数据\n        [\n            {\n                permUrl: &quot;start-doc&quot;,\n                permName: &quot;开始&quot;,\n            },\n            {\n                permUrl: &quot;standard-doc&quot;,\n                permName: &quot;开发约定规范&quot;,\n            },\n            {\n                permUrl: &quot;mobile-doc&quot;,\n                permName: &quot;移动端开发&quot;,\n            },\n            {\n                permUrl: &quot;zTool-doc&quot;,\n                permName: &quot;工具函数：zTool&quot;,\n            },\n            {\n                permUrl: &quot;style-doc&quot;,\n                permName: &quot;通用样式&quot;,\n            },\n        ],\n        //mapKeys\n        { iconClass: &quot;permIconUrl&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\n        //路由配置数据\n        mainRoutes,\n    );\n});</code></pre>\n<div class="z-doc-titles"></div>\n\n<h2 id="pageconfig">pageConfig</h2>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>noticeType</td>\n            <td>用于配置操作提示通告的方式</td>\n            <td>notification | message</td>\n            <td>message</td>\n        </tr>\n        <tr>\n            <td>leftExpandWidth</td>\n            <td>左侧栏展开时的宽度</td>\n            <td>string | number</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>theme</td>\n            <td>主题</td>\n            <td>light | dark | mazarine</td>\n            <td>light</td>\n        </tr>\n        <tr>\n            <td>logo</td>\n            <td>logo区域配置,请看下面的pageConfig.logo</td>\n            <td>object</td>\n            <td>\'{title:"",render:()=><span>logo</span>}\'</td>\n        </tr>\n        <tr>\n            <td>mainRoutes</td>\n            <td>\n                <p>路由配置,如[{path: "/start-doc",component: 组件,exact:是否精准匹配默认true, redirect:false,to:"/redirect-path"}];  当重定向属性redirect为true时,component无效，to属性有效。</p>\n                <p>mainRoutes还可以是函数，return路由配置，componentDidMount钩子的callback回调之后执行</p>\n                <p>注：默认只有侧导航menuData里存在的path才会去生成路由，如需取消这种默认，让mainRoutes为函数return路由配置即可</p>\n            </td>\n            <td>array[object] | function(menuData,tool){ return array[object]}</td>\n            <td>[]</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> globalLoading</td>\n            <td>加载前要显示的一个全局loading</td>\n            <td>ReactNode | function(){return ;}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>sideMenu</td>\n            <td>侧边导航配置,请看下面的pageConfig.sideMenu</td>\n            <td>object</td>\n            <td>{}</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> headerLeftRender</td>\n            <td>右侧顶部栏左边内容的渲染钩子,参数有main组件的实例对象</td>\n            <td>function(tool){return ;}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> headerRightRender</td>\n            <td>右侧顶部栏右边内容的渲染钩子,参数有main组件的实例对象</td>\n            <td>function(tool){return ;}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>beforeToggleCollapse</td>\n            <td>侧边栏折叠按钮触发后，过渡动画之前回调,参数有折叠状态collapsed</td>\n            <td>function(collapsed,tool){}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>afterToggleCollapse</td>\n            <td>侧边栏折叠按钮触发后，过渡动画之后回调,参数有折叠状态collapsed</td>\n            <td>function(collapsed,tool){}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>componentDidMount</td>\n            <td><p>main组件加载完的钩子,考虑到可能走异步,提供一个一定要调用的callback</p>\n            <p>callback(userInfo = {}, menuData = []),userInfo是用户登录后要储存的一个对象，menuData是侧边导航的数据(map结构由pageConfig.sideMenu.mapKeys对应)。menuData除了pageConfig.sideMenu.mapKeys对应的属性外，还可以选择添加newWindow:true(点击这个导航打开新的浏览器标签页)</p>\n            <p>$router:是一个对象，提供history和location属性</p></td>\n            <td>function(callback,$router,tool){}</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n\n<div class="z-doc-titles"></div>\n\n<h2 id="pageconfig-logo">pageConfig.logo</h2>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>title</td>\n            <td>标题</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> render</td>\n            <td>渲染logo的钩子</td>\n            <td>function(){return ;}</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n\n<div class="z-doc-titles"></div>\n\n<h2 id="pageconfig-sidemenu">pageConfig.sideMenu</h2>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>collapseBtnRender</td>\n            <td>折叠按钮的渲染函数 (collapsed)=>Icon</td>\n            <td>(collapsed)=>Icon</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>onSelect</td>\n            <td>点击选中菜单项触发的函数，如果函数内return false 则不会跳转menuData中对应项的path路径</td>\n            <td>function({ item, key, selectedKeys }){}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>openAllSubmenu</td>\n            <td>侧边导航存在二级导航时，是否打开所有的一级导航</td>\n            <td>boolean</td>\n            <td>false</td>\n        </tr>\n        <tr>\n            <td><del>topOtherMenu</del></td>\n            <td><del>追加在上面的导航配置(map结构由pageConfig.sideMenu.mapKeys对应)，中间的导航配置是由pageConfig.componentDidMount中的callback函数注入进去的</del>；其实不需要这属性，直接处理componentDidMount的callback的menuData数据即可</td>\n            <td>array[object]</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td><del>bottomOtherMenu</del></td>\n            <td><del>追加在下面的导航配置(map结构由pageConfig.sideMenu.mapKeys对应)</del>；其实不需要这属性，直接处理componentDidMount的callback的menuData数据即可</td>\n            <td>array[object]</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>mapKeys</td>\n            <td>导航配置的map对象key的对应，默认{ iconClass: "iconClass", path: "path", name: "name", children: "children" }</td>\n            <td>object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>noParentPath</td>\n            <td>如为true,则菜单导航的path不会与父节点的path拼接</td>\n            <td>boolean</td>\n            <td>false</td>\n        </tr>\n    </tbody>\n</table>\n\n<div class="z-doc-titles"></div>\n\n<h2 id="-">自定义主页布局</h2>\n<p>如果想自定义布局结构，又想能使用<span class="z-history-href" data-path="/main/context-doc/ZerodMainContext-doc">上下文/ZerodMainContext</span>，ZmainHOC 需要的参数就不是 pageConfig 参数配置 ，而是自己写的 Main 组件：<code>ZmainHOC(MainComponent,componentDidMount)</code>,其中 componentDidMount 参数同 pageConfig 的 componentDidMount</p>\n<pre><code class="language-jsx">//componentDidMount的callback调用需多些参数\nconst NewMain= ZmainHOC(MainComponent, (callback) =&gt; {\n    //callback必须调用，可在异步之后调用\n    callback(\n        //保存的用户信息\n        {},\n        //侧边导航数据\n        [\n            {\n                permUrl: &quot;start-doc&quot;,\n                permName: &quot;开始&quot;,\n            },\n        ],\n        //mapKeys  同 pageConfig.sideMenu 的mapKeys\n        { iconClass: &quot;permIconUrl&quot;, path: &quot;permUrl&quot;, name: &quot;permName&quot;, children: &quot;children&quot; },\n        //路由配置数据,同pageConfig的mainRoutes\n        mainRoutes,\n    );\n});</code></pre>\n<p>这时<code>MainComponent</code>组件的 props 会添加<code>getSideMenuTemplate</code>和<code>getMaimRouteTemplate</code>两个方法，可在<code>MainComponent</code>组件的 render 函数中使用</p>\n<pre><code class="language-jsx">//得到的sideMenuBody是侧边导航布局内容，必须放进Zlayout内\nconst sideMenuBody = this.props.getSideMenuTemplate({\n    theme: &quot;mazarine&quot;, //同pageConfig的theme : light | dark | mazarine\n    isCollapse: false, //是否折叠侧边导航\n    openAllSubmenu: false, //是否默认打开所有的二级导航\n    onSelect: function({ item, key, selectedKeys }) {}, //同ZsideMenu的onSelect\n});\n//得到的mainRouteBody是二级路由区域布局内容，必须放进Zlayout内\nconst mainRouteBody = this.props.getMaimRouteTemplate(id); //id可选，当一个应用中出现两次 ZmainHOC时，就要用id区分</code></pre>\n<p>必须使用 <span class="z-history-href" data-path="/main/component-doc/Zlayout-doc">组件/Zlayout</span> 来布局</p>\n<pre><code class="language-jsx">class MainComponent extends React.Component {\n    componentDidMount() {}\n    render() {\n        //自定义主页布局，经过ZmainHOC包装的组件，会有this.props.getSideMenuTemplate和this.props.getMaimRouteTemplate两个方法\n        return (\n            &lt;Zlayout&gt;\n                &lt;Zlayout.Zheader style={{ backgroundColor: &quot;#0A1131&quot; }}&gt;\n                    &lt;Logo /&gt;\n                &lt;/Zlayout.Zheader&gt;\n                &lt;Zlayout.Zbody scroll={false}&gt;\n                    &lt;Zlayout flexRow&gt;\n                        &lt;Zlayout width={&quot;320px&quot;}&gt;\n                            {this.props.getSideMenuTemplate({\n                                theme: &quot;dark&quot;,\n                                isCollapse: false,\n                                openAllSubmenu: true,\n                            })}\n                        &lt;/Zlayout&gt;\n                        &lt;Zlayout&gt;{this.props.getMaimRouteTemplate(&quot;my_main_body&quot;)}&lt;/Zlayout&gt;\n                    &lt;/Zlayout&gt;\n                &lt;/Zlayout.Zbody&gt;\n            &lt;/Zlayout&gt;\n        );\n    }\n}</code></pre>\n<div class="z-doc-titles"></div>\n\n<h2 id="tool-">tool 参数</h2>\n<p><code>tool</code>是一个对象，里面的属性同 上下文/ZerodMainContext 提供的内容</p>\n'},jjl2:function(t,n,e){var o={"./AmdDocHOC/index.jsx":"pnNO","./AshowDemoHOC/index.jsx":"+fre"};function a(t){var n=l(t);return e(n)}function l(t){if(!e.o(o,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return o[t]}a.keys=function(){return Object.keys(o)},a.resolve=l,t.exports=a,a.id="jjl2"},pyES:function(t,n,e){"use strict";e.r(n);var o=e("jQpQ"),a=e("/VJ/"),l=e("qczO"),r=e("d4lw"),d=e("MhH0"),i=e.n(d),s=e("FcZB"),u=e.n(s),c=e("Ratc"),m=e.n(c),p=e("0j8+"),g=e.n(p),h=e("0kOG"),q=e.n(h),f=e("C6MB"),y=e("uqIC"),C=e.n(y),M=e("EH+i"),Z=e.n(M),b=e("o0/1"),z=e("ebhq"),k=e("55gy"),w=e("dEKO"),T=e.n(w),O=e("cGPK"),v=e.n(O),x=e("0Gcb"),N=e.n(x),R=e("nWR2"),D=e.n(R),E=e("u3xt"),H=z.a.AmdDocHOC,j=z.a.AshowDemoHOC,L="/"==N.a.path?b.BrowserRouter:b.HashRouter,U=function(t){return C.a.createElement("div",{style:{height:"100%"}},C.a.createElement(L,null,C.a.createElement(b.Route,{path:"/main/HOC-doc/ZmainHOC-doc",component:t})))};n.default=H(v.a,{demo1:function(){var t=j(U(k.default),!1);return C.a.createElement(t,null)},demo2:function(){var t={leftExpandWidth:280,theme:"dark",headerLeftRender:function(t){return C.a.createElement(f.b.ZheaderBtn,{className:"z-margin-right-15"},"左边")},headerRightRender:function(t){return C.a.createElement(f.b.Template,null,C.a.createElement(f.b.ZheaderBtn,{className:"z-margin-right-15"},"按钮1"),C.a.createElement(f.b.ZheaderBtn,{className:"z-margin-right-15"},"按钮2"),C.a.createElement(n,null))},componentDidMount:function(t){t()}},n=function(t){function n(){var t,e;i()(this,n);for(var o=arguments.length,a=new Array(o),d=0;d<o;d++)a[d]=arguments[d];return(e=m()(this,(t=g()(n)).call.apply(t,[this].concat(a)))).methods={onMenuClick:function(t){}},e.dropdownMenu=C.a.createElement(l.b,{className:T.a["z-main-user-menu"],selectedKeys:[],onClick:e.methods.onMenuClick&&e.methods.onMenuClick},C.a.createElement(l.b.Item,{disabled:!0},C.a.createElement(r.a,{type:"user"}),"个人中心"),C.a.createElement(l.b.Item,{disabled:!0},C.a.createElement(r.a,{type:"setting"}),"设置"),C.a.createElement(l.b.Divider,null),C.a.createElement(l.b.Item,{key:"/logout"},C.a.createElement(r.a,{type:"logout"}),"退出登录")),e}return q()(n,t),u()(n,[{key:"render",value:function(){return C.a.createElement(a.a,{overlay:this.dropdownMenu,trigger:["click"],placement:"bottomRight"},C.a.createElement(f.b.ZheaderBtn,{className:"z-margin-right-15"},C.a.createElement("span",{className:"z-icon-circle z-margin-right-8"},C.a.createElement(r.a,{type:"user"})),"登录用户"))}}]),n}(C.a.PureComponent),e=Object(o.a)(t),d=j(U(e),!1);return C.a.createElement(d,null)},demo3:function(){var t=function(t){function n(){var t,e;i()(this,n);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(e=m()(this,(t=g()(n)).call.apply(t,[this].concat(a)))).state={showTitle:!0},e.toggleTitle=function(t){e.setState({showTitle:t})},e}return q()(n,t),u()(n,[{key:"componentDidMount",value:function(){this.props.getLogoMethods&&this.props.getLogoMethods({toggleTitle:this.toggleTitle})}},{key:"render",value:function(){return C.a.createElement("div",{className:"z-flex-items-v-center",style:{height:"100%"}},C.a.createElement("img",{src:D.a,alt:"",width:"32",className:"z-margin-left-24"}),this.state.showTitle?C.a.createElement("span",{className:"z-margin-left-12 z-font-size-20",style:{fontWeight:600,color:"white"}},"Zero-design"):null)}}]),n}(C.a.PureComponent);t.propTypes={getLogoMethods:Z.a.func};var n=function(n){function e(){return i()(this,e),m()(this,g()(e).apply(this,arguments))}return q()(e,n),u()(e,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return C.a.createElement(f.b,null,C.a.createElement(f.b.Zheader,{style:{backgroundColor:"#0A1131"}},C.a.createElement(t,null)),C.a.createElement(f.b.Zbody,{scroll:!1},C.a.createElement(f.b,{flexRow:!0},C.a.createElement(f.b,{width:"320px"},this.props.getSideMenuTemplate({theme:"dark",isCollapse:!1,openAllSubmenu:!0})),C.a.createElement(f.b,null,this.props.getMaimRouteTemplate("my_main_body")))))}}]),e}(C.a.Component),e=Object(o.a)(n,function(t){t({},[{permUrl:"HOC-doc",permName:"HOC",children:[{permUrl:"ZappHOC-doc",permName:"根组件 : ZappHOC",iconClass:""},{permUrl:"ZmainHOC-doc",permName:"主页布局 : ZmainHOC",iconClass:""},{permUrl:"ZpageWraperHOC-doc",permName:"页面头尾结构 : ZpageWrapper",iconClass:""},{permUrl:"ZsearchListHOC-doc",permName:"列表展示 : ZsearchListHOC",iconClass:""},{permUrl:"ZeditSimpleFormHOC-doc",permName:"编辑页面 : ZeditSimpleFormHOC",iconClass:""},{permUrl:"ZdetailSimpleBaseHOC-doc",permName:"详情页面 : ZdetailSimpleBaseHOC",iconClass:""},{permUrl:"ZeditorTreeHOC-doc",permName:"树列表页 : ZeditorTreeHOC",iconClass:""}]}],{iconClass:"permIconUrl",path:"permUrl",name:"permName",children:"children"},E.a)}),a=j(U(e),!1);return C.a.createElement(a,null)}})}}]);
//# sourceMappingURL=19.feeba6a4ea78b14e3d88.js.map