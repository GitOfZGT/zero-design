(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{"0van":function(t,n){t.exports='<div class="z-doc-titles"></div>\n\n<h1 id="-zsearchform">查询表单：ZsearchForm</h1>\n<p><code>ZsearchForm</code>是有栅栏布局的横向排版的，将<code>antd</code>的<code>Form</code>、<code>Form.item</code> 的结构转成数据结构直接渲染的方式，并且带有查询、重置、折叠按钮</p>\n<p>继承了 React.PureComponent</p>\n<p>1、基本使用</p>\n<div class="z-demo-box" data-render="demo1" data-title="基本使用"></div>\n\n<pre><code class="language-jsx">import React from &quot;react&quot;;\nimport ZpureComponent from &quot;zerod/components/ZpureComponent&quot;;\nimport { ZsearchForm } from &quot;zerod&quot;;\nimport { Input, message } from &quot;antd&quot;;\n\nclass Myjavascript extends React.PureComponent {\n    items = [\n        {\n            key: &quot;serviceCode&quot;,\n            label: &quot;服务编码&quot;,\n            render: (form) =&gt; {\n                //异步加载表单控件\n                return new Promise((resolve) =&gt; {\n                    setTimeout(() =&gt; {\n                        resolve(&lt;Input placeholder=&quot;请输入服务编码&quot; /&gt;);\n                    }, 5000);\n                });\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;serviceName&quot;,\n            label: &quot;服务名称&quot;,\n            render: (form) =&gt; {\n                return &lt;Input placeholder=&quot;请输入服务名称&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n        {\n            key: &quot;time&quot;,\n            label: &quot;申请时间&quot;,\n            render: (form) =&gt; {\n                return &lt;DatePicker.RangePicker renderExtraFooter={() =&gt; &quot;extra footer&quot;} showTime /&gt;;\n            },\n        },\n        {\n            key: &quot;serviceRemark&quot;,\n            label: &quot;服务说明&quot;,\n            span: 24,\n            render: (form) =&gt; {\n                return &lt;Input.TextArea rows={2} placeholder=&quot;请输入服务说明&quot; /&gt;;\n            },\n            //antd的 form.getFieldDecorator的options\n            options: {\n                //验证规则\n                rules: [\n                    {\n                        required: true,\n                        message: &quot;不能为空。&quot;,\n                    },\n                ],\n            },\n        },\n    ];\n    render() {\n        return (\n            &lt;ZsearchForm\n                labelLayout=&quot;inline&quot;\n                colFormItems={this.items}\n                onSearch={(values) =&gt; {\n                    message.success(&quot;提交成功：&quot; + JSON.stringify(values));\n                }}\n                collapseCount={2}\n            /&gt;\n        );\n    }\n}</code></pre>\n<div class="z-doc-titles"></div>\n\n<h3 id="zsearchform-props">ZsearchForm Props</h3>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>items</td>\n            <td>生成表单的json数组，请看下面的items结构, (请使用变量缓存所需设置的值而非直接使用字面量)</td>\n            <td>array</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>defaultSpan</td>\n            <td>统一设置items栅栏占格，默认：{xxl:6,xl:8,lg:12,md:24}，但items中的span属性的优先级比这个高</td>\n            <td>number | object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>onSearch</td>\n            <td>验证表单后的提交事件</td>\n            <td>function</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>onReset</td>\n            <td>重置表单后的事件</td>\n            <td>function</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>noCollapse</td>\n            <td>禁用折叠</td>\n            <td>boolean</td>\n            <td>false</td>\n        </tr>\n        <tr>\n            <td>collapseCount</td>\n            <td>启用折叠后，折叠起来显示的数量</td>\n            <td>number</td>\n            <td>--</td>\n        </tr>\n         <tr>\n            <td>formDefaultValues</td>\n            <td>返显表单的数据，如{serviceName:"名称"}，"serviceName"对应items属性里面的key, (请使用变量缓存所需设置的值而非直接使用字面量)</td>\n            <td>object</td>\n            <td>--</td>\n        </tr>\n          <tr>\n            <td>getFormInstance</td>\n            <td>获取Form实例的钩子，外部通过(form)=>{this.formIstance=form;}获得form实例对象,通过this.formInstance.调用antd<a href="https://ant.design/components/form-cn/" target="_blank">表单相关方法</a></td>\n            <td>function(form,methods){}</td>\n            <td>--</td>\n        </tr>\n         <tr>\n            <td>afterItemsRendered</td>\n            <td>所有表单控件渲染完的回调，包括异步渲染控件</a></td>\n            <td>function(form,methods){}</td>\n            <td>--</td>\n        </tr>\n         <tr>\n            <td>hidden</td>\n            <td>通过改变height隐藏/显示ZsearchForm</a></td>\n            <td>boolean</td>\n            <td>false</td>\n        </tr>\n         <tr>\n            <td>labelLayout</td>\n            <td>label的布局方式</a></td>\n            <td>\'horizontal\'|\'vertical\'|\'inline\'</td>\n            <td>\'vertical\'</td>\n             <tr>\n            <td>initAnimation</td>\n            <td>渲染items是否初始化动画</td>\n            <td>boolean</td>\n            <td>true</td>\n        </tr>\n        </tr>\n    </tbody>\n</table>\n\n<div class="z-doc-titles"></div>\n\n<h2 id="items-">items 结构</h2>\n<table>\n    <thead>\n        <tr>\n            <th>参数</th>\n            <th>说明</th>\n            <th>类型</th>\n            <th>默认值</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>key</td>\n            <td>表单控件value对应的字段名</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>label</td>\n            <td>表单控件label</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n            <tr>\n            <td>labelWidth</td>\n            <td>label的宽度，如labelWidth:"120px"，当labelLayout==\'horizontal\'才可能用的上</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> render</td>\n            <td>渲染表单控件的钩子。支持异步加载：必须return的是Promise对象。例如使用了后台接口：(form,changeFormItems)=>api.getOptions.then(re=>{return 表单控件})。changeFormItems 是一个方法，主要用于局部改变items，实现表单控件之间交互联动,使用方式请往下看</td>\n            <td>(form,changeFormItems)=>{return ReactNode | Promise}</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>span</td>\n            <td>栅栏占格(antd的栅栏组件分24栏)，例：{xxl:4,xl:6,lg:8}，默认取this.props.defaultSpan</td>\n            <td>number | object</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>isFormItem</td>\n            <td>默认为true、如果为false则render函数可以渲染非表单控件内容</td>\n            <td>boolean</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td>className</td>\n            <td>可以给每项添加className</td>\n            <td>string</td>\n            <td>--</td>\n        </tr>\n        <tr>\n            <td><i class="zero-icon zerod-shengchangzhouqi"></i> options</td>\n            <td><a href="https://ant.design/components/form-cn/" target="_blank">Antd的表单中getFieldDecorator函数的options参数</a>,可以配置验证规则}</td>\n            <td>object || ()=>options</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id="changeformitems">changeFormItems</h2>\n<p>changeFormItems 是一个方法，主要用于局部改变 items，实现表单控件之间交互联动。但不能直接在 render 函数中使用，应在控件的事件当中。changeFormItems 除了在 items 里的 render 参数中，还存在于 getFormInstance 函数的 methods 参数里。</p>\n<p>changeFormItems 需要两个参数：<code>newItems</code>：array | object 和 <code>part</code> : boolean</p>\n<p><code>newItems</code>的结构取决于 <code>part</code>参数</p>\n<p>如果<code>part</code>为 false (默认为 false),<code>newItems</code>同 Zform 的 items，会重新渲染全部 items，这是早期的做法，不建议使用</p>\n<pre><code class="language-jsx">//this.items就是Zform的items\nconst newItems = this.items.slice(0);\nnewItems.splice(4, 1); //不显示第五个\nchangeFormItems(this.items, false); //触发渲染</code></pre>\n<p>如果<code>part</code>为 true，就是局部改变，<code>newItems</code>可以为数组(多个 item 改变)，可以为对象(单个 item 改变),推荐使用方式如下</p>\n<pre><code class="language-jsx">//不显示key为servicePort的那个item，\nchangeFormItems(\n    {\n        key: &quot;servicePort&quot;, //对应Zform的items里的key\n        show: false, //是否显示\n    },\n    true,\n);\n//其他内容\nchangeFormItems(\n    [\n        {\n            key: &quot;servicePort&quot;, //对应Zform的items里的key\n            //改变key为servicePort的那个item的内容\n            newItem: {\n                control: &lt;Input /&gt;, //控件  ReactNode\n                span: { lg: 12 }, //栅栏占格 同zform 的items里的span\n                options: {}, //同zform 的items里的options\n                isFormItem: true, //control是否是表单控件\n                label: &quot;&quot;, //label\n            },\n        },\n    ],\n    true,\n);</code></pre>\n'},E1JP:function(t,n,e){"use strict";e.r(n);var r=e("OFxj"),o=e("zICX"),d=e.n(o),a=e("nMT3"),s=e("dMCB"),i=e("eaxb"),c=e("P0Y7"),m=e.n(c),l=e("MhH0"),u=e.n(l),p=e("FcZB"),h=e.n(p),f=e("Ratc"),g=e.n(f),q=e("0j8+"),b=e.n(q),v=e("0kOG"),F=e.n(v),y=e("uqIC"),I=e.n(y),k=e("ebhq"),x=e("0van"),w=e.n(x),j=k.a.AmdDocHOC;n.default=j(w.a,{demo1:function(){var t=function(t){function n(){var t,e;u()(this,n);for(var r=arguments.length,o=new Array(r),d=0;d<r;d++)o[d]=arguments[d];return(e=g()(this,(t=b()(n)).call.apply(t,[this].concat(o)))).items=[{key:"serviceCode",label:"服务编码",render:function(t){return new m.a(function(t){setTimeout(function(){t(I.a.createElement(i.a,{placeholder:"请输入服务编码"}))},5e3)})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"serviceName",label:"服务名称",render:function(t){return I.a.createElement(i.a,{placeholder:"请输入服务名称"})},options:{rules:[{required:!0,message:"不能为空。"}]}},{key:"time",label:"申请时间",render:function(t){return I.a.createElement(s.a.RangePicker,{renderExtraFooter:function(){return"extra footer"},showTime:!0})}},{key:"serviceRemark",label:"服务说明",span:24,render:function(t){return I.a.createElement(i.a.TextArea,{rows:2,placeholder:"请输入服务说明"})},options:{rules:[{required:!0,message:"不能为空。"}]}}],e}return F()(n,t),h()(n,[{key:"render",value:function(){return I.a.createElement(r.b,{initAnimation:!0,labelLayout:"inline",colFormItems:this.items,onSearch:function(t){a.a.success("提交成功："+d()(t))},collapseCount:2})}}]),n}(I.a.PureComponent);return I.a.createElement(t,null)}})},"SX+g":function(t,n,e){t.exports=e("sG4F")(498)},jjl2:function(t,n,e){var r={"./AmdDocHOC/index.jsx":"pnNO","./AshowDemoHOC/index.jsx":"+fre"};function o(t){var n=d(t);return e(n)}function d(t){if(!e.o(r,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return r[t]}o.keys=function(){return Object.keys(r)},o.resolve=d,t.exports=o,o.id="jjl2"}}]);
//# sourceMappingURL=34.76fe94b9a6d79e1856b0.js.map